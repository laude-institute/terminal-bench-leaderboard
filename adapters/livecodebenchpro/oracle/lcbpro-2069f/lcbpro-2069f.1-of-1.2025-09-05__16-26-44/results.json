{
    "id": "f3deab07-b6ec-4fca-ac62-f10f8b0e03f8",
    "trial_name": "lcbpro-2069f.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2069f",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2069F)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nA connected component of an undirected graph is defined as a set of vertices $S$ of this graph such that:\n\n- for every pair of vertices $(u, v)$ in $S$, there exists a path between vertices $u$ and $v$;\n- there is no vertex outside $S$ that has a path to a vertex within $S$.\n\nFor example, the graph in the picture below has three components: $\\{1, 3, 7, 8\\}$, $\\{2\\}$, $\\{4, 5, 6\\}$.\n\n![](https://espresso.codeforces.com/7715b47246248fe80ce09cff1f675d0918eda77e.png)\n\nWe say that graph $A$ includes graph $B$ if every component of graph $B$ is a subset of some component of graph $A$.\n\nYou are given two graphs, $A$ and $B$, both consisting of $n$ vertices numbered from $1$ to $n$. Initially, there are no edges in the graphs. You must process queries of two types:\n\n- add an edge to one of the graphs;\n- remove an edge from one of the graphs.\n\nAfter each query, you have to calculate the minimum number of edges that have to be added to $A$ so that $A$ includes $B$, and print it. Note that you don't actually add these edges, you just calculate their number.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($2 \\le n \\le 4 \\cdot 10^5$; $1 \\le q \\le 4 \\cdot 10^5$) -- the number of vertices and queries, respectively.\n\nNext, there are $q$ lines, where the $i$-th line describes the $i$-th query. The description of the query begins with the character $c_i$ (either A or B) -- the graph to which the query should be applied. Then, two integers $x_i$ and $y_i$ follow ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$). If there is an edge $(x_i, y_i)$ in the corresponding graph, it should be removed; otherwise, it should be added to that graph.\n\n### Output\n\nFor each query, print one integer -- the minimum number of edges that you have to add to the graph $A$ so that it includes $B$.\n\n### Example\n\n#### Input #1\n\n```\n\n6 9\n\nA 2 3\n\nB 1 3\n\nA 2 1\n\nA 3 2\n\nB 5 6\n\nA 6 5\n\nA 3 4\n\nA 4 2\n\nA 4 3\n\n```\n\n#### Output #1\n\n```\n0\n1\n0\n1\n2\n1\n1\n0\n1\n```",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2069f/lcbpro-2069f.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:50:51.957316+00:00",
    "trial_ended_at": "2025-09-05T23:51:24.630023+00:00",
    "agent_started_at": "2025-09-05T23:51:03.109197+00:00",
    "agent_ended_at": "2025-09-05T23:51:03.696674+00:00",
    "test_started_at": "2025-09-05T23:51:05.891804+00:00",
    "test_ended_at": "2025-09-05T23:51:10.179140+00:00"
}