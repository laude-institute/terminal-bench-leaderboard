{
    "id": "11432e4d-f15b-4100-b2b2-313993ea38a8",
    "trial_name": "lcbpro-2053i2.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2053i2",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2053I2)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nNote that this statement is different to the version used in the official round. The statement has been corrected to a solvable version. In the official round, all submissions to this problem have been removed.\n\nThis is the hard version of the problem. The difference between the versions is that in this version, you need to compute the sum of value of different arrays. You can hack only if you solved all versions of this problem.\n\nIris treasures an integer array $a_1, a_2, \\ldots, a_n$. She knows this array has an interesting property: the maximum absolute value of all elements is less than or equal to the sum of all elements, that is, $\\max(\\lvert a_i\\rvert) \\leq \\sum a_i$.\n\nIris defines the boredom of an array as its maximum subarray$^{\\text{∗}}$ sum.\n\nIris's birthday is coming, and Victor is going to send her another array $b_1, b_2, \\ldots, b_m$ as a gift. For some seemingly obvious reasons, he decides the array $b_1, b_2, \\ldots, b_m$ should have the following properties.\n\n- $a_1, a_2, \\ldots, a_n$ should be a subsequence$^{\\text{†}}$ of $b_1, b_2, \\ldots, b_m$.\n- The two arrays have the same sum. That is, $\\sum\\limits_{i=1}^n a_i = \\sum\\limits_{i=1}^m b_i$.\n- The boredom of $b_1, b_2, \\ldots, b_m$ is the smallest possible.\n- Among the arrays with the smallest boredom, the length of the array $b$ (i.e., $m$) is the smallest possible. And in this case, Iris will understand his regard as soon as possible!\n\nFor a possible array $b_1, b_2, \\ldots, b_m$ satisfying all the conditions above, Victor defines the value of the array as the number of occurrences of array $a$ as subsequences in array $b$. That is, he counts the number of array $c_1, c_2, \\ldots, c_{n}$ that $1\\le c_1< c_2< \\ldots< c_n\\le m$ and for all integer $i$ that $1\\le i\\le n$, $b_{c_{i}}=a_i$ is satisfied, and let this be the value of array $b$.\n\nEven constrained as above, there are still too many possible gifts. So Victor asks you to calculate the sum of value of all possible arrays $b_1, b_2, \\ldots, b_m$. Since the answer may be large, Victor only needs the number modulo $998\\,244\\,353$. He promises you: if you help him successfully, he will share a bit of Iris's birthday cake with you.\n\n$^{\\text{∗}}$An array $c$ is a subarray of an array $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n$^{\\text{†}}$A sequence $c$ is a subsequence of a sequence $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains an integer $t$ ($1 \\leq t \\leq 10^5$) -- the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 3\\cdot 10^6$) -- the length of the array $a_1, a_2, \\ldots, a_n$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\leq a_i \\leq 10^9$) -- the initial array. It is guaranteed that $\\max(\\lvert a_i\\rvert) \\leq \\sum a_i$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3\\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the sum of values of valid arrays $b_1, b_2, \\ldots, b_m$, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n1 2 3 4\n\n4\n\n2 -3 2 2\n\n4\n\n1 -2 2 1\n\n10\n\n2 -7 6 3 -1 4 2 -5 8 -4\n\n20\n\n4 -2 4 3 -2 1 5 2 3 6 -5 -1 -4 -2 -3 5 -3 1 -4 1\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n20\n1472\n```\n\n### Note\n\nIn the first test case, $a=[1, 2, 3, 4]$. The only possible array $b$ is $[1, 2, 3, 4]$, and its value is $1$.\n\nIn the second test case, $a=[2, -3, 2, 2]$. The possible arrays $b$ are $[1, 2, -3, 2, -1, 2]$ and $[2, 1, -3, 2, -1, 2]$. Both arrays have value $1$.\n\nIn the third test case, $a=[1, -2, 2, 1]$. The only possible array $b$ is $[1, 1, -2, 2, -1, 1]$. It has value $2$, because we can find arrays $c=[1,3,4,6]$ or $[2,3,4,6]$. That is, the array $a$ occurs twice in $b$, so the answer is $2$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2053i2/lcbpro-2053i2.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:59:09.716539+00:00",
    "trial_ended_at": "2025-09-05T23:59:52.098907+00:00",
    "agent_started_at": "2025-09-05T23:59:23.420390+00:00",
    "agent_ended_at": "2025-09-05T23:59:24.578417+00:00",
    "test_started_at": "2025-09-05T23:59:27.227929+00:00",
    "test_ended_at": "2025-09-05T23:59:32.121507+00:00"
}