{
    "id": "cd1fb834-bf5e-48c0-892e-3ddc0b9208ec",
    "trial_name": "lcbpro-2090b.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2090b",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2090B)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nEcrade has an $n \\times m$ grid, originally empty, and he has pushed several (possibly, zero) balls in it.\n\nEach time, he can push one ball into the grid either from the leftmost edge of a particular row or the topmost edge of a particular column of the grid.\n\nWhen a ball moves towards a position:\n\n- If there is no ball originally at that position, the incoming ball will stop and occupy the position.\n- If there is already a ball at that position, the incoming ball will stop and occupy the position, while the original ball will continue moving to the next position in the same direction.\n\nNote that if a row or column is full (i.e., all positions in that row or column have balls), he cannot push a ball into that row or column.\n\nGiven the final state of whether there is a ball at each position of the grid, you need to determine whether it is possible for Ecrade to push the balls to reach the final state.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) -- the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 50$).\n\nThis is followed by $n$ lines, each containing exactly $m$ characters and consisting only of $0$ and $1$, describing the final state of the grid. There is a ball at one position of the grid if and only if the corresponding position of the given input is $1$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all test cases does not exceed $10\\,000$.\n\n### Output\n\nFor each test case, output \"Yes\" (without quotes) if it is possible for Ecrade to push the balls to reach the final state, and \"No\" (without quotes) otherwise.\n\nYou can output \"Yes\" and \"No\" in any case (for example, strings \"YES\", \"yEs\" and \"yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 3\n\n001\n\n001\n\n110\n\n3 3\n\n010\n\n111\n\n010\n\n3 3\n\n111\n\n111\n\n111\n\n3 3\n\n000\n\n000\n\n000\n\n3 3\n\n000\n\n000\n\n001\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nYES\nNO\n```\n\n### Note\n\nFor simplicity, if Ecrade pushes a ball from the leftmost edge of the $i$-th row, we call the operation $\\text{ROW}\\ i$; if he pushes a ball from the topmost edge of the $i$-th column, we call the operation $\\text{COL}\\ i$.\n\nFor intuitive understanding, a non-zero number $x$ in the matrix given below represents the $x$-th ball that is pushed in.\n\nIn the first test case, a possible series of operations:\n\n$\\begin{pmatrix}0&0&0\\\\0&0&0\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 3}\\xrightarrow{\\text{ROW}\\ 3} \\begin{pmatrix}0&0&0\\\\0&0&0\\\\2&1&0\\end{pmatrix}\\xrightarrow{\\text{COL}\\ 3}\\xrightarrow{\\text{COL}\\ 3} \\begin{pmatrix}0&0&4\\\\0&0&3\\\\2&1&0\\end{pmatrix}$\n\nIn the second test case, a possible series of operations:\n\n$\\begin{pmatrix}0&0&0\\\\0&0&0\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 2} \\begin{pmatrix}0&0&0\\\\3&2&1\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{COL}\\ 2}\\xrightarrow{\\text{COL}\\ 2} \\begin{pmatrix}0&5&0\\\\3&4&1\\\\0&2&0\\end{pmatrix}$\n\nIn the third test case, a possible series of operations:\n\n$\\begin{pmatrix}0&0&0\\\\0&0&0\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 1}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 3} \\begin{pmatrix}1&0&0\\\\2&0&0\\\\3&0&0\\end{pmatrix}\\xrightarrow{\\text{COL}\\ 3}\\xrightarrow{\\text{COL}\\ 3}\\xrightarrow{\\text{COL}\\ 3} \\begin{pmatrix}1&0&6\\\\2&0&5\\\\3&0&4\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 1}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 3} \\begin{pmatrix}7&1&6\\\\8&2&5\\\\9&3&4\\end{pmatrix}$",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2090b/lcbpro-2090b.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:26:46.195737+00:00",
    "trial_ended_at": "2025-09-05T23:27:18.872999+00:00",
    "agent_started_at": "2025-09-05T23:26:55.301589+00:00",
    "agent_ended_at": "2025-09-05T23:26:56.668187+00:00",
    "test_started_at": "2025-09-05T23:27:00.600038+00:00",
    "test_ended_at": "2025-09-05T23:27:06.629315+00:00"
}