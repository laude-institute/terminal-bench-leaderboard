{
    "id": "39ff6992-1be4-4094-91a5-437f85c95bae",
    "trial_name": "lcbpro-2046a.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2046a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2046A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThere is a matrix consisting of $2$ rows and $n$ columns. The rows are numbered from $1$ to $2$ from top to bottom; the columns are numbered from $1$ to $n$ from left to right. Let's denote the cell on the intersection of the $i$-th row and the $j$-th column as $(i,j)$. Each cell contains an integer; initially, the integer in the cell $(i,j)$ is $a_{i,j}$.\n\nYou can perform the following operation any number of times (possibly zero):\n\n- choose two columns and swap them (i.â€‰e. choose two integers $x$ and $y$ such that $1 \\le x < y \\le n$, then swap $a_{1,x}$ with $a_{1,y}$, and then swap $a_{2,x}$ with $a_{2,y}$).\n\nAfter performing the operations, you have to choose a path from the cell $(1,1)$ to the cell $(2,n)$. For every cell $(i,j)$ in the path except for the last, the next cell should be either $(i+1,j)$ or $(i,j+1)$. Obviously, the path cannot go outside the matrix.\n\nThe cost of the path is the sum of all integers in all $(n+1)$ cells belonging to the path. You have to perform the operations and choose a path so that its cost is maximum possible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nEach test case consists of three lines:\n\n- the first line contains one integer $n$ ($1 \\le n \\le 5000$) -- the number of columns in the matrix;\n- the second line contains $n$ integers $a_{1,1}, a_{1,2}, \\ldots, a_{1,n}$ ($-10^5 \\le a_{i,j} \\le 10^5$) -- the first row of the matrix;\n- the third line contains $n$ integers $a_{2,1}, a_{2,2}, \\ldots, a_{2,n}$ ($-10^5 \\le a_{i,j} \\le 10^5$) -- the second row of the matrix.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, print one integer -- the maximum cost of a path you can obtain.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n-10\n\n5\n\n3\n\n1 2 3\n\n10 -5 -3\n\n4\n\n2 8 5 3\n\n1 10 3 4\n\n```\n\n#### Output #1\n\n```\n-5\n16\n29\n```\n\n### Note\n\nHere are the explanations of the first three test cases of the example. The left matrix is the matrix given in the input, the right one is the state of the matrix after several column swaps (possibly zero). The optimal path is highlighted in green.\n\n![](https://espresso.codeforces.com/e7b0e0b73deafdd300cca5214c9e7584889e20ad.png)",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2046a/lcbpro-2046a.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:34:33.641078+00:00",
    "trial_ended_at": "2025-09-05T23:35:05.805164+00:00",
    "agent_started_at": "2025-09-05T23:34:41.271954+00:00",
    "agent_ended_at": "2025-09-05T23:34:41.747511+00:00",
    "test_started_at": "2025-09-05T23:34:44.631496+00:00",
    "test_ended_at": "2025-09-05T23:34:50.510943+00:00"
}