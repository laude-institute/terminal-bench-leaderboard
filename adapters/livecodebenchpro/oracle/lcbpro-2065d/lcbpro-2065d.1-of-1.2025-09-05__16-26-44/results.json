{
    "id": "9b4a15f0-a608-43c8-a650-f6fc5cb3366c",
    "trial_name": "lcbpro-2065d.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2065d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2065D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nLet's denote the score of an array $b$ with $k$ elements as $\\sum_{i=1}^{k}\\left(\\sum_{j=1}^ib_j\\right)$. In other words, let $S_i$ denote the sum of the first $i$ elements of $b$. Then, the score can be denoted as $S_1+S_2+\\ldots+S_k$.\n\nSkibidus is given $n$ arrays $a_1,a_2,\\ldots,a_n$, each of which contains $m$ elements. Being the sigma that he is, he would like to concatenate them in any order to form a single array containing $n\\cdot m$ elements. Please find the maximum possible score Skibidus can achieve with his concatenated array!\n\nFormally, among all possible permutations$^{\\text{∗}}$ $p$ of length $n$, output the maximum score of $a_{p_1} + a_{p_2} + \\dots + a_{p_n}$, where $+$ represents concatenation$^{\\text{†}}$.\n\n$^{\\text{∗}}$A permutation of length $n$ contains all integers from $1$ to $n$ exactly once.\n\n$^{\\text{†}}$The concatenation of two arrays $c$ and $d$ with lengths $e$ and $f$ respectively (i.e. $c + d$) is $c_1, c_2, \\ldots, c_e, d_1, d_2, \\ldots d_f$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) -- the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\cdot m \\leq 2 \\cdot 10^5$) -- the number of arrays and the length of each array.\n\nThe $i$'th of the next $n$ lines contains $m$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$ ($1 \\leq a_{i,j} \\leq 10^6$) -- the elements of the $i$'th array.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum score among all possible permutations $p$ on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n4 4\n\n6 1\n\n3 4\n\n2 2 2 2\n\n3 2 1 2\n\n4 1 2 1\n\n2 3\n\n3 4 5\n\n1 1 9\n\n```\n\n#### Output #1\n\n```\n41\n162\n72\n```\n\n### Note\n\nFor the first test case, there are two possibilities for $p$:\n\n- $p = [1, 2]$. Then, $a_{p_1} + a_{p_2} = [4, 4, 6, 1]$. Its score is $4+(4+4)+(4+4+6)+(4+4+6+1)=41$.\n- $p = [2, 1]$. Then, $a_{p_1} + a_{p_2} = [6, 1, 4, 4]$. Its score is $6+(6+1)+(6+1+4)+(6+1+4+4)=39$.\n\nThe maximum possible score is $41$.\n\nIn the second test case, one optimal arrangement of the final concatenated array is $[4,1,2,1,2,2,2,2,3,2,1,2]$. We can calculate that the score is $162$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2065d/lcbpro-2065d.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:55:27.980441+00:00",
    "trial_ended_at": "2025-09-05T23:56:03.578818+00:00",
    "agent_started_at": "2025-09-05T23:55:36.809019+00:00",
    "agent_ended_at": "2025-09-05T23:55:37.325286+00:00",
    "test_started_at": "2025-09-05T23:55:40.168670+00:00",
    "test_ended_at": "2025-09-05T23:55:44.639015+00:00"
}