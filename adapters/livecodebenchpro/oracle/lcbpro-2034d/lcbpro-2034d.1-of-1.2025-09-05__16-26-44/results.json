{
    "id": "ed95e467-f334-4a62-9971-38a3919a33d6",
    "trial_name": "lcbpro-2034d.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2034d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2034D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\n[Darius the Great](https://en.wikipedia.org/wiki/Darius_the_Great) is constructing $n$ stone columns, each consisting of a base and between $0$, $1$, or $2$ inscription pieces stacked on top.\n\nIn each move, Darius can choose two columns $u$ and $v$ such that the difference in the number of inscriptions between these columns is exactly $1$, and transfer one inscription from the column with more inscriptions to the other one. It is guaranteed that at least one column contains exactly $1$ inscription.\n\n![](https://espresso.codeforces.com/d4cdf6815b1220ffe2be57e8bcb7d42bfa773cfc.webp)\n\nSince beauty is the main pillar of historical buildings, Darius wants the columns to have ascending heights. To avoid excessive workers' efforts, he asks you to plan a sequence of at most $n$ moves to arrange the columns in non-decreasing order based on the number of inscriptions. Minimizing the number of moves is not required.\n\n### Input\n\nThe first line contains an integer $t$ -- the number of test cases. ($1 \\leq t \\leq 3000$)\n\nThe first line of each test case contains an integer $n$ -- the number of stone columns. ($1 \\leq n \\leq 2 \\cdot 10^5$)\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$, where $a_i \\in \\{0,1,2\\}$ represents the initial number of inscriptions in the $i$-th column. It is guaranteed that at least one column has exactly $1$ inscription.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer $k$ -- the number of moves used to sort the columns. ($0 \\leq k \\leq n$)\n\nThen, output $k$ lines, each containing two integers $u_i$ and $v_i$ ($1 \\leq u_i, v_i \\leq n$), representing the indices of the columns involved in the $i$-th move. During each move, it must hold that $|a_{u_i} - a_{v_i}| = 1$, and one inscription is transferred from the column with more inscriptions to the other.\n\nIt can be proven that a valid solution always exists under the given constraints.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n0 2 0 1\n\n3\n\n1 2 0\n\n6\n\n0 1 1 2 2 2\n\n```\n\n#### Output #1\n\n```\n2\n2 4\n2 3\n2\n3 1\n2 3\n0\n```\n\n### Note\n\nColumns state in the first test case:\n\n- Initial: $0, 2, 0, 1$\n- After the first move: $0, 1, 0, 2$\n- After the second move: $0, 0, 1, 2$\n\nColumns state in the second test case:\n\n- Initial: $1, 2, 0$\n- After the first move: $0, 2, 1$\n- After the second move: $0, 1, 2$\n\nIn the third test case, the column heights are already sorted in ascending order.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2034d/lcbpro-2034d.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:31:03.671365+00:00",
    "trial_ended_at": "2025-09-05T23:31:39.228523+00:00",
    "agent_started_at": "2025-09-05T23:31:12.542331+00:00",
    "agent_ended_at": "2025-09-05T23:31:13.011432+00:00",
    "test_started_at": "2025-09-05T23:31:16.204586+00:00",
    "test_ended_at": "2025-09-05T23:31:25.530547+00:00"
}