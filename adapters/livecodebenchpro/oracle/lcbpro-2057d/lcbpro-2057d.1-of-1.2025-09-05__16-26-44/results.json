{
    "id": "e1a85c66-7456-4fd7-9cc3-784076ab8cb3",
    "trial_name": "lcbpro-2057d.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2057d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2057D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\n\"T-Generation\" has decided to purchase gifts for various needs; thus, they have $n$ different sweaters numbered from $1$ to $n$. The $i$-th sweater has a size of $a_i$. Now they need to send some subsegment of sweaters to an olympiad. It is necessary that the sweaters fit as many people as possible, but without having to take too many of them.\n\nThey need to choose two indices $l$ and $r$ ($1 \\le l \\le r \\le n$) to maximize the convenience equal to\n\n$$\\operatorname{max} (a_l, a_{l + 1}, \\ldots, a_r) - \\operatorname{min} (a_l, a_{l + 1}, \\ldots, a_r) - (r - l),$$\n\nthat is, the range of sizes minus the number of sweaters.\n\nSometimes the sizes of the sweaters change; it is known that there have been $q$ changes, in each change, the size of the $p$-th sweater becomes $x$.\n\nHelp the \"T-Generation\" team and determine the maximum convenience among all possible pairs $(l, r)$ initially, as well as after each size change.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) -- the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) -- the number of sweaters and the number of size changes.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) -- the sizes of the sweaters.\n\nEach of the following $q$ lines of each test case contains two integers $p$ and $x$ ($1 \\le p \\le n$, $1 \\le x \\le 10^9$) -- the next size change.\n\nIt is guaranteed that the sum of the values of $n$ and the sum of the values of $q$ across all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum value of convenience among all possible pairs $(l, r)$ before any actions, as well as after each size change.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n1 10\n\n1 10\n\n2 2\n\n5 3\n\n1 2 3 4 5\n\n3 7\n\n1 4\n\n5 2\n\n8 5\n\n7 4 2 4 8 2 1 4\n\n5 4\n\n1 10\n\n3 2\n\n8 11\n\n7 7\n\n```\n\n#### Output #1\n\n```\n8\n0\n7\n0\n4\n4\n4\n5\n3\n6\n6\n9\n7\n```\n\n### Note\n\nConsider the first test case.\n\n- Before any changes, you can take all the sweaters; then the convenience is equal to $\\operatorname{max} (a_1, a_2) - \\operatorname{min} (a_1, a_2) - (2 - 1) = 10 - 1 - 1 = 8$.\n- After the first query, the sizes of both sweaters will be equal to $10$, you can only take the first sweater and the convenience is equal to $10 - 10 - 0 = 0$.\n- After the second query, the size of the first sweater will be $10$, and the second $2$, you can take all the sweaters and the convenience is equal to $\\operatorname{max} (a_1, a_2) - \\operatorname{min} (a_1, a_2) - (2 - 1) = 10 - 2 - 1 = 7$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2057d/lcbpro-2057d.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:32:25.002441+00:00",
    "trial_ended_at": "2025-09-05T23:33:12.743599+00:00",
    "agent_started_at": "2025-09-05T23:32:39.264874+00:00",
    "agent_ended_at": "2025-09-05T23:32:41.088017+00:00",
    "test_started_at": "2025-09-05T23:32:44.179907+00:00",
    "test_ended_at": "2025-09-05T23:32:57.577827+00:00"
}