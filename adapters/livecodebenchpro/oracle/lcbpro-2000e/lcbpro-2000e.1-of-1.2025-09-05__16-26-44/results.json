{
    "id": "09a7eac3-60bb-4dd0-9e55-715bfb21631c",
    "trial_name": "lcbpro-2000e.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2000e",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2000E)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou really love gorillas, so you decided to organize a photoshoot for them. Gorillas live in the jungle. The jungle is represented as a grid of $n$ rows and $m$ columns. $w$ gorillas agreed to participate in the photoshoot, and the gorilla with index $i$ ($1 \\le i \\le w$) has a height of $a_i$. You want to place all the gorillas in the cells of the grid such that there is no more than one gorilla in each cell.\n\nThe spectacle of the arrangement is equal to the sum of the spectacles of all sub-squares of the grid with a side length of $k$.\n\nThe spectacle of a sub-square is equal to the sum of the heights of the gorillas in it.\n\nFrom all suitable arrangements, choose the arrangement with the maximumspectacle.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^3$) -- the number of test cases.\n\nThe descriptions of the test cases follow.\n\nThe first line contains integers $n$, $m$, $k$ ($1 \\le n, m \\le 2 \\cdot 10^5$, $1 \\le n \\cdot m \\le 2 \\cdot 10^5$, $1 \\le k \\le \\min(n, m)$) -- the dimensions of the grid and the side length of the square.\n\nThe second line contains an integer $w$ ($1 \\le w \\le n \\cdot m$) -- the number of gorillas.\n\nThe third line contains $w$ integers $a_1, a_2, \\ldots, a_w$ ($1 \\le a_i \\le 10^9$) -- the heights of the gorillas.\n\nIt is guaranteed that the sum of $n \\cdot m$ across all test cases does not exceed $2 \\cdot 10^5$. The same guarantee applies to $w$.\n\n### Output\n\nFor each test case, output a single integer -- the maximumspectacle of a suitable arrangement.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 4 2\n\n9\n\n1 1 1 1 1 1 1 1 1\n\n2 1 1\n\n2\n\n5 7\n\n20 15 7\n\n9\n\n4 1 4 5 6 1 1000000000 898 777\n\n1984 1 1\n\n4\n\n5 4 1499 2004\n\n9 5 5\n\n6\n\n6 7 14 16 16 6\n\n```\n\n#### Output #1\n\n```\n21\n12\n49000083104\n3512\n319\n```\n\n### Note\n\nIn the first test case of the first input set, the spectacle of the following sub-squares is summed:\n\n![](https://espresso.codeforces.com/fcecb8349be690c7d5ebb99bd46d5ef17ce8ac3e.png)Yellow color corresponds to the sub-squares, green -- to the rest of the grid squares.\n\nThe picture shows the optimal arrangement of the gorillas. The spectacle of the arrangement is $4 + 4 + 3 + 3 + 4 + 3 = 21$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2000e/lcbpro-2000e.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:54:43.097168+00:00",
    "trial_ended_at": "2025-09-05T23:55:28.498546+00:00",
    "agent_started_at": "2025-09-05T23:54:55.427924+00:00",
    "agent_ended_at": "2025-09-05T23:54:56.005653+00:00",
    "test_started_at": "2025-09-05T23:54:59.237233+00:00",
    "test_ended_at": "2025-09-05T23:55:03.411001+00:00"
}