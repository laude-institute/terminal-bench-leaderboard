{
    "id": "9fad72bb-ecde-41f0-9180-52d97303c5c4",
    "trial_name": "lcbpro-2118a.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2118a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2118A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nWe call a bitstring$^{\\text{∗}}$ perfect if it has the same number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences$^{\\text{†}}$. Construct a perfect bitstring of length $n$ where the number of $\\mathtt{1}$ characters it contains is exactly $k$.\n\nIt can be proven that the construction is always possible. If there are multiple solutions, output any of them.\n\n$^{\\text{∗}}$A bitstring is a string consisting only of the characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\n$^{\\text{†}}$A sequence $a$ is a subsequence of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly zero or all) characters.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 100$, $0 \\le k \\le n$) -- the size of the bitstring and the number of $\\mathtt{1}$ characters in the bitstring.\n\n### Output\n\nFor each test case, output the constructed bitstring. If there are multiple solutions, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 2\n\n5 3\n\n5 5\n\n6 2\n\n1 1\n\n```\n\n#### Output #1\n\n```\n1010\n10110\n11111\n100010\n1```\n\n### Note\n\nIn the first test case, the number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences is the same, both being $1$, and the sequence contains exactly two $\\mathtt{1}$ characters.\n\nIn the second test case, the number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences is the same, both being $2$, and the sequence contains exactly three $\\mathtt{1}$ characters.\n\nIn the third test case, the number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences is the same, both being $0$, and the sequence contains exactly five $\\mathtt{1}$ characters.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2118a/lcbpro-2118a.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:54:27.092969+00:00",
    "trial_ended_at": "2025-09-05T23:55:03.458940+00:00",
    "agent_started_at": "2025-09-05T23:54:38.014536+00:00",
    "agent_ended_at": "2025-09-05T23:54:38.916830+00:00",
    "test_started_at": "2025-09-05T23:54:41.762798+00:00",
    "test_ended_at": "2025-09-05T23:54:46.573801+00:00"
}