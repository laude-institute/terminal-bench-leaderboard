{
    "id": "f8abc553-a858-4d7b-8fa1-378704d41ab1",
    "trial_name": "lcbpro-2021e3.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2021e3",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2021E3)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThis is the extreme version of the problem. In the three versions, the constraints on $n$ and $m$ are different. You can make hacks only if all the versions of the problem are solved.\n\nPak Chanek is setting up internet connections for the village of Khuntien. The village can be represented as a connected simple graph with $n$ houses and $m$ internet cables connecting house $u_i$ and house $v_i$, each with a latency of $w_i$.\n\nThere are $p$ houses that require internet. Pak Chanek can install servers in at most $k$ of the houses. The houses that need internet will then be connected to one of the servers. However, since each cable has its latency, the latency experienced by house $s_i$ requiring internet will be the maximum latency of the cables between that house and the server it is connected to.\n\nFor each $k = 1,2,\\ldots,n$, help Pak Chanek determine the minimum total latency that can be achieved for all the houses requiring internet.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains 3 integers $n$, $m$, $p$ ($2 \\le n \\le 2 \\cdot 10^5$; $n-1 \\le m \\le 2 \\cdot 10^5$; $1 \\le p \\le n$) -- the number of houses, the number of cables, and the number of houses that need internet.\n\nThe second line of each test case contains $p$ integers $s_1, s_2, \\ldots, s_p$ ($1 \\le s_i \\le n$) -- the houses that need internet. It is guaranteed that all elements of $s$ are distinct.\n\nThe $i$-th of the next $m$ lines of each test case contains three integers $u_i$, $v_i$, and $w_i$ ($1 \\le u_i < v_i \\le n$; $1 \\le w_i \\le 10^9$) -- the internet cable connecting house $u_i$ and house $v_i$ with latency of $w_i$. It is guaranteed that the given edges form a connected simple graph.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers: the minimum total latency that can be achieved for all the houses requiring internet for each $k = 1,2,\\ldots,n$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n9 8 5\n\n2 5 6 8 9\n\n1 2 1\n\n1 3 2\n\n3 4 10\n\n4 5 3\n\n4 6 5\n\n1 7 10\n\n7 8 4\n\n7 9 2\n\n3 3 2\n\n3 1\n\n1 2 1\n\n2 3 3\n\n1 3 2\n\n```\n\n#### Output #1\n\n```\n34 19 9 4 0 0 0 0 0\n2 0 0\n```\n\n### Note\n\nIn the first test case for $k=3$, a possible optimal solution is to install servers at vertices $2$, $6$ and $8$ and obtain the following latency:\n\n- $\\text{latency}(2) = 0$\n- $\\text{latency}(5) = \\max(3, 5) = 5$\n- $\\text{latency}(6) = 0$\n- $\\text{latency}(8) = 0$\n- $\\text{latency}(9) = \\max(2, 4) = 4$\n\nSo the total latency is $9$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2021e3/lcbpro-2021e3.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:44:27.897495+00:00",
    "trial_ended_at": "2025-09-05T23:45:07.167655+00:00",
    "agent_started_at": "2025-09-05T23:44:34.175337+00:00",
    "agent_ended_at": "2025-09-05T23:44:35.157903+00:00",
    "test_started_at": "2025-09-05T23:44:37.625546+00:00",
    "test_ended_at": "2025-09-05T23:44:52.505180+00:00"
}