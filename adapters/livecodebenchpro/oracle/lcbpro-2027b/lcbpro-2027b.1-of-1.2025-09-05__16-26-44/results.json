{
    "id": "bb655acd-df73-4e29-8b1e-1df3c4220f2d",
    "trial_name": "lcbpro-2027b.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2027b",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2027B)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nStalin Sort is a humorous sorting algorithm designed to eliminate elements which are out of place instead of bothering to sort them properly, lending itself to an $\\mathcal{O}(n)$ time complexity.\n\nIt goes as follows: starting from the second element in the array, if it is strictly smaller than the previous element (ignoring those which have already been deleted), then delete it. Continue iterating through the array until it is sorted in non-decreasing order. For example, the array $[1, 4, 2, 3, 6, 5, 5, 7, 7]$ becomes $[1, 4, 6, 7, 7]$ after a Stalin Sort.\n\nWe define an array as vulnerable if you can sort it in non-increasing order by repeatedly applying a Stalin Sort to any of its subarrays$^{\\text{∗}}$, as many times as is needed.\n\nGiven an array $a$ of $n$ integers, determine the minimum number of integers which must be removed from the array to make it vulnerable.\n\n$^{\\text{∗}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 500$) -- the number of test cases. This is followed by descriptions of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2000$) -- the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output a single integer -- the minimum number of integers which must be removed from the array to make it vulnerable.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n7\n\n3 6 4 9 2 5 2\n\n5\n\n5 4 4 2 2\n\n8\n\n2 2 4 4 6 6 10 10\n\n1\n\n1000\n\n9\n\n6 8 9 10 12 9 7 5 4\n\n7\n\n300000000 600000000 400000000 900000000 200000000 400000000 200000000\n\n```\n\n#### Output #1\n\n```\n2\n0\n6\n0\n4\n2\n```\n\n### Note\n\nIn the first test case, the optimal answer is to remove the numbers $3$ and $9$. Then we are left with $a = [6, 4, 2, 5, 2]$. To show this array is vulnerable, we can first apply a Stalin Sort on the subarray $[4, 2, 5]$ to get $a = [6, 4, 5, 2]$ and then apply a Stalin Sort on the subarray $[6, 4, 5]$ to get $a = [6, 2]$, which is non-increasing.\n\nIn the second test case, the array is already non-increasing, so we don't have to remove any integers.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2027b/lcbpro-2027b.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:41:02.798159+00:00",
    "trial_ended_at": "2025-09-05T23:41:38.536889+00:00",
    "agent_started_at": "2025-09-05T23:41:13.693702+00:00",
    "agent_ended_at": "2025-09-05T23:41:15.058654+00:00",
    "test_started_at": "2025-09-05T23:41:18.214988+00:00",
    "test_ended_at": "2025-09-05T23:41:23.868232+00:00"
}