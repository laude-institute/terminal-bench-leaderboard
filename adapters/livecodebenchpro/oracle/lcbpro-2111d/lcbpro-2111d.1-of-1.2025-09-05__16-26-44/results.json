{
    "id": "509e028c-496d-4eab-b097-cd4da83c2de0",
    "trial_name": "lcbpro-2111d.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2111d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2111D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nA new semester is about to begin, and it is necessary to create a schedule for the first day. There are a total of $n$ groups and $m$ classrooms in the faculty. It is also known that each group has exactly $6$ classes on the first day, and the $k$-th class of each group takes place at the same time. Each class must be held in a classroom, and at the same time, there cannot be classes for more than one group in the same classroom.\n\nEach classroom has its own index (at least three digits), and all digits of this index, except for the last two, indicate the floor on which the classroom is located. For example, classroom $479$ is located on the $4$-th floor, while classroom $31415$ is on the $314$-th floor. Between floors, one can move by stairs; for any floor $x > 1$, one can either go down to floor $x - 1$ or go up to floor $x + 1$; from the first floor, one can only go up to the second; from the floor $10^7$ (which is the last one), it is possible to go only to the floor $9999999$.\n\nThe faculty's dean's office has decided to create the schedule in such a way that students move as much as possible between floors, meaning that the total number of movements between floors across all groups should be maximized. When the students move from one floor to another floor, they take the shortest path.\n\nFor example, if there are $n = 2$ groups and $m = 4$ classrooms $[479, 290, 478, 293]$, the schedule can be arranged as follows:\n\nClass No.Group 1Group 2$1\n\n$$290$$\n\n293\n\n$$2$$\n\n478\n\n$$479$$\n\n3\n\n$$293$$\n\n290\n\n$$4$$\n\n479\n\n$$478$$\n\n5\n\n$$293$$\n\n290\n\n$$6$$\n\n479$$478$\n\nIn such a schedule, the groups will move between the $2$nd and $4$th floors each time, resulting in a total of $20$ movements between floors.\n\nHelp the dean's office create any suitable schedule!\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{3}$) -- the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 10^{5}$) -- the number of groups and the number of available classrooms.\n\nThe second line of each test case contains $m$ integers $a_{i}$ ($100 \\le a_{i} < 10^{9}$) -- the indices of the available classrooms.\n\nAdditional constraints on the input:\n\n- the numbers of all classrooms are pairwise distinct;\n- the sum of $m$ across all test cases does not exceed $10^{5}$.\n\n### Output\n\nFor each test case, output $n$ lines, where the $i$-th line should contain $6$ integers -- the indices of the classrooms where the classes for the $i$-th group will be held.\n\nEach classroom must be occupied by at most one group during the $k$-th class.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 4\n\n479 290 478 293\n\n1 1\n\n31415\n\n6 10\n\n479 385 290 293 384 383 297 478 291 382\n\n```\n\n#### Output #1\n\n```\n290 478 293 479 293 479\n293 479 290 478 290 478\n31415 31415 31415 31415 31415 31415\n479 290 479 290 479 290\n290 479 290 479 290 479\n293 478 293 478 293 478\n297 385 297 385 297 385\n478 293 478 293 478 293\n291 384 291 384 291 384\n```\n\n### Note\n\nIn the third test case, the maximum number of moves between classrooms is $50$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2111d/lcbpro-2111d.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:58:56.973172+00:00",
    "trial_ended_at": "2025-09-05T23:59:30.770538+00:00",
    "agent_started_at": "2025-09-05T23:59:07.651673+00:00",
    "agent_ended_at": "2025-09-05T23:59:08.572384+00:00",
    "test_started_at": "2025-09-05T23:59:11.818654+00:00",
    "test_ended_at": "2025-09-05T23:59:15.739333+00:00"
}