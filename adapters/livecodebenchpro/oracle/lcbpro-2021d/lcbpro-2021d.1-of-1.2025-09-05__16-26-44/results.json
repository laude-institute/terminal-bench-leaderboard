{
    "id": "8b0eeebb-1fcb-424d-9b69-990d120c130c",
    "trial_name": "lcbpro-2021d.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2021d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2021D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nPak Chanek has a friend who runs a drink stall in a canteen. His friend will sell drinks for $n$ days, numbered from day $1$ to day $n$. There are also $m$ types of drinks, numbered from $1$ to $m$.\n\nThe profit gained from selling a drink on a particular day can vary. On day $i$, the projected profit from selling drink of type $j$ is $A_{i, j}$. Note that $A_{i, j}$ can be negative, meaning that selling the drink would actually incur a loss.\n\nPak Chanek wants to help his friend plan the sales over the $n$ days. On day $i$, Pak Chanek must choose to sell at least one type of drink. Furthermore, the types of drinks sold on a single day must form a subarray. In other words, in each day, Pak Chanek will select $i$ and $j$ such that $1 \\leq i \\leq j \\leq m$. Then all types of drinks between $i$ and $j$ (inclusive) will be sold.\n\nHowever, to ensure that customers from the previous day keep returning, the selection of drink types sold on day $i$ ($i>1$) must meet the following conditions:\n\n- At least one drink type sold on day $i$ must also have been sold on day $i-1$.\n- At least one drink type sold on day $i$ must not have been sold on day $i-1$.\n\nThe daily profit is the sum of the profits from all drink types sold on that day. The total profit from the sales plan is the sum of the profits over $n$ days. What is the maximum total profit that can be achieved if Pak Chanek plans the sales optimally?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$; $3 \\leq m \\leq 2 \\cdot 10^5$; $n \\cdot m \\leq 2 \\cdot 10^5$) -- the number of rows and columns in a grid.\n\nThe next $n$ lines of each test case contain $m$ integers each, where the $i$-th line contains the integers $A_{i,1} A_{i,2}, \\ldots, A_{i,m}$ ($-10^9 \\leq A_{i,j} \\leq 10^9$) -- project profits of each drink type on the $i$-th day.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum profit that Pak Chanek can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n1\n\n3 6\n\n79 20 49 5 -1000 500\n\n-105 9 109 24 -98 -499\n\n14 47 12 39 23 50\n\n```\n\n#### Output #1\n\n```\n475\n```\n\n### Note\n\nHere is Pak Chanek's optimal plan:\n\n![](https://espresso.codeforces.com/ccb42f0d02306295b68f615cb77d068a6269d1d6.png)![](https://espresso.codeforces.com/9d9f5b0cf524cb68580876216c9aab01fbf55f0d.png)![](https://espresso.codeforces.com/d3d6b12faf0449759658f9d1f0e6525a52bf3d93.png)\n\n- On day $1$, Pak Chanek sells drink types $1$ to $3$. Generating a profit of $79+20+49 = 148$.\n- On day $2$, Pak Chanek sells drink types $2$ to $4$. Generating a profit of $9+109+24 = 142$\n- On day $3$, Pak Chanek sells drink types $1$ to $6$. Generating a profit of $185$.\n\nSo, the total profit of Pak Chanek's plan is $148 + 142 + 185 = 475$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2021d/lcbpro-2021d.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:38:25.631336+00:00",
    "trial_ended_at": "2025-09-05T23:39:06.629111+00:00",
    "agent_started_at": "2025-09-05T23:38:43.006985+00:00",
    "agent_ended_at": "2025-09-05T23:38:43.753003+00:00",
    "test_started_at": "2025-09-05T23:38:46.804307+00:00",
    "test_ended_at": "2025-09-05T23:38:52.716785+00:00"
}