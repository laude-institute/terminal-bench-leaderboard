{
    "id": "270bd09f-6b60-4301-a984-6e41b3b739a9",
    "trial_name": "lcbpro-2048c.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2048c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2048C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nKevin discovered a binary string $s$ that starts with 1 in the river at Moonlit River Park and handed it over to you. Your task is to select two non-empty substrings$^{\\text{∗}}$ of $s$ (which can be overlapped) to maximize the XOR value of these two substrings.\n\nThe XOR of two binary strings $a$ and $b$ is defined as the result of the $\\oplus$ operation applied to the two numbers obtained by interpreting $a$ and $b$ as binary numbers, with the leftmost bit representing the highest value. Here, $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nThe strings you choose may have leading zeros.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$).\n\nThe only line of each test case contains a binary string $s$ that starts with 1 ($1\\le\\lvert s\\rvert\\le 5000$).\n\nIt is guaranteed that the sum of $\\lvert s\\rvert$ over all test cases doesn't exceed $5000$.\n\n### Output\n\nFor each test case, output four integers $l_1, r_1, l_2, r_2$ ($1 \\le l_1 \\le r_1 \\le |s|$, $1 \\le l_2 \\le r_2 \\le |s|$) -- in the case the two substrings you selected are $s_{l_1} s_{l_1 + 1} \\ldots s_{r_1}$ and $s_{l_2} s_{l_2 + 1} \\ldots s_{r_2}$.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n111\n\n1000\n\n10111\n\n11101\n\n1100010001101\n\n```\n\n#### Output #1\n\n```\n2 2 1 3\n1 3 1 4\n1 5 1 4\n3 4 1 5\n1 13 1 11\n```\n\n### Note\n\nIn the first test case, we can choose $ s_2=\\texttt{1} $ and $ s_1 s_2 s_3=\\texttt{111} $, and $ \\texttt{1}\\oplus\\texttt{111}=\\texttt{110} $. It can be proven that it is impossible to obtain a larger result. Additionally, $ l_1=3$, $r_1=3$, $l_2=1$, $r_2=3 $ is also a valid solution.\n\nIn the second test case, $ s_1 s_2 s_3=\\texttt{100} $, $ s_1 s_2 s_3 s_4=\\texttt{1000} $, the result is $ \\texttt{100}\\oplus\\texttt{1000}=\\texttt{1100} $, which is the maximum.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2048c/lcbpro-2048c.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:35:33.379008+00:00",
    "trial_ended_at": "2025-09-05T23:36:13.263474+00:00",
    "agent_started_at": "2025-09-05T23:35:44.930518+00:00",
    "agent_ended_at": "2025-09-05T23:35:45.504722+00:00",
    "test_started_at": "2025-09-05T23:35:48.104477+00:00",
    "test_ended_at": "2025-09-05T23:35:58.620618+00:00"
}