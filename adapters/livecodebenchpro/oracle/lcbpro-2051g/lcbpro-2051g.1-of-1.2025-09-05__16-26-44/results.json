{
    "id": "10fdb1e3-dd88-4774-a6dc-0a1000fc52e9",
    "trial_name": "lcbpro-2051g.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2051g",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2051G)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nSuppose you play a game where the game field looks like a strip of $1 \\times 10^9$ square cells, numbered from $1$ to $10^9$.\n\nYou have $n$ snakes (numbered from $1$ to $n$) you need to place into some cells. Initially, each snake occupies exactly one cell, and you can't place more than one snake into one cell. After that, the game starts.\n\nThe game lasts for $q$ seconds. There are two types of events that may happen each second:\n\n- snake $s_i$ enlarges: if snake $s_i$ occupied cells $[l, r]$, it enlarges to a segment $[l, r + 1]$;\n- snake $s_i$ shrinks: if snake $s_i$ occupied cells $[l, r]$, it shrinks to a segment $[l + 1, r]$.\n\nEach second, exactly one of the events happens.\n\nIf at any moment of time, any snake runs into some obstacle (either another snake or the end of the strip), you lose. Otherwise, you win with the score equal to the maximum cell occupied by any snake so far.\n\nWhat is the minimum possible score you can achieve?\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n \\le 20$; $1 \\le q \\le 2 \\cdot 10^5$) -- the number of snakes and the number of events. Next $q$ lines contain the description of events -- one per line.\n\nThe $i$-th line contains\n\n- either \"$s_i$ +\" ($1 \\le s_i \\le n$) meaning that the $s_i$-th snake enlarges\n- or \"$s_i$ -\" ($1 \\le s_i \\le n$) meaning that the $s_i$-th snake shrinks.\n\nAdditional constraint on the input: the given sequence of events is valid, i. e. a snake of length $1$ never shrinks.\n\n### Output\n\nPrint one integer -- the minimum possible score.\n\n### Examples\n\n#### Input #1\n\n```\n\n3 6\n\n1 +\n\n1 -\n\n3 +\n\n3 -\n\n2 +\n\n2 -\n\n```\n\n#### Output #1\n\n```\n4\n```\n\n#### Input #2\n\n```\n\n5 13\n\n5 +\n\n3 +\n\n5 -\n\n2 +\n\n4 +\n\n3 +\n\n5 +\n\n5 -\n\n2 +\n\n3 -\n\n3 +\n\n3 -\n\n2 +\n\n```\n\n#### Output #2\n\n```\n11\n```\n\n### Note\n\nIn the first test, the optimal strategy is to place the second snake at cell $1$, the third snake -- at $2$, and the first one -- at $3$. The maximum occupied cell is cell $4$, and it's the minimum possible score.\n\nIn the second test, one of the optimal strategies is to place:\n\n- snake $2$ at position $1$;\n- snake $3$ at position $4$;\n- snake $5$ at position $6$;\n- snake $1$ at position $9$;\n- snake $4$ at position $10$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2051g/lcbpro-2051g.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:46:42.675859+00:00",
    "trial_ended_at": "2025-09-05T23:47:35.304150+00:00",
    "agent_started_at": "2025-09-05T23:46:58.459799+00:00",
    "agent_ended_at": "2025-09-05T23:46:59.072751+00:00",
    "test_started_at": "2025-09-05T23:47:02.376156+00:00",
    "test_ended_at": "2025-09-05T23:47:21.066001+00:00"
}