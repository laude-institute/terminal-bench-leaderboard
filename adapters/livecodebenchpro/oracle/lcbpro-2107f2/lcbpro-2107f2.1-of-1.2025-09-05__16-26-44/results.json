{
    "id": "199b6f6d-f893-4613-8f95-e4067480e59d",
    "trial_name": "lcbpro-2107f2.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2107f2",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2107F2)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThis is the hard version of the problem. The difference between the versions is that in this version, $1\\le n\\le 10^6$ and you need to output the answer for each prefix. You can hack only if you solved all versions of this problem.\n\nLeo works as a programmer in the city center, and his lover teaches at a high school in the suburbs. Every weekend, Leo would ride his bike to the suburbs to spend a nice weekend with his lover.\n\nThere are $n$ cyclists riding in front of Leo on this road right now. They are numbered $1$, $2$, $\\ldots$, $n$ from front to back. Initially, Leo is behind the $n$-th cyclist. The $i$-th cyclist has an agility value $a_i$.\n\nLeo wants to get ahead of the $1$-st cyclist. Leo can take the following actions as many times as he wants:\n\n- Assuming that the first person in front of Leo is cyclist $i$, he can go in front of cyclist $i$ for a cost of $a_i$. This puts him behind cyclist $i - 1$.\n- Using his super powers, swap $a_i$ and $a_j$ ($1\\le i < j\\le n$) for a cost of $(j - i)$.\n\nLeo wants to know the minimum cost to get in front of the $1$-st cyclist.\n\nIn addition, he wants to know the answer for each $1\\le i \\le n$, $[a_1, a_2, \\ldots, a_i]$ as the original array. The problems of different $i$ are independent. To be more specific, in the $i$-th problem, Leo starts behind the $i$-th cyclist instead of the $n$-th cyclist, and cyclists numbered $i + 1, i + 2, \\ldots, n$ are not present.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a positive integer $n$ ($1 \\leq n \\leq 10^6$), representing the number of the cyclists.\n\nThe second line of each test case contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print $n$ integers, the answers for the array $[a_1, a_2, \\ldots, a_i]$ for each $i = 1, 2, \\ldots n$ in this order.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n1 2 4\n\n4\n\n1 1 1 1\n\n2\n\n1 2\n\n4\n\n4 1 3 2\n\n```\n\n#### Output #1\n\n```\n1 3 7\n1 2 3 4\n1 3\n4 3 6 8\n```\n\n### Note\n\nIn the first test case, one possible way to move from the position behind the $n$-th cyclist to the position in front of the $1$-st cyclist is:\n\n- Leo swaps $a_2$ $(i=2)$ and $a_3$ $(j=3)$, then the array becomes $[1,4,2]$; it costs $j-i=3-2=1$.\n- Leo is behind the $3$-rd cyclist and moves behind the $2$-nd cyclist; it costs $a_3=2$.\n- Leo swaps $a_1$ $(i=1)$ and $a_2$ $(j=2)$, then the array becomes $[4,1,2]$; it costs $j-i=2-1=1$.\n- Leo is behind the $2$-nd cyclist and moves behind the $1$-st cyclist; it costs $a_2=1$.\n- Leo swaps $a_1$ $(i=1)$ and $a_2$ $(j=2)$, then the array becomes $[1,4,2]$; it costs $j-i=2-1=1$.\n- Leo moves ahead of the $1$-st cyclist; it costs $a_1=1$.\n\nSo the total cost is $1+2+1+1+1+1=7$. It can be proved that $7$ is the minimum cost.\n\nIn the second test case, to move ahead of the $1$-st cyclist from the position behind the $n$-th cyclist, Leo should not swap anyone's agility value. The total cost is $1+1+1+1=4$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2107f2/lcbpro-2107f2.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:28:02.558044+00:00",
    "trial_ended_at": "2025-09-05T23:29:16.890609+00:00",
    "agent_started_at": "2025-09-05T23:28:10.988479+00:00",
    "agent_ended_at": "2025-09-05T23:28:11.606444+00:00",
    "test_started_at": "2025-09-05T23:28:14.107536+00:00",
    "test_ended_at": "2025-09-05T23:29:03.674159+00:00"
}