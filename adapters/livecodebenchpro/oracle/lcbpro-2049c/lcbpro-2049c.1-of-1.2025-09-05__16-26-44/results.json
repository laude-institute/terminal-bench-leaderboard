{
    "id": "cfaf7344-4ba3-4766-9edd-27cbf34d9bc8",
    "trial_name": "lcbpro-2049c.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2049c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2049C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nEvirir the dragon has many friends. They have 3 friends! That is one more than the average dragon.\n\nYou are given integers $n$, $x$, and $y$. There are $n$ dragons sitting in a circle. The dragons are numbered $1, 2, \\ldots, n$. For each $i$ ($1 \\le i \\le n$), dragon $i$ is friends with dragon $i - 1$ and $i + 1$, where dragon $0$ is defined to be dragon $n$ and dragon $n + 1$ is defined to be dragon $1$. Additionally, dragons $x$ and $y$ are friends with each other (if they are already friends, this changes nothing). Note that all friendships are mutual.\n\nOutput $n$ non-negative integers $a_1, a_2, \\ldots, a_n$ such that for each dragon $i$ ($1 \\le i \\le n$), the following holds:\n\n- Let $f_1, f_2, \\ldots, f_k$ be the friends of dragon $i$. Then $a_i = \\operatorname{mex}(a_{f_1}, a_{f_2}, \\ldots, a_{f_k})$.$^{\\text{∗}}$\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_m$ is defined as the smallest non-negative integer $t$ which does not occur in the collection $c$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains three integers $n$, $x$, $y$ ($3 \\le n \\le 2 \\cdot 10^5$, $1 \\le x < y \\le n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ space-separated non-negative integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) on a line that satisfy the condition in the statement. If there are multiple solutions, print any of them. It can be proven that under the problem constraints, a solution with $0 \\le a_i \\le 10^9$ always exists.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5 1 3\n\n4 2 4\n\n6 3 5\n\n7 3 6\n\n3 2 3\n\n5 1 5\n\n6 2 5\n\n```\n\n#### Output #1\n\n```\n0 2 1 0 1\n1 2 1 0\n1 2 0 1 2 0\n0 1 2 0 1 0 1\n2 0 1\n1 0 2 1 0\n0 1 2 0 2 1\n```\n\n### Note\n\nFor the first test case:\n\n- $i = 1$: Dragon $1$'s friends are dragons $2, 3, 5$. $\\operatorname{mex}(a_2, a_3, a_5) = \\operatorname{mex}(2, 1, 1) = 0 = a_1$, so the condition for dragon $1$ is satisfied.\n- $i = 2$: Dragon $2$'s friends are dragons $1, 3$. $\\operatorname{mex}(a_1, a_3) = \\operatorname{mex}(0, 1) = 2 = a_2$.\n- $i = 3$: Dragon $3$'s friends are dragons $1, 2, 4$. $\\operatorname{mex}(a_1, a_2, a_4) = \\operatorname{mex}(0, 2, 0) = 1 = a_3$.\n- $i = 4$: Dragon $4$'s friends are dragons $3, 5$. $\\operatorname{mex}(a_3, a_5) = \\operatorname{mex}(1, 1) = 0 = a_4$.\n- $i = 5$: Dragon $5$'s friends are dragons $1, 4$. $\\operatorname{mex}(a_1, a_4) = \\operatorname{mex}(0, 0) = 1 = a_5$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2049c/lcbpro-2049c.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:51:12.227076+00:00",
    "trial_ended_at": "2025-09-05T23:51:46.196563+00:00",
    "agent_started_at": "2025-09-05T23:51:21.311012+00:00",
    "agent_ended_at": "2025-09-05T23:51:22.009713+00:00",
    "test_started_at": "2025-09-05T23:51:24.834459+00:00",
    "test_ended_at": "2025-09-05T23:51:29.060914+00:00"
}