{
    "id": "a4ac858e-9a95-4cc3-b32c-57744081f2c8",
    "trial_name": "lcbpro-2059c.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2059c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2059C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nNikyr has started working as a queue manager at the company \"Black Contour.\" He needs to choose the order of servicing customers. There are a total of $n$ queues, each initially containing $0$ people. In each of the next $n$ moments of time, there are two sequential events:\n\n1. New customers arrive in all queues. More formally, at the $j$-th moment of time, the number of people in the $i$-th queue increases by a positive integer $a_{i,j}$.\n2. Nikyr chooses exactly one of the $n$ queues to be served at that moment in time. The number of customers in this queue becomes $0$.\n\nLet the number of people in the $i$-th queue after all events be $x_i$. Nikyr wants MEX$^{\\dagger}$ of the collection $x_1, x_2, \\ldots, x_n$ to be as large as possible. Help him determine the maximum value he can achieve with an optimal order of servicing the queues.\n\n$^{\\dagger}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $y$ which does not occur in the collection $c$.\n\nFor example:\n\n- $\\operatorname{MEX}([2,2,1])= 0$, since $0$ does not belong to the array.\n- $\\operatorname{MEX}([3,1,0,1]) = 2$, since $0$ and $1$ belong to the array, but $2$ does not.\n- $\\operatorname{MEX}([0,3,1,2]) = 4$, since $0$, $1$, $2$, and $3$ belong to the array, but $4$ does not.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) -- the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 300$) -- the number of queues and moments of time.\n\nThe $i$-th of the next $n$ lines contains $n$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,n}$ ($1 \\le a_{i,j} \\le 10^9$) -- the number of new customers in the $i$-th queue at each moment of time.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer -- the maximum value of $\\operatorname{MEX}([x_1, x_2, \\ldots, x_n])$ that can be achieved.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 2\n\n2 1\n\n2\n\n10 10\n\n10 10\n\n3\n\n2 3 3\n\n4 4 1\n\n2 1 1\n\n4\n\n4 2 2 17\n\n1 9 3 1\n\n5 5 5 11\n\n1 2 1 1\n\n```\n\n#### Output #1\n\n```\n2\n1\n3\n3\n```\n\n### Note\n\nIn the first test case, the second queue can be served at time $1$, and the first queue at time $2$. There will be $x_1 = 0$ people left in the first queue and $x_2 = 1$ person left in the second queue. Therefore, the answer is $\\operatorname{MEX}([0, 1]) = 2$.\n\nIn the second test case, the first queue can be served both times. There will be $x_1 = 0$ people left in the first queue and $x_2 = 20$ people left in the second queue. Therefore, the answer is $\\operatorname{MEX}([0, 20]) = 1$.\n\nIn the third test case, the third queue can be served at time $1$, the second queue at time $2$, and the first queue at time $3$. There will be $x_1 = 0$ people left in the first queue, $x_2 = 1$ person left in the second queue, and $x_3 = 2$ people left in the third queue. Therefore, the answer is $\\operatorname{MEX}([0, 1, 2]) = 3$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2059c/lcbpro-2059c.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:44:54.577322+00:00",
    "trial_ended_at": "2025-09-05T23:45:28.486249+00:00",
    "agent_started_at": "2025-09-05T23:45:04.938210+00:00",
    "agent_ended_at": "2025-09-05T23:45:05.809853+00:00",
    "test_started_at": "2025-09-05T23:45:07.995949+00:00",
    "test_ended_at": "2025-09-05T23:45:15.558530+00:00"
}