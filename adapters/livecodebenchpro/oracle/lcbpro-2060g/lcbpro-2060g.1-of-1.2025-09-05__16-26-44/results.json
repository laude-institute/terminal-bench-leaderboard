{
    "id": "972ad316-3b2b-46b6-81e3-0e9e96b44712",
    "trial_name": "lcbpro-2060g.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2060g",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2060G)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nToday, Alice has given Bob arrays for him to sort in increasing order again! At this point, no one really knows how many times she has done this.\n\nBob is given two sequences $a$ and $b$, both of length $n$. All integers in the range from $1$ to $2n$ appear exactly once in either $a$ or $b$. In other words, the concatenated$^{\\text{∗}}$ sequence $a+b$ is a permutation$^{\\text{†}}$ of length $2n$.\n\nBob must sort both sequences in increasing order at the same time using Alice's swap function. Alice's swap function is implemented as follows:\n\n- Given two indices $i$ and $j$ ($i \\neq j$), it swaps $a_i$ with $b_j$, and swaps $b_i$ with $a_j$.\n\nGiven sequences $a$ and $b$, please determine if both sequences can be sorted in increasing order simultaneously after using Alice's swap function any number of times.\n\n$^{\\text{∗}}$The concatenated sequence $a+b$ denotes the sequence $[a_1, a_2, a_3, \\ldots , b_1, b_2, b_3, \\ldots]$.\n\n$^{\\text{†}}$A permutation of length $m$ contains all integers from $1$ to $m$ in some order.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 2n$).\n\nThe third line of each test case contains $b_1,b_2,\\ldots,b_n$ ($1 \\le b_i \\le 2n$).\n\nIt is guaranteed that all integers in the range $[1,2n]$ appear exactly once in either $a$ or $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nIf it is possible to sort both sequences simultaneously, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n2 1 3\n\n4 6 5\n\n3\n\n2 1 5\n\n4 3 6\n\n4\n\n1 6 4 3\n\n5 2 8 7\n\n4\n\n5 3 7 1\n\n8 6 4 2\n\n7\n\n5 1 9 12 3 13 7\n\n2 4 11 14 6 10 8\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, it can be shown that it is impossible.\n\nIn the second test case, Bob can perform one operation with indices $i=1$ and $j=2$. The arrays become $[3,4,5]$ and $[1,2,6]$ respectively. Both arrays are now sorted.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2060g/lcbpro-2060g.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:33:56.691271+00:00",
    "trial_ended_at": "2025-09-05T23:34:38.509849+00:00",
    "agent_started_at": "2025-09-05T23:34:10.931751+00:00",
    "agent_ended_at": "2025-09-05T23:34:11.435664+00:00",
    "test_started_at": "2025-09-05T23:34:14.827729+00:00",
    "test_ended_at": "2025-09-05T23:34:24.998143+00:00"
}