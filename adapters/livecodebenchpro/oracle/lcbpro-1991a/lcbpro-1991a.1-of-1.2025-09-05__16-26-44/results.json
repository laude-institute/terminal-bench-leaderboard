{
    "id": "b119ae6c-fde5-4017-8312-76a69e7043fd",
    "trial_name": "lcbpro-1991a.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-1991a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 1991A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given an array $a$ of $n$ integers, where $n$ is odd.\n\nIn one operation, you will remove two adjacent elements from the array $a$, and then concatenate the remaining parts of the array. For example, given the array $[4,7,4,2,9]$, we can obtain the arrays $[4,2,9]$ and $[4,7,9]$ by the operations $[\\underline{4,7}, 4,2,9] \\to [4,2,9]$ and $[4,7,\\underline{4,2},9] \\to [4,7,9]$ respectively. However, we cannot obtain the array $[7,2,9]$ as it requires deleting non-adjacent elements $[\\underline{4},7,\\underline{4},2,9]$.\n\nYou will repeatedly perform this operation until exactly one element remains in $a$.\n\nFind the maximum possible value of the remaining element in $a$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) -- the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 99$; $n$ is odd) -- the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 100$) -- the elements of the array $a$.\n\nNote that there is no bound on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, output a single integer -- the maximum possible value of the remaining element in $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n6\n\n3\n\n1 3 2\n\n5\n\n4 7 4 2 9\n\n7\n\n3 1 4 1 5 9 2\n\n```\n\n#### Output #1\n\n```\n6\n2\n9\n5\n```\n\n### Note\n\nIn the first test case, the array $a$ is $[6]$. Since there is only one element, no operations are needed. The maximum possible value of the remaining element is $6$.\n\nIn the second test case, the array $a$ is $[1, 3, 2]$. We can remove the first two elements $[\\underline{1, 3}, 2] \\to [2]$, or remove the last two elements $[1, \\underline{3, 2}] \\to [1]$. Therefore, the maximum possible value of the remaining element is $2$.\n\nIn the third test case, the array $a$ is $[4, 7, 4, 2, 9]$. One way to maximize the remaining element is $[4, \\underline{7, 4}, 2, 9] \\to [\\underline{4, 2}, 9] \\to [9]$. Therefore, the maximum possible value of the remaining element is $9$.\n\nIn the fourth test case, the array $a$ is $[3, 1, 4, 1, 5, 9, 2]$. It can be shown that the maximum possible value of the remaining element is $5$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-1991a/lcbpro-1991a.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:55:28.968564+00:00",
    "trial_ended_at": "2025-09-05T23:56:07.266673+00:00",
    "agent_started_at": "2025-09-05T23:55:38.932295+00:00",
    "agent_ended_at": "2025-09-05T23:55:39.497159+00:00",
    "test_started_at": "2025-09-05T23:55:43.275474+00:00",
    "test_ended_at": "2025-09-05T23:55:48.299021+00:00"
}