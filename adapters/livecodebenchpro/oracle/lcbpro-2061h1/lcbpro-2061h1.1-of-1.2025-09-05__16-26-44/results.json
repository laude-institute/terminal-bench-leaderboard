{
    "id": "2f7f8711-18aa-43ce-833a-4ac3825be428",
    "trial_name": "lcbpro-2061h1.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2061h1",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2061H1)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThis is the easy version of the problem. The difference between the versions is that in this version, you only need to determine whether a valid sequence of operations exists. You can hack only if you solved all versions of this problem.\n\nKevin has an undirected graph with $n$ vertices and $m$ edges. Initially, some vertices contain stones, which Kevin wants to move to new positions.\n\nKevin can perform the following operation:\n\n- For each stone at $u_i$, select a neighboring vertex $v_i$. Simultaneously move each stone from $u_i$ to its corresponding $v_i$.\n\nAt any time, each vertex can contain at most one stone.\n\nDetermine whether a valid sequence of operations exists that moves the stones from the initial state to the target state.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1\\leq n \\leq 2000$, $0\\leq m \\leq \\min(\\frac{n(n-1)}{2}, 10^4)$) -- the number of vertices and edges in the graph.\n\nThe second line contains a binary string $s$ consisting of '0' and '1'. The $i$-th bit of $s$ indicates the number of stones on the $i$-th vertex in the initial state.\n\nThe third line contains a binary string $t$ consisting of '0' and '1'. The $i$-th bit of $t$ indicates the number of stones on the $i$-th vertex in the target state.\n\nEach of the next $m$ lines contains two integers $u$ and $v$ ($1\\leq u, v \\leq n$) -- an undirected edge between the $u$-th vertex and the $v$-th vertex.\n\nIt is guaranteed that the graph is simple. There are no self-loops and parallel edges in the graph.\n\nIt is guaranteed that the numbers of '1' in $s$ and $t$ are the same.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, on the first line, output \"Yes\" or \"No\" to indicate whether a valid sequence of operations exists.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 1\n\n10\n\n01\n\n1 2\n\n11 11\n\n11011001010\n\n01101011100\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n6 7\n\n7 8\n\n8 9\n\n9 10\n\n10 11\n\n11 1\n\n3 2\n\n110\n\n101\n\n1 2\n\n2 3\n\n3 2\n\n111\n\n111\n\n1 2\n\n2 3\n\n```\n\n#### Output #1\n\n```\nYes\nYes\nNo\nYes\n```",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2061h1/lcbpro-2061h1.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:40:27.194699+00:00",
    "trial_ended_at": "2025-09-05T23:41:02.765542+00:00",
    "agent_started_at": "2025-09-05T23:40:38.615365+00:00",
    "agent_ended_at": "2025-09-05T23:40:39.157613+00:00",
    "test_started_at": "2025-09-05T23:40:42.879205+00:00",
    "test_ended_at": "2025-09-05T23:40:48.523326+00:00"
}