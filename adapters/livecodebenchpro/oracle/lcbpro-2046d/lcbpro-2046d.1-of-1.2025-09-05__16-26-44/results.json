{
    "id": "4fca41a7-7e05-405c-a773-7998b6e4f0e4",
    "trial_name": "lcbpro-2046d.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2046d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2046D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nIn Ancient Rome, a plan to defeat the barbarians was developed, but for its implementation, each city must be informed about it.\n\nThe northern part of the Roman Empire consists of $n$ cities connected by $m$ one-way roads. Initially, the $i$-th city has $a_i$ messengers, and each messenger can freely move between cities following the existing roads. A messenger can carry a copy of the plan with him and inform the cities he visits, and can make unlimited copies for other messengers in the city he is currently in.\n\nAt the start, you will produce some number of plans and deliver them to messengers of your choice. Your goal is to make sure that every city is visited by a messenger with a plan. Find the smallest number of the plans you need to produce originally, so that the messengers will deliver them to every city, or determine that it is impossible to do so at all.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 200$, $1 \\le m \\le 800$) -- the number of cities and roads.\n\nThe second line contains $n$ non-negative integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_{i} \\le n$) -- the initial number of messengers in each city.\n\nEach of the following $m$ lines contains two integers $u$ and $v$ ($1 \\le u,v \\le n, u \\ne v$), indicating that there is a one-way road from city $u$ to city $v$. The roads may repeat.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $200$. It is guaranteed that the sum of $m$ over all test cases does not exceed $800$.\n\n### Output\n\nOutput a single line containing a single integer -- the smallest number of messengers you need to give a copy of the plan in the beginning, or $-1$ if it is not possible to inform all cities.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n7 6\n\n2 1 0 1 2 3 4\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n3 6\n\n3 7\n\n4 4\n\n1 1 1 1\n\n1 2\n\n1 3\n\n2 4\n\n3 4\n\n```\n\n#### Output #1\n\n```\n2\n2\n```",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2046d/lcbpro-2046d.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:28:49.014766+00:00",
    "trial_ended_at": "2025-09-05T23:29:20.108849+00:00",
    "agent_started_at": "2025-09-05T23:28:57.696183+00:00",
    "agent_ended_at": "2025-09-05T23:28:58.219150+00:00",
    "test_started_at": "2025-09-05T23:29:00.356908+00:00",
    "test_ended_at": "2025-09-05T23:29:05.820929+00:00"
}