{
    "id": "eaefa18e-3ca3-418f-95f6-15f3c9830a98",
    "trial_name": "lcbpro-2051c.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2051c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2051C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nMonocarp is preparing for his first exam at the university. There are $n$ different questions which can be asked during the exam, numbered from $1$ to $n$. There are $m$ different lists of questions; each list consists of exactly $n-1$ different questions. Each list $i$ is characterized by one integer $a_i$, which is the index of the only question which is not present in the $i$-th list. For example, if $n = 4$ and $a_i = 3$, the $i$-th list contains questions $[1, 2, 4]$.\n\nDuring the exam, Monocarp will receive one of these $m$ lists of questions. Then, the professor will make Monocarp answer all questions from the list. So, Monocarp will pass only if he knows all questions from the list.\n\nMonocarp knows the answers for $k$ questions $q_1, q_2, \\dots, q_k$. For each list, determine if Monocarp will pass the exam if he receives that list.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) -- the number of test cases.\n\nEach test case consists of three lines:\n\n- the first line contains three integers $n$, $m$ and $k$ ($2 \\le n \\le 3 \\cdot 10^5$; $1 \\le m, k \\le n$);\n- the second line contains $m$ distinct integers $a_1, a_2, \\dots, a_m$ ($1 \\le a_i \\le n$; $a_i < a_{i+1}$);\n- the third line contains $k$ distinct integers $q_1, q_2, \\dots, q_k$ ($1 \\le q_i \\le n$; $q_i < q_{i+1}$).\n\nAdditional constraints on the input:\n\n- the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a string of $m$ characters. The $i$-th character should be 1 if Monocarp passes the exam if he receives the $i$-th question list, 0 if Monocarp won't pass.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 4 3\n\n1 2 3 4\n\n1 3 4\n\n5 4 3\n\n1 2 3 4\n\n1 3 4\n\n4 4 4\n\n1 2 3 4\n\n1 2 3 4\n\n2 2 1\n\n1 2\n\n2\n\n```\n\n#### Output #1\n\n```\n0100\n0000\n1111\n10\n```\n\n### Note\n\nIn the first test case, Monocarp knows the questions $[1, 3, 4]$. Let's consider all the question lists:\n\n- the first list consists of questions $[2, 3, 4]$. Monocarp doesn't know the $2$-nd question, so he won't pass;\n- the second list consists of questions $[1, 3, 4]$. Monocarp knows all these questions, so he will pass;\n- the third list consists of questions $[1, 2, 4]$. Monocarp doesn't know the $2$-nd question, so he won't pass;\n- the fourth list consists of questions $[1, 2, 3]$. Monocarp doesn't know the $2$-nd question, so he won't pass.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2051c/lcbpro-2051c.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:56:57.828503+00:00",
    "trial_ended_at": "2025-09-05T23:57:41.689639+00:00",
    "agent_started_at": "2025-09-05T23:57:12.808489+00:00",
    "agent_ended_at": "2025-09-05T23:57:13.389857+00:00",
    "test_started_at": "2025-09-05T23:57:17.343229+00:00",
    "test_ended_at": "2025-09-05T23:57:21.743128+00:00"
}