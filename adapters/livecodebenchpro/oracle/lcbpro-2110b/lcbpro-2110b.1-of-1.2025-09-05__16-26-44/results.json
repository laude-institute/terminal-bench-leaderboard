{
    "id": "181e7958-6c21-45fb-b675-bae85f506696",
    "trial_name": "lcbpro-2110b.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2110b",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2110B)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nIn 2077, robots decided to get rid of balanced bracket sequences once and for all!\n\nA bracket sequence is called balanced if it can be constructed by the following formal grammar.\n\n1. The empty sequence $\\varnothing$ is balanced.\n2. If the bracket sequence $A$ is balanced, then $\\mathtt{(}A\\mathtt{)}$ is also balanced.\n3. If the bracket sequences $A$ and $B$ are balanced, then the concatenated sequence $A B$ is also balanced.\n\nYou are the head of the department for combating balanced bracket sequences, and your main task is to determine which brackets you can destroy and which you cannot.\n\nYou are given a balanced bracket sequence represented by a string $s$, consisting of the characters ( and ). Since the robots' capabilities are not limitless, they can remove exactly one opening bracket and exactly one closing bracket from the string.\n\nYour task is to determine whether the robots can delete such two brackets so that the string $s$ is no longer a balanced bracket sequence.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nEach test case consists of a single string $s$ ($2 \\leq |s| \\leq 2 \\cdot 10^5$)Â -- a sequence of the characters ( and ).\n\nIt is guaranteed that $s$ is a balanced bracket sequence.\n\nIt is also guaranteed that the sum of $|s|$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if the robots can make the string stop being a balanced bracket sequence, and \"NO\" otherwise.\n\nYou may output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n(())\n\n(())()()\n\n()\n\n(())(())\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, it can be shown that the robots will not be able to break the correct bracket sequence.\n\nIn the second test case, one of the options for removing brackets is as follows:\n\n$\\texttt{(())}\\color{red}{\\texttt{(}}\\texttt{)(}\\color{red}{\\texttt{)}} \\rightarrow \\texttt{(()))(}$, which is not a correct bracket sequence.\n\nIn the fourth test case, one of the options for removal is as follows:\n\n$\\texttt{(}\\color{red}{\\texttt{(}}\\texttt{))((}\\color{red}{\\texttt{)}}\\texttt{)}\\rightarrow \\texttt{())(()}$, which is not a correct bracket sequence.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2110b/lcbpro-2110b.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:27:19.660954+00:00",
    "trial_ended_at": "2025-09-05T23:27:51.793435+00:00",
    "agent_started_at": "2025-09-05T23:27:30.837921+00:00",
    "agent_ended_at": "2025-09-05T23:27:31.695416+00:00",
    "test_started_at": "2025-09-05T23:27:34.108404+00:00",
    "test_ended_at": "2025-09-05T23:27:39.944221+00:00"
}