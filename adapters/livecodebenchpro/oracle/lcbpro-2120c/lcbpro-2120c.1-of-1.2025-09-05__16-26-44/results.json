{
    "id": "6f7031e8-4035-4093-ae11-a0c2d3fa064c",
    "trial_name": "lcbpro-2120c.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2120c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2120C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nHarshith attained enlightenment in Competitive Programming by training under a Divine Tree. A divine tree is a rooted tree$^{\\text{∗}}$ with $n$ nodes, labelled from $1$ to $n$. The divineness of a node $v$, denoted $d(v)$, is defined as the smallest node label on the unique simple path from the root to node $v$.\n\nAryan, being a hungry Competitive Programmer, asked Harshith to pass on the knowledge. Harshith agreed on the condition that Aryan would be given two positive integers $n$ and $m$, and he had to construct a divine tree with $n$ nodes such that the total divineness of the tree is $m$, i.e., $\\displaystyle\\sum\\limits_{i=1}^n d(i)=m$. If no such tree exists, Aryan must report that it is impossible.\n\nDesperate for knowledge, Aryan turned to you for help in completing this task. As a good friend of his, help him solve the task.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles. A rooted tree is a tree where one vertex is special and called the root.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 10^6$, $1 \\le m \\le 10^{12}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer $k$ in one line -- the root of the tree.\n\nThen $n-1$ lines follow, each containing a description of an edge of the tree -- a pair of positive integers $u_i,v_i$ ($1\\le u_i,v_i\\le n$, $u_i\\ne v_i$), denoting the $i$-th edge connects vertices $u_i$ and $v_i$.\n\nThe edges and vertices of the edges can be printed in any order. If there are multiple solutions, print any of them.\n\nIf there is no solution, print \"-1\" instead.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n1 2\n\n4 6\n\n```\n\n#### Output #1\n\n```\n-1\n3\n3 1\n1 2\n2 4\n```\n\n### Note\n\nIn the first test case, there is a single node with a value of $1$, so getting a sum of $2$ is impossible.\n\nIn the second test case, getting a sum of $6$ is possible with the given tree rooted at $3$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2120c/lcbpro-2120c.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:54:12.808180+00:00",
    "trial_ended_at": "2025-09-05T23:54:47.482615+00:00",
    "agent_started_at": "2025-09-05T23:54:21.824597+00:00",
    "agent_ended_at": "2025-09-05T23:54:22.317938+00:00",
    "test_started_at": "2025-09-05T23:54:24.343105+00:00",
    "test_ended_at": "2025-09-05T23:54:27.924349+00:00"
}