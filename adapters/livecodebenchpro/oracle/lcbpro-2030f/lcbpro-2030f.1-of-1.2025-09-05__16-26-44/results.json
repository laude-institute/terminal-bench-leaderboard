{
    "id": "0323e9fb-ce75-4af8-be03-3b5fc6e8305e",
    "trial_name": "lcbpro-2030f.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2030f",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2030F)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nSuppose you have an array $b$. Initially, you also have a set $S$ that contains all distinct elements of $b$. The array $b$ is called orangutan-approved if it can be emptied by repeatedly performing the following operation:\n\n- In one operation, select indices $l$ and $r$ ($1 \\leq l \\leq r \\leq |b|$) such that $v = b_l = b_{l+1} = \\ldots = b_r$ and $v$ is present in $S$. Remove $v$ from $S$, and simultaneously remove all $b_i$ such that $l \\leq i \\leq r$. Then, reindex the elements $b_{r+1}, b_{r+2}, \\ldots$ as $b_l, b_{l+1}, \\ldots$ accordingly.\n\nYou are given an array $a$ of length $n$ and $q$ queries.\n\nEach query consists of two indices $l$ and $r$ ($1 \\le l \\le r \\le n$), and you need to determine whether or not the subarray $a_{l}, a_{l+1}, \\ldots, a_r$ is orangutan-approved.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) -- the number of test cases.\n\nThe first line of each test case contains integers $n$ and $q$ ($1 \\leq n,q \\leq 2 \\cdot 10^5$) -- the size of $a$ and the number of queries, respectively.\n\nThe following line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$) -- the elements of the array $a$.\n\nThe following $q$ lines contain two integers $l$ and $r$ -- the endpoints of the subarray for each query ($1 \\leq l \\leq r \\leq n$).\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output \"YES\" (without quotes) if the subarray from $l$ to $r$ is orangutan-approved, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 2\n\n1 2 2 1\n\n1 4\n\n1 3\n\n5 3\n\n1 2 1 2 1\n\n2 5\n\n3 5\n\n1 3\n\n8 4\n\n1 2 3 2 1 3 2 3\n\n1 5\n\n2 8\n\n3 5\n\n6 8\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first query of the first testcase, the answer is YES.\n\n- Initially, $S=\\{1,2\\}$ and $b=[1,2,2,1]$\n- Select $l=2$ and $r=3$. Since $b_2=b_3=2$ is in $S$, we may erase $b_2$ and $b_3$ from the array, as well as erasing $2$ from $S$. The set $S$ becomes $\\{1\\}$ and the array becomes $[1,1]$.\n- Select $l=1$ and $r=2$. Since $b_1=b_2=1$ is in $S$, we may erase $b_1$ and $b_2$ from the array, as well as erasing $1$ from $S$. The set $S$ becomes $\\{\\}$ and the array becomes $[]$.\n- Since the array is now empty, we can say the original array is orangutan-approved.\n\nIn the first query of the second testcase, the answer is NO, because it can be shown that the subarray $[2,1,2,1]$ cannot become empty through any sequence of valid operations.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2030f/lcbpro-2030f.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:59:36.235466+00:00",
    "trial_ended_at": "2025-09-06T00:00:08.316540+00:00",
    "agent_started_at": "2025-09-05T23:59:44.724242+00:00",
    "agent_ended_at": "2025-09-05T23:59:45.858519+00:00",
    "test_started_at": "2025-09-05T23:59:48.837123+00:00",
    "test_ended_at": "2025-09-05T23:59:53.473840+00:00"
}