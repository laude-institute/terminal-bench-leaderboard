{
    "id": "2daeed73-0f19-4465-847a-3ddbe1b131dc",
    "trial_name": "lcbpro-2053f.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2053f",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2053F)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\n3, 2, 1, ... We are the -- RiOI Team!\n\n-- Felix & All, [Special Thanks 3](https://www.luogu.com.cn/problem/T351681)\n\n- Peter: Good news: My problem T311013 is approved!\n- $\\delta$: I'm glad my computer had gone out of battery so that I wouldn't have participated in wyrqwq's round and gained a negative delta.\n- Felix: \\[thumbs\\_up\\] The problem statement concerning a removed song!\n- Aquawave: Do I mourn my Chemistry?\n- E.Space: ahh?\n- Trine: Bread.\n- Iris: So why am I always testing problems?\n\nTime will pass, and we might meet again. Looking back at the past, everybody has lived the life they wanted.\n\nAquawave has a matrix $A$ of size $n\\times m$, whose elements can only be integers in the range $[1, k]$, inclusive. In the matrix, some cells are already filled with an integer, while the rest are currently not filled, denoted by $-1$.\n\nYou are going to fill in all the unfilled places in $A$. After that, let $c_{u,i}$ be the number of occurrences of element $u$ in the $i$-th row. Aquawave defines the beauty of the matrix as\n\n\n\n$$\\sum_{u=1}^k \\sum_{i=1}^{n-1} c_{u,i} \\cdot c_{u,i+1}.$$\n\nYou have to find the maximum possible beauty of $A$ after filling in the blanks optimally.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 2\\cdot 10^4$) -- the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($2 \\leq n \\leq 2\\cdot 10^5$, $2 \\leq m \\leq 2\\cdot 10^5$, $n \\cdot m \\leq 6\\cdot 10^5$, $1 \\leq k \\leq n\\cdot m$) -- the number of rows and columns of the matrix $A$, and the range of the integers in the matrix, respectively.\n\nThen $n$ lines follow, the $i$-th line containing $m$ integers $A_{i,1},A_{i,2},\\ldots,A_{i,m}$ ($1 \\leq A_{i,j} \\leq k$ or $A_{i,j} = -1$) -- the elements in $A$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all test cases does not exceed $6\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer -- the maximum possible beauty.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n3 3 3\n\n1 2 2\n\n3 1 3\n\n3 2 1\n\n2 3 3\n\n-1 3 3\n\n2 2 -1\n\n3 3 6\n\n-1 -1 1\n\n1 2 -1\n\n-1 -1 4\n\n3 4 5\n\n1 3 2 3\n\n-1 -1 2 -1\n\n3 1 5 1\n\n5 3 8\n\n5 -1 2\n\n1 8 -1\n\n-1 5 6\n\n7 7 -1\n\n4 4 4\n\n6 6 5\n\n-1 -1 5 -1 -1 -1\n\n-1 -1 -1 -1 2 -1\n\n-1 1 3 3 -1 -1\n\n-1 1 -1 -1 -1 4\n\n4 2 -1 -1 -1 4\n\n-1 -1 1 2 -1 -1\n\n6 6 4\n\n-1 -1 -1 -1 1 -1\n\n3 -1 2 2 4 -1\n\n3 1 2 2 -1 -1\n\n3 3 3 3 -1 2\n\n-1 3 3 -1 1 3\n\n3 -1 2 2 3 -1\n\n5 5 3\n\n1 1 3 -1 1\n\n2 2 -1 -1 3\n\n-1 -1 -1 2 -1\n\n3 -1 -1 -1 2\n\n-1 1 2 3 -1\n\n6 2 7\n\n-1 7\n\n-1 6\n\n7 -1\n\n-1 -1\n\n-1 -1\n\n2 2\n\n```\n\n#### Output #1\n\n```\n4\n4\n10\n10\n8\n102\n93\n58\n13\n```\n\n### Note\n\nIn the first test case, the matrix $A$ is already determined. Its beauty is\n\n\n\n$$\\sum_{u=1}^k \\sum_{i=1}^{n-1} c_{u,i} \\cdot c_{u,i+1} = c_{1,1}\\cdot c_{1,2} + c_{1,2}\\cdot c_{1,3} + c_{2,1}\\cdot c_{2,2} + c_{2,2}\\cdot c_{2,3} + c_{3,1}\\cdot c_{3,2} + c_{3,2}\\cdot c_{3,3} = 1\\cdot 1 + 1\\cdot 1 + 2\\cdot 0 + 0\\cdot 1 + 0\\cdot 2 + 2\\cdot 1 = 4.$$\n\nIn the second test case, one can fill the matrix as follows:\n\n\n\n$$ \\begin{bmatrix} 2 &3 &3 \\\\ 2 &2 &3 \\end{bmatrix}, $$\n\nand get the value $4$. It can be proven this is the maximum possible answer one can get.\n\nIn the third test case, one of the possible optimal configurations is:\n\n\n\n$$ \\begin{bmatrix} 1 &1 &1 \\\\ 1 &2 &1 \\\\ 1 &1 &4 \\end{bmatrix}. $$\n\nIn the fourth test case, one of the possible optimal configurations is:\n\n\n\n$$ \\begin{bmatrix} 1 &3 &2 &3 \\\\ 1 &3 &2 &1 \\\\ 3 &1 &5 &1 \\end{bmatrix}. $$\n\nIn the fifth test case, one of the possible optimal configurations is:\n\n\n\n$$ \\begin{bmatrix} 5 &5 &2 \\\\ 1 &8 &5 \\\\ 7 &5 &6 \\\\ 7 &7 &4 \\\\ 4 &4 &4 \\end{bmatrix}. $$",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2053f/lcbpro-2053f.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:37:31.867335+00:00",
    "trial_ended_at": "2025-09-05T23:38:18.738270+00:00",
    "agent_started_at": "2025-09-05T23:37:47.712242+00:00",
    "agent_ended_at": "2025-09-05T23:37:48.274415+00:00",
    "test_started_at": "2025-09-05T23:37:51.875297+00:00",
    "test_ended_at": "2025-09-05T23:38:04.593107+00:00"
}