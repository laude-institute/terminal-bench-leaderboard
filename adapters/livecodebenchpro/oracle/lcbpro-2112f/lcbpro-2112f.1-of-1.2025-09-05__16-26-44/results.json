{
    "id": "1e2abf61-f44b-41d8-94a1-eeea0356dfcd",
    "trial_name": "lcbpro-2112f.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2112f",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2112F)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThere are $n$ variables; let's denote the value of the $i$-th variable as $a_i$.\n\nThere are also $m$ operations which will be applied to these variables; the $i$-th operation is described by three integers $x_i, y_i, z_i$. When the $i$-th operation is applied, the variable $x_i$ gets assigned the following value: $\\min(a_{x_i}, a_{y_i} + z_i)$.\n\nEvery operation will be applied exactly once, but their order is not fixed; they can be applied in any order.\n\nLet's call a sequence of initial variable values $a_1, a_2, \\dots, a_n$ stable, if no matter in which order we apply operations, the resulting values will be the same. If the resulting value of the $i$-th variable depends on the order of operations, then the sequence of initial variable values is called $i$-unstable.\n\nYou have to process $q$ queries. In each query, you will be given initial values $a_1, a_2, \\dots, a_n$ and an integer $k$; before applying the operations, you can at most $k$ times choose a variable and decrease it by $1$. For every variable $i$, you have to independently determine if it is possible to transform the given values into an $i$-unstable sequence.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 500$; $1 \\le m \\le 4 \\cdot 10^5$) -- the number of variables and operations, respectively.\n\nThen, $m$ lines follow. The $i$-th of them contains three integers $x_i, y_i, z_i$ ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$; $0 \\le z_i \\le 10^5$) -- the description of the $i$-th operation.\n\nThe next line contains one integer $q$ ($1 \\le q \\le 1000$) -- the number of queries.\n\nEach query consists of two lines:\n\n- the first line contains one integer $k$ ($0 \\le k \\le 10^9$) -- the maximum number of times you can choose a variable and decrease it by $1$;\n- the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$) -- the initial values of the variables.\n\n### Output\n\nFor each query, print a string of $n$ zeroes and/or ones. The $i$-th character should be 1 if it is possible to obtain an $i$-unstable sequence, or 0 otherwise.\n\n### Examples\n\n#### Input #1\n\n```\n\n4 5\n\n2 1 10\n\n3 2 5\n\n1 4 8\n\n1 2 6\n\n3 1 17\n\n3\n\n0\n\n20 0 15 5\n\n10\n\n20 0 15 5\n\n30\n\n20 0 15 5\n\n```\n\n#### Output #1\n\n```\n0000\n0000\n0110\n```\n\n#### Input #2\n\n```\n\n3 5\n\n1 2 100\n\n1 2 10\n\n1 3 5\n\n1 2 100\n\n3 2 5\n\n1\n\n1000000000\n\n0 0 0\n\n```\n\n#### Output #2\n\n```\n000\n```\n\n#### Input #3\n\n```\n\n3 4\n\n2 3 5\n\n1 2 0\n\n3 1 4\n\n1 3 4\n\n10\n\n5\n\n7 5 3\n\n2\n\n5 7 0\n\n1\n\n1 1 1\n\n5\n\n3 0 1\n\n0\n\n5 3 5\n\n5\n\n6 0 4\n\n5\n\n1 5 6\n\n1\n\n7 7 2\n\n1\n\n1 6 6\n\n4\n\n7 7 2\n\n```\n\n#### Output #3\n\n```\n000\n000\n000\n001\n000\n001\n001\n000\n000\n000\n```\n\n### Note\n\nConsider the first example. If the initial variable values are $[20, 0, 15, 5]$, the resulting values will be $[6, 0, 5, 5]$ with any order of operations. Decreasing the variables $10$ times is not enough. However, if we can apply no more than $30$ changes, we can decrease the $1$-st variable by $2$, and the $4$-th variable by $25$, we get initial values equal to $[18, 0, 15, -20]$, and this sequence is $2$-unstable and $3$-unstable:\n\n- if you apply the operations in the order they are given, you will get $[-12, 0, 5, -20]$;\n- however, if you apply the operations in order $[3, 2, 4, 1, 5]$, you will get $[-12, -2, 5, -20]$;\n- and if you apply the operations in order $[3, 4, 5, 1, 2]$, you will get $[-12, -2, 3, -20]$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2112f/lcbpro-2112f.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:58:19.190864+00:00",
    "trial_ended_at": "2025-09-05T23:58:57.397638+00:00",
    "agent_started_at": "2025-09-05T23:58:29.923148+00:00",
    "agent_ended_at": "2025-09-05T23:58:30.470086+00:00",
    "test_started_at": "2025-09-05T23:58:34.369629+00:00",
    "test_ended_at": "2025-09-05T23:58:38.592714+00:00"
}