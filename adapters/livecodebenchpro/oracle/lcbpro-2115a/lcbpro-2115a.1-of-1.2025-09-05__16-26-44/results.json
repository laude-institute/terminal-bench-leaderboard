{
    "id": "3d8f6e0d-f059-4d48-af1b-9e7b071c957b",
    "trial_name": "lcbpro-2115a.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2115a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2115A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nGellyfish hates math problems, but she has to finish her math homework:\n\nGellyfish is given an array of $n$ positive integers $a_1, a_2, \\ldots, a_n$.\n\nShe needs to do the following two-step operation until all elements of $a$ are equal:\n\n1. Select two indexes $i$, $j$ satisfying $1 \\leq i, j \\leq n$ and $i \\neq j$.\n2. Replace $a_i$ with $\\gcd(a_i, a_j)$.\n\nNow, Gellyfish asks you for the minimum number of operations to achieve her goal.\n\nIt can be proven that Gellyfish can always achieve her goal.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 5000$) -- the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\leq a_i \\leq 5000$) -- the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer -- the minimum number of operations to achieve her goal.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n12 20 30\n\n6\n\n1 9 1 9 8 1\n\n3\n\n6 14 15\n\n```\n\n#### Output #1\n\n```\n4\n3\n3\n```\n\n### Note\n\nIn the first test case, the following is a way that minimizes the number of operations:\n\n1. Choose $i = 3$ and $j=2$ and replace $a_3$ with $\\gcd(a_3,a_2) = \\gcd(30, 20) = 10$, then $a$ becomes $[12, 20, 10]$.\n2. Choose $i=1$ and $j=3$ and replace $a_1$ with $\\gcd(a_1,a_3) = \\gcd(12, 10) = 2$, then $a$ becomes $[2, 20, 10]$.\n3. Choose $i=2$ and $j=1$ and replace $a_2$ with $\\gcd(a_2,a_1) = \\gcd(20, 2) = 2$, then $a$ becomes $[2, 2, 10]$.\n4. Choose $i=3$ and $j=1$ and replace $a_3$ with $\\gcd(a_3,a_1) = \\gcd(10, 2) = 2$, then $a$ becomes $[2, 2, 2]$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2115a/lcbpro-2115a.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:43:42.516541+00:00",
    "trial_ended_at": "2025-09-05T23:44:21.662593+00:00",
    "agent_started_at": "2025-09-05T23:43:54.638058+00:00",
    "agent_ended_at": "2025-09-05T23:43:55.197712+00:00",
    "test_started_at": "2025-09-05T23:43:58.307505+00:00",
    "test_ended_at": "2025-09-05T23:44:04.960393+00:00"
}