{
    "id": "f478ec5d-bf73-43ab-9c97-0e5d8907d6e3",
    "trial_name": "lcbpro-2022a.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2022a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2022A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYa vamos llegando a Péeeenjamoo ♫♫♫\n\nThere are $n$ families travelling to Pénjamo to witness Mexico's largest-ever \"walking a chicken on a leash\" marathon. The $i$-th family has $a_i$ family members. All families will travel using a single bus consisting of $r$ rows with $2$ seats each.\n\nA person is considered happy if:\n\n- Another family member is seated in the same row as them, or\n- They are sitting alone in their row (with an empty seat next to them).\n\nDetermine the maximum number of happy people in an optimal seating arrangement. Note that everyone must be seated in the bus.\n\nIt is guaranteed that all family members will fit on the bus. Formally, it is guaranteed that $\\displaystyle\\sum_{i=1}^{n}a_i \\le 2r$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $r$ ($1 \\le n \\le 100$; $1 \\le r \\le 500$) -- the number of families and the number of rows in the bus.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10$) -- the number of family members in each family.\n\n### Output\n\nFor each test case, output the maximum number of happy people in an optimal seating arrangement.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\n2 3 1\n\n3 3\n\n2 2 2\n\n4 5\n\n1 1 2 2\n\n4 5\n\n3 1 1 3\n\n```\n\n#### Output #1\n\n```\n4\n6\n6\n6\n```\n\n### Note\n\nIn the first test case, the two members of the first family can sit together in the first row, while the two members of the second family can sit together in the second row. The remaining member of the second family can sit in the third row along with a member of the third family. This seating arrangement is shown below, where the $4$ happy people are colored green.\n\n$\\color{green}{1}\n\n$$\\color{green}{1}$$\n\ncolor{green}{2}\n\n$$\\color{green}{2}$$\n\n2$$3$\n\nIn the second test case, a possible seating arrangement with $6$ happy people is shown below.\n\n$\\color{green}{3}\n\n$$\\color{green}{3}$$\n\ncolor{green}{1}\n\n$$\\color{green}{1}$$\n\ncolor{green}{2}$$\\color{green}{2}$\n\nIn the third test case, a possible seating arrangement with $6$ happy people is shown below.\n\n$\\color{green}{4}\n\n$$\\color{green}{4}$$\n\ncolor{green}{}\n\n$$\\color{green}{2}$$\n\ncolor{green}{3}\n\n$$\\color{green}{3}$$\n\ncolor{green}{1}\n\n$$\\color{green}{}$$\n\ncolor{green}{}$$\\color{green}{}$",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2022a/lcbpro-2022a.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:37:39.146333+00:00",
    "trial_ended_at": "2025-09-05T23:38:12.506984+00:00",
    "agent_started_at": "2025-09-05T23:37:49.701297+00:00",
    "agent_ended_at": "2025-09-05T23:37:50.799491+00:00",
    "test_started_at": "2025-09-05T23:37:53.690097+00:00",
    "test_ended_at": "2025-09-05T23:37:59.578197+00:00"
}