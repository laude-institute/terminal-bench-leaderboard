{
    "id": "ad81ed40-30ba-45cd-9f58-bd466a826792",
    "trial_name": "lcbpro-2053h.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2053h",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2053H)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nI shall be looking for you who would be out of Existence.\n\n-- HyuN, [Disorder](https://soundcloud.com/k-sounds-studio/g2r2018-hyun-disorder-feat-yuri)\n\nThere are always many repetitive tasks in life. Iris always dislikes them, so she refuses to repeat them. However, time cannot be turned back; we only have to move forward.\n\nFormally, Iris has an integer sequence $a_1, a_2, \\ldots, a_n$, where each number in the sequence is between $1$ and $w$, inclusive. It is guaranteed that $w \\geq 2$.\n\nIris defines an operation as selecting two numbers $a_i, a_{i+1}$ satisfying $a_i = a_{i+1}$, and then changing them to two arbitrary integers within the range $[1, w]$. Iris does not like equality, so she must guarantee that $a_i \\neq a_{i+1}$ after the operation. Two identical pairs $a_i, a_{i+1}$ can be selected multiple times.\n\nIris wants to know the maximum possible sum of all elements of $a$ after several (possible, zero) operations, as well as the minimum number of operations required to achieve this maximum value.\n\n### Input\n\nEach test contains multiple test cases. The first line contains an integer $t$ ($1 \\leq t \\leq 10^5$) -- the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $w$ ($1 \\leq n \\leq 2\\cdot 10^5$, $2 \\leq w \\leq 10^8$) -- the length of the array, and the maximum allowed value of the elements.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq w$) -- the elements in the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output two integers -- the maximum possible sum of all elements of $a$ and the minimum number of operations required, respectively.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 8\n\n1 2 3 4 5\n\n7 5\n\n3 1 2 3 4 1 1\n\n```\n\n#### Output #1\n\n```\n15 0\n34 6\n```\n\n### Note\n\nIn the first test case, no operation can be performed so the answers are $\\sum a_i = 15$ and $0$, respectively.\n\nIn the second test case, the operations can be performed as follows:\n\n\n\n$$[3, 1, 2, 3, 4, \\underline{1, 1}] \\rightarrow [3, 1, 2, 3, \\underline{4, 4}, 5] \\rightarrow [3, 1, 2, \\underline{3, 3}, 5, 5] \\rightarrow [3, 1, \\underline{2, 2}, 5, 5, 5] \\rightarrow [3, \\underline{1, 1}, 5, 5, 5, 5] \\rightarrow [\\underline{3, 3}, 5, 5, 5, 5, 5] \\rightarrow [4, 5, 5, 5, 5, 5, 5]$$\n\nIt can be shown this is optimal, so we should output $\\sum a_i = 34$ and the number of operations, $6$, respectively.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2053h/lcbpro-2053h.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:46:44.153521+00:00",
    "trial_ended_at": "2025-09-05T23:47:37.081022+00:00",
    "agent_started_at": "2025-09-05T23:46:58.096105+00:00",
    "agent_ended_at": "2025-09-05T23:46:58.862068+00:00",
    "test_started_at": "2025-09-05T23:47:02.193242+00:00",
    "test_ended_at": "2025-09-05T23:47:21.105164+00:00"
}