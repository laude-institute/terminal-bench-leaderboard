{
    "id": "28a9dc9f-2e05-44f2-a687-fedf0e9ff266",
    "trial_name": "lcbpro-2096h.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2096h",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2096H)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are the proud... never mind, just solve this problem.\n\nThere are $n$ intervals $[l_1, r_1], [l_2, r_2], \\ldots [l_n, r_n]$. For each $x$ from $0$ to $2^m - 1$, find the number, modulo $998\\,244\\,353$, of sequences $a_1, a_2, \\ldots a_n$ such that:\n\n- $l_i \\leq a_i \\leq r_i$ for all $i$ from $1$ to $n$;\n- $a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = x$, where $\\oplus$ denotes the [bitwise XOR operator](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq m \\leq 18$).\n\nThe $i$-th of the next $n$ lines contains two integers $l_i$ and $r_i$ ($0 \\leq l_i \\leq r_i < 2^m$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$, and the sum of $2^m$ over all test cases does not exceed $2^{18}$.\n\n### Output\n\nFor each $x$ from $0$ to $2^m - 1$, let:\n\n- $f_x$ be the number of valid sequences, modulo $998\\,244\\,353$;\n- $g_x = f_x \\cdot 2^x \\mod 998\\,244\\,353$.\n\nHere, $f_x$ and $g_x$ are both integers in the interval $[0, 998\\,244\\,352]$.\n\nLet $h = g_0 \\oplus g_1 \\oplus \\ldots \\oplus g_{2^m - 1}$.\n\nOutput a single integerÂ -- the value of $h$ itself. Do not perform a modulo operation.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n0 2\n\n1 3\n\n5 3\n\n3 7\n\n1 3\n\n0 2\n\n1 5\n\n3 6\n\n10 14\n\n314 1592\n\n653 5897\n\n932 3846\n\n264 3383\n\n279 5028\n\n841 9716\n\n939 9375\n\n105 8209\n\n749 4459\n\n230 7816\n\n1 5\n\n0 29\n\n```\n\n#### Output #1\n\n```\n22\n9812\n75032210\n1073741823\n```\n\n### Note\n\nFor the first test case, the values of $f_x$ are as follows:\n\n- $f_0 = 2$, because there are $2$ valid sequences: $[1, 1]$ and $[2, 2]$;\n- $f_1 = 2$, because there are $2$ valid sequences: $[0, 1]$ and $[2, 3]$;\n- $f_2 = 2$, because there are $2$ valid sequences: $[0, 2]$ and $[1, 3]$;\n- $f_3 = 3$, because there are $3$ valid sequences: $[0, 3]$, $[1, 2]$, and $[2, 1]$.\n\nThe values of $g_x$ are as follows:\n\n- $g_0 = f_0 \\cdot 2^0 = 2 \\cdot 2^0 = 2$;\n- $g_1 = f_1 \\cdot 2^1 = 2 \\cdot 2^1 = 4$;\n- $g_2 = f_2 \\cdot 2^2 = 2 \\cdot 2^2 = 8$;\n- $g_3 = f_3 \\cdot 2^3 = 3 \\cdot 2^3 = 24$.\n\nThus, the value to output is $2 \\oplus 4 \\oplus 8 \\oplus 24 = 22$.\n\nFor the second test case, the values of $f_x$ are as follows:\n\n- $f_{0} = 120$;\n- $f_{1} = 120$;\n- $f_{2} = 119$;\n- $f_{3} = 118$;\n- $f_{4} = 105$;\n- $f_{5} = 105$;\n- $f_{6} = 106$;\n- $f_{7} = 107$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2096h/lcbpro-2096h.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:57:57.680391+00:00",
    "trial_ended_at": "2025-09-05T23:58:36.486650+00:00",
    "agent_started_at": "2025-09-05T23:58:09.113382+00:00",
    "agent_ended_at": "2025-09-05T23:58:10.116118+00:00",
    "test_started_at": "2025-09-05T23:58:12.868519+00:00",
    "test_ended_at": "2025-09-05T23:58:17.652244+00:00"
}