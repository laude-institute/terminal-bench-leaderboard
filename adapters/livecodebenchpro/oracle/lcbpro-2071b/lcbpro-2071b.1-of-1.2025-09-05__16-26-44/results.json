{
    "id": "cb73165c-76e5-497c-ad17-3e137602f169",
    "trial_name": "lcbpro-2071b.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2071b",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2071B)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nA permutation $p$ of length $n$$^{\\\\text{∗}}$ is perfect if, for each index $i$ ($1 \\le i \\le n$), it satisfies the following:\n\n- The sum of the first $i$ elements $p_1 + p_2 + \\ldots + p_i$ is not a perfect square$^{\\text{†}}$.\n\nYou would like things to be perfect. Given a positive integer $n$, find a perfect permutation of length $n$, or print $-1$ if none exists.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$A perfect square is an integer that is the square of an integer, e.g., $9=3^2$ is a perfect square, but $8$ and $14$ are not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case:\n\n- If no solution exists, print a single integer $-1$.\n- Otherwise, print $n$ integers $p_1,p_2,\\ldots,p_n$ -- the perfect permutation you find.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n3\n1\n4\n5\n```\n\n#### Output #1\n\n```\n-1\n2 4 1 3\n5 1 4 3 2```\n\n### Note\n\nIn the first test case, there is only one permutation with length $n = 1$ that is $p = [1]$, which is not perfect:\n\n- $p_1 = 1 = x^2$ for $x = 1$.\n\nIn the second test case, one possible perfect permutation with length $n = 4$ is $p = [2, 4, 1, 3]$:\n\n- $p_1 = 2 \\neq x^2$;\n- $p_1 + p_2 = 2 + 4 = 6 \\neq x^2$;\n- $p_1 + p_2 + p_3 = 2 + 4 + 1 = 7 \\neq x^2$;\n- $p_1 + p_2 + p_3 + p_4 = 2 + 4 + 1 + 3 = 10 \\neq x^2$.\n\nIn the third test case, one possible perfect permutation with length $n = 5$ is $p = [5, 1, 4, 3, 2]$:\n\n- $p_1 = 5 \\neq x^2$;\n- $p_1 + p_2 = 5 + 1 = 6 \\neq x^2$;\n- $p_1 + p_2 + p_3 = 5 + 1 + 4 = 10 \\neq x^2$;\n- $p_1 + p_2 + p_3 + p_4 = 5 + 1 + 4 + 3 = 13 \\neq x^2$;\n- $p_1 + p_2 + p_3 + p_4 + p_5 = 5 + 1 + 4 + 3 + 2 = 15 \\neq x^2$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2071b/lcbpro-2071b.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:30:02.020863+00:00",
    "trial_ended_at": "2025-09-05T23:30:48.722364+00:00",
    "agent_started_at": "2025-09-05T23:30:12.591868+00:00",
    "agent_ended_at": "2025-09-05T23:30:13.111437+00:00",
    "test_started_at": "2025-09-05T23:30:15.589339+00:00",
    "test_ended_at": "2025-09-05T23:30:34.998420+00:00"
}