{
    "id": "d959a624-55bf-42a6-8cb7-59dc2973c8a2",
    "trial_name": "lcbpro-2108c.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2108c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2108C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nNeo wants to escape from the Matrix. In front of him are $n$ buttons arranged in a row. Each button has a weight given by an integer: $a_1, a_2, \\ldots, a_n$.\n\nNeo is immobilized, but he can create and move clones. This means he can perform an unlimited number of actions of the following two types in any order:\n\n1. Create a clone in front of a specific button.\n2. Move an existing clone one position to the left or right.\n\nAs soon as a clone is in front of another button that has not yet been pressed--regardless of whether he was created or moved -- he immediately presses it. If the button has already been pressed, a clone does nothing -- buttons can only be pressed once.\n\nFor Neo to escape, he needs to press all the buttons in such an order that the sequence of their weights is non-increasing -- that is, if $b_1, b_2, \\ldots, b_n$ are the weights of the buttons in the order they are pressed, then it must hold that $b_1 \\geq b_2 \\geq \\cdots \\geq b_n$.\n\nYour task is to determine the minimum number of clones that Neo needs to create in order to press all the buttons in a valid order.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) -- the number of buttons.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) -- the weights of the buttons.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer -- the minimum number of clones that need to be created to press all the buttons in a valid order.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n4 3 2 1 5\n\n3\n\n1 1 1\n\n6\n\n7 8 1 5 9 2\n\n10\n\n1 7 9 7 1 10 2 10 10 7\n\n```\n\n#### Output #1\n\n```\n2\n1\n2\n3\n```\n\n### Note\n\nIn the first test case, Neo can act as follows:\n\n1. Create a clone in front of the fifth button (with weight $5$).\n2. Create a clone in front of the first button (with weight $4$).\n3. Move the second clone from the first button to the second (with weight $3$).\n4. Move the second clone from the second button to the third (with weight $2$).\n5. Move the first clone from the fifth button to the fourth (with weight $1$).\n\nThus, the sequence of button presses will be $5 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 1$, which meets the requirement. It can be shown that the number of clones created is the smallest possible.\n\nIn the second test case, Neo can act as follows:\n\n1. Create a clone in front of the second button (with weight $1$).\n2. Move the clone from the second button to the third (with weight $1$).\n3. Move the clone from the third button to the second (already pressed).\n4. Move the clone from the second button to the first (with weight $1$).\n\nThus, the sequence of button presses will be $1 \\rightarrow 1 \\rightarrow 1$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2108c/lcbpro-2108c.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:49:58.479810+00:00",
    "trial_ended_at": "2025-09-05T23:50:31.818961+00:00",
    "agent_started_at": "2025-09-05T23:50:09.022807+00:00",
    "agent_ended_at": "2025-09-05T23:50:09.684734+00:00",
    "test_started_at": "2025-09-05T23:50:12.853141+00:00",
    "test_ended_at": "2025-09-05T23:50:17.459900+00:00"
}