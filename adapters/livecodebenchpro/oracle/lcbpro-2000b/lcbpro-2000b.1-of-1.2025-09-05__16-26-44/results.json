{
    "id": "954204f9-8efc-4280-992a-cc573903e57b",
    "trial_name": "lcbpro-2000b.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2000b",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2000B)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nIn Berland, a bus consists of a row of $n$ seats numbered from $1$ to $n$. Passengers are advised to always board the bus following these rules:\n\n- If there are no occupied seats in the bus, a passenger can sit in any free seat;\n- Otherwise, a passenger should sit in any free seat that has at least one occupied neighboring seat. In other words, a passenger can sit in a seat with index $i$ ($1 \\le i \\le n$) only if at least one of the seats with indices $i-1$ or $i+1$ is occupied.\n\nToday, $n$ passengers boarded the bus. The array $a$ chronologically records the seat numbers they occupied. That is, $a_1$ contains the seat number where the first passenger sat, $a_2$ -- the seat number where the second passenger sat, and so on.\n\nYou know the contents of the array $a$. Determine whether all passengers followed the recommendations.\n\nFor example, if $n = 5$, and $a$ = \\[$5, 4, 2, 1, 3$\\], then the recommendations were not followed, as the $3$-rd passenger sat in seat number $2$, while the neighboring seats with numbers $1$ and $3$ were free.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\le t \\le 10^4$) -- the number of test cases.\n\nThe following describes the input test cases.\n\nThe first line of each test case contains exactly one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) -- the number of seats in the bus and the number of passengers who boarded the bus.\n\nThe second line of each test case contains $n$ distinct integers $a_i$ ($1 \\le a_i \\le n$) -- the seats that the passengers occupied in chronological order.\n\nIt is guaranteed that the sum of $n$ values across all test cases does not exceed $2 \\cdot 10^5$, and that no passenger sits in an already occupied seat.\n\n### Output\n\nFor each test case, output on a separate line:\n\n- \"YES\", if all passengers followed the recommendations;\n- \"NO\" otherwise.\n\nYou may output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n5 4 2 1 3\n\n3\n\n2 3 1\n\n4\n\n2 3 1 4\n\n5\n\n1 2 3 5 4\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO```\n\n### Note\n\nThe first test case is explained in the problem statement.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2000b/lcbpro-2000b.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:30:21.210005+00:00",
    "trial_ended_at": "2025-09-05T23:30:59.027532+00:00",
    "agent_started_at": "2025-09-05T23:30:32.616264+00:00",
    "agent_ended_at": "2025-09-05T23:30:33.025902+00:00",
    "test_started_at": "2025-09-05T23:30:35.910892+00:00",
    "test_ended_at": "2025-09-05T23:30:43.921336+00:00"
}