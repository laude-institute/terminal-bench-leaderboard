{
    "id": "18815045-485c-4483-9ebc-f90272af42e9",
    "trial_name": "lcbpro-1996c.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-1996c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 1996C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given two strings $a$ and $b$ of length $n$. Then, you are (forced against your will) to answer $q$ queries.\n\nFor each query, you are given a range bounded by $l$ and $r$. In one operation, you can choose an integer $i$ ($l \\leq i \\leq r$) and set $a_i = x$ where $x$ is any character you desire. Output the minimum number of operations you must perform such that $\\texttt{sorted(a[l..r])} = \\texttt{sorted(b[l..r])}$. The operations you perform on one query does not affect other queries.\n\nFor an arbitrary string $c$, $\\texttt{sorted(c[l..r])}$ denotes the substring consisting of characters $c_l, c_{l+1}, ... , c_r$ sorted in lexicographical order.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 1000$) -- the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n, q \\leq 2 \\cdot 10^5$) -- the length of both strings and the number of queries.\n\nThe following line contains $a$ of length $n$. It is guaranteed $a$ only contains lowercase latin letters.\n\nThe following line contains $b$ of length $n$. It is guaranteed $b$ only contains lowercase latin letters.\n\nThe following $q$ lines contain two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq n$) -- the range of the query.\n\nIt is guaranteed the sum of $n$ and $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output an integer, the minimum number of operations you need to perform in a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 3\n\nabcde\n\nedcba\n\n1 5\n\n1 4\n\n3 3\n\n4 2\n\nzzde\n\nazbe\n\n1 3\n\n1 4\n\n6 3\n\nuwuwuw\n\nwuwuwu\n\n2 4\n\n1 3\n\n1 6\n\n```\n\n#### Output #1\n\n```\n0\n1\n0\n2\n2\n1\n1\n0\n```\n\n### Note\n\nFor the first query, $\\texttt{sorted(a[1..5])} =$ abcde and $\\texttt{sorted(b[1..5])} =$ abcde, so no operations are necessary.\n\nFor the second query, you need to set $a_1 = $ e. Then, $\\texttt{sorted(a[1..4])} = \\texttt{sorted(b[1..4])} = $ bcde.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-1996c/lcbpro-1996c.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:54:30.276415+00:00",
    "trial_ended_at": "2025-09-05T23:55:06.872343+00:00",
    "agent_started_at": "2025-09-05T23:54:39.465002+00:00",
    "agent_ended_at": "2025-09-05T23:54:40.027642+00:00",
    "test_started_at": "2025-09-05T23:54:43.839594+00:00",
    "test_ended_at": "2025-09-05T23:54:48.112211+00:00"
}