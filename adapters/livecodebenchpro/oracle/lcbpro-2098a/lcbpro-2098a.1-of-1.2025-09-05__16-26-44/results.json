{
    "id": "93de9218-5319-4ad2-934d-92134d9ecdb9",
    "trial_name": "lcbpro-2098a.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2098a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2098A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nWe call a phone number a beautiful if it is a string of $10$ digits, where the $i$-th digit from the left is at least $10 - i$. That is, the first digit must be at least $9$, the second at least $8$, $\\ldots$, with the last digit being at least $0$.\n\nFor example, 9988776655 is a beautiful phone number, while 9099999999 is not, since the second digit, which is $0$, is less than $8$.\n\nVadim has a beautiful phone number. He wants to rearrange its digits in such a way that the result is the smallest possible beautiful phone number. Help Vadim solve this problem.\n\nPlease note that the phone numbers are compared as integers.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains a single string $s$ of length $10$, consisting of digits. It is guaranteed that $s$ is a beautiful phone number.\n\n### Output\n\nFor each test case, output a single string of length $10$ -- the smallest possible beautiful phone number that Vadim can obtain.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n9999999999\n\n9988776655\n\n9988776650\n\n9899999999\n\n```\n\n#### Output #1\n\n```\n9999999999\n9876556789\n9876567890\n9899999999\n```\n\n### Note\n\nIn the first test case, for the first phone number 9999999999, regardless of the rearrangement of digits, the same phone number is obtained.\n\nIn the second test case, for the phone number 9988776655, it can be proven that 9876556789 is the smallest phone number that can be obtained by rearranging the digits.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2098a/lcbpro-2098a.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:58:34.514908+00:00",
    "trial_ended_at": "2025-09-05T23:59:14.127424+00:00",
    "agent_started_at": "2025-09-05T23:58:47.503916+00:00",
    "agent_ended_at": "2025-09-05T23:58:48.275696+00:00",
    "test_started_at": "2025-09-05T23:58:51.550390+00:00",
    "test_ended_at": "2025-09-05T23:58:55.181111+00:00"
}