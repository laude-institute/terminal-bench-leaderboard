{
    "id": "2d7fbb02-cd15-45d4-8287-398cc2fa7e24",
    "trial_name": "lcbpro-2042a.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2042a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2042A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThere are $n$ chests; the $i$-th chest initially contains $a_i$ coins. For each chest, you can choose any non-negative ($0$ or greater) number of coins to add to that chest, with one constraint: the total number of coins in all chests must become at least $k$.\n\nAfter you've finished adding coins to the chests, greedy Monocarp comes, who wants the coins. He will take the chests one by one, and since he is greedy, he will always choose the chest with the maximum number of coins. Monocarp will stop as soon as the total number of coins in chests he takes is at least $k$.\n\nYou want Monocarp to take as few coins as possible, so you have to add coins to the chests in such a way that, when Monocarp stops taking chests, he will have exactly $k$ coins. Calculate the minimum number of coins you have to add.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) -- the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains two integers $n$ and $k$ ($1 \\le n \\le 50$; $1 \\le k \\le 10^7$);\n- the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$).\n\n### Output\n\nFor each test case, print one integer -- the minimum number of coins you have to add so that, when Monocarp stops taking the chests, he has exactly $k$ coins. It can be shown that under the constraints of the problem, it is always possible.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 4\n\n4 1 2 3 2\n\n5 10\n\n4 1 2 3 2\n\n2 10\n\n1 1\n\n3 8\n\n3 3 3\n\n```\n\n#### Output #1\n\n```\n0\n1\n8\n2\n```\n\n### Note\n\nIn the first test case of the example, you don't have to add any coins. When Monocarp arrives, he will take the chest with $4$ coins, so he will have exactly $4$ coins.\n\nIn the second test case of the example, you can add $1$ coin to the $4$-th chest, so, when Monocarp arrives, he will take a chest with $4$ coins, then another chest with $4$ coins, and a chest with $2$ coins.\n\nIn the third test case of the example, you can add $3$ coins to the $1$-st chest and $5$ coins to the $2$-nd chest.\n\nIn the fourth test case of the example, you can add $1$ coin to the $1$-st chest and $1$ coin to the $3$-rd chest.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2042a/lcbpro-2042a.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:57:58.850680+00:00",
    "trial_ended_at": "2025-09-05T23:58:38.864690+00:00",
    "agent_started_at": "2025-09-05T23:58:09.440345+00:00",
    "agent_ended_at": "2025-09-05T23:58:10.509154+00:00",
    "test_started_at": "2025-09-05T23:58:13.077011+00:00",
    "test_ended_at": "2025-09-05T23:58:18.035754+00:00"
}