{
    "id": "a2090286-5c35-4b2f-83c9-b7b84f130cf9",
    "trial_name": "lcbpro-1993e.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-1993e",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 1993E)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nGiven a matrix $a$ of size $n \\times m$, each cell of which contains a non-negative integer. The integer lying at the intersection of the $i$-th row and the $j$-th column of the matrix is called $a_{i,j}$.\n\nLet's define $f(i)$ and $g(j)$ as the [XOR](https://en.wikipedia.org/wiki/Exclusive_or) of all integers in the $i$-th row and the $j$-th column, respectively. In one operation, you can either:\n\n- Select any row $i$, then assign $a_{i,j} := g(j)$ for each $1 \\le j \\le m$; or\n- Select any column $j$, then assign $a_{i,j} := f(i)$ for each $1 \\le i \\le n$.\n\n![](https://espresso.codeforces.com/3ad45bee646fd98f1fde1a1caab7627c01708237.png)An example of applying an operation on column $2$ of the matrix.\n\nIn this example, as we apply an operation on column $2$, all elements in this column are changed:\n\n- $a_{1,2} := f(1) = a_{1,1} \\oplus a_{1,2} \\oplus a_{1,3} \\oplus a_{1,4} = 1 \\oplus 1 \\oplus 1 \\oplus 1 = 0$\n- $a_{2,2} := f(2) = a_{2,1} \\oplus a_{2,2} \\oplus a_{2,3} \\oplus a_{2,4} = 2 \\oplus 3 \\oplus 5 \\oplus 7 = 3$\n- $a_{3,2} := f(3) = a_{3,1} \\oplus a_{3,2} \\oplus a_{3,3} \\oplus a_{3,4} = 2 \\oplus 0 \\oplus 3 \\oplus 0 = 1$\n- $a_{4,2} := f(4) = a_{4,1} \\oplus a_{4,2} \\oplus a_{4,3} \\oplus a_{4,4} = 10 \\oplus 11 \\oplus 12 \\oplus 16 = 29$\n\nYou can apply the operations any number of times. Then, we calculate the $\\textit{beauty}$ of the final matrix by summing the absolute differences between all pairs of its adjacent cells.\n\nMore formally, $\\textit{beauty}(a) = \\sum|a_{x,y} - a_{r,c}|$ for all cells $(x, y)$ and $(r, c)$ if they are adjacent. Two cells are considered adjacent if they share a side.\n\nFind the minimum $\\textit{beauty}$ among all obtainable matrices.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 250$) -- the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 15$) -- the number of rows and columns of $a$, respectively.\n\nThe next $n$ lines, each containing $m$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$ ($0 \\le a_{i,j} < 2^{20}$) -- description of the matrix $a$.\n\nIt is guaranteed that the sum of $(n^2 + m^2)$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, print a single integer $b$ -- the smallest possible $\\textit{beauty}$ of the matrix.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 2\n\n1 3\n\n2 3\n\n0 1 0\n\n5 4 4\n\n2 3\n\n0 2 4\n\n4 5 1\n\n3 3\n\n1 2 3\n\n4 5 6\n\n7 8 9\n\n```\n\n#### Output #1\n\n```\n1\n3\n13\n24\n```\n\n### Note\n\nLet's denote $r(i)$ as the first type operation applied on the $i$-th row, and $c(j)$ as the second type operation applied on the $j$-th column.\n\nIn the first test case, you can apply an operation $c(1)$, which assigns $a_{1,1} := 1 \\oplus 3 = 2$. Then, we'll receive this matrix:\n\n23\n\nIn the second test case, you can apply an operation $r(1)$, which assigns:\n\n- $a_{1,1} := g(1) = 0 \\oplus 5 = 5$\n- $a_{1,2} := g(2) = 1 \\oplus 4 = 5$\n- $a_{1,3} := g(3) = 0 \\oplus 4 = 4$\n\nThe resulting matrix after performing the operation is:\n\n554544\n\nIn the third test case, the best way to achieve minimum $\\textit{beauty}$ is applying three operations: $c(3)$, $r(2)$, and $c(2)$. The resulting matrix is:\n\n046456",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-1993e/lcbpro-1993e.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:59:15.409839+00:00",
    "trial_ended_at": "2025-09-05T23:59:48.115938+00:00",
    "agent_started_at": "2025-09-05T23:59:24.419506+00:00",
    "agent_ended_at": "2025-09-05T23:59:25.028954+00:00",
    "test_started_at": "2025-09-05T23:59:27.564081+00:00",
    "test_ended_at": "2025-09-05T23:59:32.162435+00:00"
}