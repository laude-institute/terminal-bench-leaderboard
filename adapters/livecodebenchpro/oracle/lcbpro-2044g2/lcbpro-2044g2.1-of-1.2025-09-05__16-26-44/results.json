{
    "id": "7d9aa4cf-f3e5-4bd0-b736-b969a3c06c6f",
    "trial_name": "lcbpro-2044g2.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2044g2",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2044G2)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThis is the hard version of the problem. The key difference between the two versions is highlighted in bold.\n\nA group of $n$ spiders has come together to exchange plushies. Initially, each spider has $1$ plushie. Every year, if spider $i$ has at least one plushie, he will give exactly one plushie to spider $r_i$. Otherwise, he will do nothing. Note that all plushie transfers happen at the same time. In this version, each spider is allowed to have more than 1 plushie at any point in time.\n\nThe process is stable in the current year if each spider has the same number of plushies (before the current year's exchange) as he did the previous year (before the previous year's exchange). Note that year $1$ can never be stable.\n\nFind the first year in which the process becomes stable.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) -- the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) -- the number of spiders.\n\nThe following line contains $n$ integers $r_1, r_2, \\ldots, r_n$ ($1 \\leq r_i \\leq n, r_i \\neq i$) -- the recipient of the plushie of each spider.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer on a new line, the first year in which the process becomes stable.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n2 1\n\n5\n\n2 3 4 5 1\n\n5\n\n2 1 4 2 3\n\n5\n\n4 1 1 5 4\n\n10\n\n4 3 9 1 6 7 9 10 10 3\n\n```\n\n#### Output #1\n\n```\n2\n2\n5\n5\n5\n```\n\n### Note\n\nFor the second test case:\n\n- At year $1$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Then, year $1$'s exchange happens.\n- At year $2$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Since this array is the same as the previous year, this year is stable.\n\nFor the third test case:\n\n- At year $1$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Then, year $1$'s exchange happens.\n- At year $2$, the following array shows the number of plushies each spider has: $[1, 2, 1, 1, 0]$. Then, year $2$'s exchange happens.\n- At year $3$, the following array shows the number of plushies each spider has: $[1, 3, 0, 1, 0]$. Then, year $3$'s exchange happens.\n- At year $4$, the following array shows the number of plushies each spider has: $[1, 4, 0, 0, 0]$. Then, year $4$'s exchange happens.\n- At year $5$, the following array shows the number of plushies each spider has: $[1, 4, 0, 0, 0]$. Since this array is the same as the previous year, this year is stable.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2044g2/lcbpro-2044g2.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:35:46.138630+00:00",
    "trial_ended_at": "2025-09-05T23:36:22.815240+00:00",
    "agent_started_at": "2025-09-05T23:35:56.115565+00:00",
    "agent_ended_at": "2025-09-05T23:35:57.325767+00:00",
    "test_started_at": "2025-09-05T23:35:59.793270+00:00",
    "test_ended_at": "2025-09-05T23:36:07.006920+00:00"
}