{
    "id": "6dbeac4e-7535-44d6-8c93-49e4750a95ec",
    "trial_name": "lcbpro-2042c.1-of-1.2025-09-05__16-26-44",
    "task_id": "lcbpro-2042c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2042C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nAlice and Bob participate in a fishing contest! In total, they caught $n$ fishes, numbered from $1$ to $n$ (the bigger the fish, the greater its index). Some of these fishes were caught by Alice, others -- by Bob.\n\nTheir performance will be evaluated as follows. First, an integer $m$ will be chosen, and all fish will be split into $m$ non-empty groups. The first group should contain several (at least one) smallest fishes, the second group -- several (at least one) next smallest fishes, and so on. Each fish should belong to exactly one group, and each group should be a contiguous subsegment of fishes. Note that the groups are numbered in exactly that order; for example, the fishes from the second group cannot be smaller than the fishes from the first group, since the first group contains the smallest fishes.\n\nThen, each fish will be assigned a value according to its group index: each fish in the first group gets value equal to $0$, each fish in the second group gets value equal to $1$, and so on. So, each fish in the $i$-th group gets value equal to $(i-1)$.\n\nThe score of each contestant is simply the total value of all fishes that contestant caught.\n\nYou want Bob's score to exceed Alice's score by at least $k$ points. What is the minimum number of groups ($m$) you have to split the fishes into? If it is impossible, you should report that.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) -- the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$; $1 \\le k \\le 10^9$).\n\nThe second line contains a string, consisting of exactly $n$ characters. The $i$-th character is either 0 (denoting that the $i$-th fish was caught by Alice) or 1 (denoting that the $i$-th fish was caught by Bob).\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer -- the minimum number of groups you have to split the fishes into; or -1 if it's impossible.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 1\n\n1001\n\n4 1\n\n1010\n\n4 1\n\n0110\n\n4 2\n\n0110\n\n6 3\n\n001110\n\n10 20\n\n1111111111\n\n5 11\n\n11111\n\n```\n\n#### Output #1\n\n```\n2\n-1\n2\n-1\n3\n4\n-1\n```\n\n### Note\n\nIn the first test case of the example, you can split the fishes into groups as follows: the first three fishes form the $1$-st group, the last fish forms the $2$-nd group. Then, Bob's score will be $1$, and Alice's score will be $0$.\n\nIn the third test case of the example, you can split the fishes into groups as follows: the first fish forms the $1$-st group, the last three fishes form the $2$-nd group. Then, Bob's score will be $2$, and Alice's score will be $1$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__16-26-44/lcbpro-2042c/lcbpro-2042c.1-of-1.2025-09-05__16-26-44/sessions/agent.cast",
    "total_input_tokens": 0,
    "total_output_tokens": 0,
    "trial_started_at": "2025-09-05T23:39:05.781226+00:00",
    "trial_ended_at": "2025-09-05T23:39:43.034595+00:00",
    "agent_started_at": "2025-09-05T23:39:18.834081+00:00",
    "agent_ended_at": "2025-09-05T23:39:19.354431+00:00",
    "test_started_at": "2025-09-05T23:39:22.853142+00:00",
    "test_ended_at": "2025-09-05T23:39:28.746635+00:00"
}