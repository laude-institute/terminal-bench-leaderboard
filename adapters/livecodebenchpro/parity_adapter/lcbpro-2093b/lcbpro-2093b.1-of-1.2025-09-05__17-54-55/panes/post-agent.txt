root@fdbdd6d8dbab:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgovLyBGdW5jdGlvbiB0byBjb21wdXRlIHN1bSBvZiBkaWdpdHMgb2YgYSBzdHJpbmcgcm
VwcmVzZW50aW5nIGEgbnVtYmVyCmludCBzdW1fb2ZfZGlnaXRzKGNvbnN0IHN0cmluZyAmcykgewogICAgaW50IHN1bSA9IDA7CiAgICBmb3IoY2hhciBjIDogcykgc3VtICs9IGMgLSAnMCc7CiAgICByZXR1cm
4gc3VtOwp9CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIGNpbi50aWUobnVsbHB0cik7CgogICAgaW50IHQ7IGNpbiA+PiB0OwogICAgd2hpbGUodC0tKSB7CiAgIC
AgICAgc3RyaW5nIG47IGNpbiA+PiBuOwogICAgICAgIGludCBsZW5ndGggPSAoaW50KW4uc2l6ZSgpOwoKICAgICAgICAvLyBXZSB3YW50IHRvIG1pbmltaXplIGNvc3QgPSBudW1iZXIgLyBzdW1fb2ZfZGlnaX
RzKG51bWJlcikKICAgICAgICAvLyBXaXRoIGRpZ2l0cyBpbiBzYW1lIG9yZGVyIGJ1dCBzb21lIHJlbW92ZWQuCiAgICAgICAgLy8gVGhlIG1pbmltYWwgY29zdCB3aWxsIGJlIGFjaGlldmVkIGJ5IGEgc3Vic2
VxdWVuY2Ugd2l0aCBtaW5pbWFsIHJhdGlvLgoKICAgICAgICAvLyBTdHJhdGVneToKICAgICAgICAvLyBUaGUgY29zdCBpcyBudW1iZXIgLyBzdW1fb2ZfZGlnaXRzLgogICAgICAgIC8vIEZvciBnaXZlbiBkaW
dpdHMsIGNvc3QgZGVjcmVhc2VzIGlmIHN1bV9vZl9kaWdpdHMgaXMgbGFyZ2UgYW5kIG51bWJlciBpcyBzbWFsbC4KICAgICAgICAvLyBTaW5jZSBudW1iZXIgaXMgbGFyZ2UgaW50ZWdlciwgYnV0IGRpZ2l0cy
BvcmRlciBmaXhlZCwgcmVtb3ZpbmcgZGlnaXRzCiAgICAgICAgLy8gdG8gZ2V0IG1pbmltYWwgY29zdCBpcyBjb21wbGV4LgoKICAgICAgICAvLyBTaW5jZSBuIGNhbiBiZSB2ZXJ5IGxhcmdlICh1cCB0byAxMF
4xMDApLCB3ZSBjYW5ub3QgdHJ5IGFsbCBzdWJzZXF1ZW5jZXMuCgogICAgICAgIC8vIE9ic2VydmF0aW9uOgogICAgICAgIC8vIENvc3QgPSBudW1iZXIgLyBzdW1fb2ZfZGlnaXRzLgogICAgICAgIC8vIFRoZS
BudW1iZXIgaXMgdGhlIHN1YnNlcXVlbmNlIGludGVycHJldGVkIGFzIGludGVnZXIgKGxlYWRpbmcgemVyb3MgYWxsb3dlZCkuCiAgICAgICAgLy8gU2luY2UgbGVhZGluZyB6ZXJvcyBhbGxvd2VkLCBudW1iZX
IgY2FuIGJlIHNtYWxsZXIgYnkgcmVtb3ZpbmcgZGlnaXRzLgoKICAgICAgICAvLyBUcnkgYWxsIHN1YnNlcXVlbmNlcyBieSBEUCBpcyBpbXBvc3NpYmxlIGR1ZSB0byBsZW5ndGguCgogICAgICAgIC8vIEFub3
RoZXIgYXBwcm9hY2g6CiAgICAgICAgLy8gVGhlIG1pbmltYWwgY29zdCBpcyBtaW5pbWFsIHJhdGlvLgogICAgICAgIC8vIFdlIGNhbiB0cnkgYWxsIHBvc3NpYmxlIHN1bV9vZl9kaWdpdHMgdmFsdWVzIGFuZC
BmaW5kIG1pbmltYWwgbnVtYmVyIHdpdGggdGhhdCBzdW0uCgogICAgICAgIC8vIEJ1dCBzdW1fb2ZfZGlnaXRzIGNhbiBiZSBhdCBtb3N0IDkwMCAoZm9yIDEwMCBkaWdpdHMgYWxsIDkpLgoKICAgICAgICAvLy
BMZXQncyB0cnkgYWxsIHN1bXMgZnJvbSAxIHRvIDkwMDoKICAgICAgICAvLyBGb3IgZWFjaCBzdW0gcywgZmluZCBtaW5pbWFsIG51bWJlciAobGV4IHNtYWxsZXN0KSBzdWJzZXF1ZW5jZSB3aXRoIHN1bSBzLg
oKICAgICAgICAvLyBCdXQgdGhhdCBpcyBzdGlsbCBleHBlbnNpdmUuCgogICAgICAgIC8vIEFsdGVybmF0aXZlIGFwcHJvYWNoOgogICAgICAgIC8vIFNpbmNlIGNvc3QgPSBudW1iZXIgLyBzdW1fb2ZfZGlnaX
RzLAogICAgICAgIC8vIEZvciBnaXZlbiBzdW1fb2ZfZGlnaXRzIHMsIG1pbmltYWwgbnVtYmVyIHdpdGggc3VtIHMgc3Vic2VxdWVuY2UgbWluaW1pemVzIGNvc3QuCgogICAgICAgIC8vIFdlJ2xsIGZpbmQgbW
luaW1hbCBjb3N0IGJ5IGVudW1lcmF0aW5nIGFsbCBwb3NzaWJsZSBzdW0gb2YgZGlnaXRzICgxIHRvIG1heCBzdW0pLgoKICAgICAgICAvLyBJbXBsZW1lbnQgYSBEUDoKICAgICAgICAvLyBkcFtwb3NdW3N1bV
0gPSBtaW5pbWFsIHN1YnNlcXVlbmNlIG51bWJlciAoc3RyaW5nKSB1c2luZyBkaWdpdHMgdXAgdG8gcG9zIHdpdGggc3VtIHN1bS4KICAgICAgICAvLyBCdXQgY29tcGxleGl0eSB0b28gYmlnLgoKICAgICAgIC
AvLyBXZSBjYW4gZG8gYSBncmVlZHkgYXBwcm9hY2g6CiAgICAgICAgLy8gRm9yIGVhY2ggZGlnaXQsIHdlIGNvbnNpZGVyIHRha2luZyBpdCBvciBub3QuCiAgICAgICAgLy8gSWYgd2Ugd2FudCBtaW5pbWFsIG
Nvc3QsIHdlIHdhbnQgbWluaW1hbCBudW1iZXIgLyBzdW1fb2ZfZGlnaXRzLgoKICAgICAgICAvLyBMZXQncyB0cnkgYWxsIGRpZ2l0cyBmcm9tIGxlZnQgdG8gcmlnaHQsIGtlZXAgdHJhY2sgb2YgbWluaW1hbC
ByYXRpby4KCiAgICAgICAgLy8gQnV0IHRvIGZpbmQgbWluaW1hbCByYXRpbywgd2UgY2FuIHRyeSBhbGwgc2luZ2xlIGRpZ2l0cyBzdWJzZXF1ZW5jZXMuCiAgICAgICAgLy8gU2luZ2xlIGRpZ2l0IGNvc3QgPS
BkaWdpdCAvIGRpZ2l0IChjb3N0PTEpLCBtaW5pbWFsIGNvc3QgYWx3YXlzIDEuCgogICAgICAgIC8vIFNvIG1pbmltYWwgY29zdCBpcyBhdCBsZWFzdCAxLgoKICAgICAgICAvLyBMZXQncyBjb25zaWRlciBzaW
5nbGUgZGlnaXQgc3Vic2VxdWVuY2VzIGZpcnN0OgogICAgICAgIC8vIE1pbmltYWwgY29zdCBpcyBhdCBtb3N0IDEuCgogICAgICAgIC8vIFRyeSB0byBmaW5kIHN1YnNlcXVlbmNlIHdpdGggY29zdCA8IDE/Ci
AgICAgICAgLy8gTnVtYmVyIC8gc3VtX29mX2RpZ2l0cyA8IDEgPT4gbnVtYmVyIDwgc3VtX29mX2RpZ2l0cywgaW1wb3NzaWJsZSBzaW5jZSBudW1iZXIgPj0gc3VtX29mX2RpZ2l0cyAoZGlnaXRzID49IDApLg
oKICAgICAgICAvLyBTbyBtaW5pbWFsIGNvc3QgaXMgYXQgbGVhc3QgMS4KCiAgICAgICAgLy8gTmV4dCB0cnkgdG8gZmluZCBzdWJzZXF1ZW5jZSB3aXRoIGNvc3QgPT0gMToKICAgICAgICAvLyBudW1iZXIgPT
0gc3VtX29mX2RpZ2l0cwogICAgICAgIC8vIFRoaXMgaGFwcGVucyBpZiBzdWJzZXF1ZW5jZSBkaWdpdHMgYXJlIGFsbCAnMSdzIG9yICcwJ3Mgb3IgY29tYmluYXRpb24/CgogICAgICAgIC8vIEFjdHVhbGx5IH
N1bV9vZl9kaWdpdHMgPD0gbnVtYmVyIGlmIG5vIGxlYWRpbmcgemVyb3MuCgogICAgICAgIC8vIEJ1dCBsZWFkaW5nIHplcm9zIGFsbG93ZWQsIHNvIG51bWJlciBjYW4gYmUgc21hbGxlci4KCiAgICAgICAgLy
8gTGV0J3MgdHJ5IGFsbCBzaW5nbGUgZGlnaXQgc3Vic2VxdWVuY2VzLCBjb3N0ID0gZGlnaXQgLyBkaWdpdCA9IDEgZm9yIGRpZ2l0ICE9IDAKICAgICAgICAvLyBGb3IgZGlnaXQgMCwgY29zdCA9IDAvMCBpbn
ZhbGlkLgoKICAgICAgICAvLyBTbyBtaW5pbWFsIGNvc3QgaXMgMS4KCiAgICAgICAgLy8gU28gYW5zd2VyIGlzIG1pbmltYWwgbnVtYmVyIG9mIGRpZ2l0cyByZW1vdmVkIHRvIGdldCBjb3N0IDEuCgogICAgIC
AgIC8vIFRvIGdldCBjb3N0IDEsIG51bWJlciBhbmQgc3VtX29mX2RpZ2l0cyBtdXN0IGJlIGVxdWFsLgoKICAgICAgICAvLyBDaGVjayBhbGwgc3Vic2VxdWVuY2VzIHdoZXJlIHN1bV9vZl9kaWdpdHMgPT0gbn
VtYmVyLgoKICAgICAgICAvLyBTaW5jZSBudW1iZXIgaXMgbnVtYmVyIGZvcm1lZCBieSBkaWdpdHMgKGxlYWRpbmcgemVyb3MgYWxsb3dlZCksCiAgICAgICAgLy8gaXQncyBwb3NzaWJsZSBvbmx5IGlmIGFsbC
BkaWdpdHMgYXJlICcxJyBvciAnMCc/CgogICAgICAgIC8vIEZvciBleGFtcGxlLCAnMTExJyBzdW09MyBudW1iZXI9MTExICE9MwoKICAgICAgICAvLyBTbyBjb3N0IDEgaXMgbm90IHBvc3NpYmxlIGV4Y2VwdC
BzaW5nbGUgZGlnaXQgc3Vic2VxdWVuY2Ugd2l0aCBkaWdpdCBkIHdoZXJlIGQgPSBkLgoKICAgICAgICAvLyBTbyBtaW5pbWFsIGNvc3QgaXMgbWluaW1hbCBkaWdpdCBpbiBudW1iZXIsIGNvc3Q9MS4KCiAgIC
AgICAgLy8gU28gbm93IG1pbmltaXplIGRpZ2l0cyByZW1vdmVkIHRvIGdldCBtaW5pbWFsIGRpZ2l0LgoKICAgICAgICAvLyBTbyBhbnN3ZXIgPSBsZW5ndGggLSAxIChrZWVwIG9uZSBtaW5pbWFsIGRpZ2l0KS
4KCiAgICAgICAgLy8gSG93ZXZlciwgZXhhbXBsZTogNjY2IC0+IG91dHB1dCAyIChrZWVwIG9uZSBkaWdpdCA2LCBjb3N0PTYvNj0xKQoKICAgICAgICAvLyBGb3IgMTM3MDAgLT4gb3V0cHV0IDQgKGtlZXAgZG
lnaXQgMSBvciAzIG9yIDcgb3IgMD8gY29zdCA9IGRpZ2l0L2RpZ2l0PTEpCgogICAgICAgIC8vIEZvciA3IC0+IG91dHB1dCAwIChhbHJlYWR5IG9uZSBkaWdpdCwgY29zdD03Lzc9MSkKCiAgICAgICAgLy8gU2
8gbWluaW1hbCBkaWdpdHMgcmVtb3ZlZCA9IGxlbmd0aCAtIDEuCgogICAgICAgIC8vIEJ1dCBleGFtcGxlIDEwMjAzMCAtPiBvdXRwdXQgMwogICAgICAgIC8vIGxlbmd0aD02LCBhbnN3ZXI9MyBtZWFucyBrZW
VwIDMgZGlnaXRzCgogICAgICAgIC8vIFNvIHdlIG5lZWQgdG8gZmluZCBzdWJzZXF1ZW5jZSB3aXRoIG1pbmltYWwgY29zdC4KCiAgICAgICAgLy8gTGV0J3MgdHJ5IHRvIGZpbmQgc3Vic2VxdWVuY2Ugd2l0aC
BtaW5pbWFsIGNvc3QgYW1vbmcgYWxsIHN1YnNlcXVlbmNlcy4KCiAgICAgICAgLy8gU2luY2UgbnVtYmVyIGNhbiBiZSBsYXJnZSwgdHJ5IGFsbCBkaWdpdHMsIHBpY2sgc3Vic2VxdWVuY2Ugd2l0aCBtaW5pbW
FsIHJhdGlvLgoKICAgICAgICAvLyBMZXQncyBpdGVyYXRlIG92ZXIgYWxsIGRpZ2l0cyBhbmQgdHJ5IGtlZXBpbmcgdGhlbS4KCiAgICAgICAgLy8gVHJ5IHN1YnNlcXVlbmNlIG9mIGxlbmd0aCAxOiBjb3N0ID
0gZGlnaXQvZGlnaXQ9MQoKICAgICAgICAvLyBUcnkgc3Vic2VxdWVuY2UgbGVuZ3RoID4gMToKICAgICAgICAvLyBjb3N0ID0gbnVtYmVyL3N1bV9vZl9kaWdpdHMKCiAgICAgICAgLy8gRm9yIGV4YW1wbGUgMD
M1IGNvc3Q9MzUvKDArMys1KT0zNS84PTQuMzc1CgogICAgICAgIC8vIFNvIGNvc3QgY2FuIGJlIGxlc3MgdGhhbiAxPwoKICAgICAgICAvLyBObywgYmVjYXVzZSBudW1iZXIgPj0gc3VtX29mX2RpZ2l0cywgc2
8gY29zdCA+PTE/CgogICAgICAgIC8vIEJ1dCBleGFtcGxlIHNheXMgY29zdD00LjM3NSwgd2hpY2ggaXMgPjEuCgogICAgICAgIC8vIFNvIG1pbmltYWwgY29zdCBpcyBhbHdheXMgPj0xLgoKICAgICAgICAvLy
BTbyBtaW5pbWFsIGNvc3QgaXMgMS4KCiAgICAgICAgLy8gU28gdGhlIHByb2JsZW0gcmVkdWNlcyB0byBmaW5kIHN1YnNlcXVlbmNlIHdpdGggY29zdD0xIGFuZCBtaW5pbWFsIGRpZ2l0cyByZW1vdmVkLgoKIC
AgICAgICAvLyBjb3N0PTEgbWVhbnMgbnVtYmVyID0gc3VtX29mX2RpZ2l0cyAoYXMgZG91YmxlKSwgc28gbnVtYmVyID09IHN1bV9vZl9kaWdpdHMgaW4gaW50ZWdlci4KCiAgICAgICAgLy8gRm9yIGV4YW1wbG
UsIHNpbmdsZSBkaWdpdCBzdWJzZXF1ZW5jZSBkLCBjb3N0PTEuCgogICAgICAgIC8vIEZvciBtdWx0aS1kaWdpdCBzdWJzZXF1ZW5jZSwgbnVtYmVyID0gc3VtX29mX2RpZ2l0cz8KCiAgICAgICAgLy8gRm9yIG
V4YW1wbGUgMTExOiBudW1iZXI9MTExIHN1bT0zIGNvc3Q9MzcgPjEKCiAgICAgICAgLy8gU28gbXVsdGktZGlnaXQgY29zdCBhbHdheXMgPjEuCgogICAgICAgIC8vIFNvIG1pbmltYWwgY29zdCBpcyBhbHdheX
MgMS4KCiAgICAgICAgLy8gU28gYW5zd2VyIGlzIGxlbmd0aCAtIDEgKGtlZXAgb25lIGRpZ2l0KS4KCiAgICAgICAgLy8gQnV0IGV4YW1wbGUgMTAyMDMwIGdpdmVzIG91dHB1dCAzIChrZWVwIDMgZGlnaXRzKS
4KCiAgICAgICAgLy8gU28gc2luZ2xlIGRpZ2l0IHN1YnNlcXVlbmNlIG5vdCBhbHdheXMgbWluaW1hbCBjb3N0LgoKICAgICAgICAvLyBTbyBjb3N0IGNhbiBiZSBsZXNzIHRoYW4gc2luZ2xlIGRpZ2l0IGNvc3
QuCgogICAgICAgIC8vIEV4YW1wbGUgMTAyMDMwIGtlZXAgMDMwIGNvc3Q9MzAvMz0xMAoKICAgICAgICAvLyBFeGFtcGxlIDEwMjAzMCBrZWVwIDAyMCBjb3N0PTIwLzI9MTAKCiAgICAgICAgLy8gRXhhbXBsZS
AxMDIwMzAga2VlcCAwMDMgY29zdD0zLzM9MQoKICAgICAgICAvLyBCdXQgMDAzIGlzICcwMDMnIG51bWJlciAzIHN1bSAwKzArMz0zIGNvc3Q9MQoKICAgICAgICAvLyBTbyBtaW5pbWFsIGNvc3QgY2FuIGJlID
Egd2l0aCBtdWx0aS1kaWdpdCBzdWJzZXF1ZW5jZS4KCiAgICAgICAgLy8gU28gd2Ugc2hvdWxkIGZpbmQgc3Vic2VxdWVuY2Ugd2l0aCBtaW5pbWFsIGNvc3QuCgogICAgICAgIC8vIExldCdzIHRyeSB0byBmaW
5kIG1pbmltYWwgY29zdCBieSBlbnVtZXJhdGluZyBhbGwgc3Vic2VxdWVuY2VzPwoKICAgICAgICAvLyBOb3QgZmVhc2libGUuCgogICAgICAgIC8vIEFsdGVybmF0aXZlIGFwcHJvYWNoOgogICAgICAgIC8vIG
Nvc3QgPSBudW1iZXIgLyBzdW1fb2ZfZGlnaXRzCgogICAgICAgIC8vIG51bWJlciBhbmQgc3VtX29mX2RpZ2l0cyBtdXN0IGJlIGludGVnZXJzLgoKICAgICAgICAvLyBjb3N0IG1pbmltYWwgbWVhbnMgbnVtYm
VyL3N1bV9vZl9kaWdpdHMgbWluaW1hbC4KCiAgICAgICAgLy8gRm9yIGZpeGVkIHN1bV9vZl9kaWdpdHMgcywgZmluZCBtaW5pbWFsIG51bWJlciB3aXRoIGRpZ2l0IHN1bSBzLgoKICAgICAgICAvLyBNaW5pbW
FsIG51bWJlciB3aXRoIHN1bSBzIGlzIGRpZ2l0cyBhcyBzbWFsbCBhcyBwb3NzaWJsZSBmcm9tIGxlZnQuCgogICAgICAgIC8vIFNvIG1pbmltYWwgbnVtYmVyIHdpdGggc3VtIHMgPSBzdHJpbmcgd2l0aCBkaW
dpdHMgY2hvc2VuIHRvIGdldCBzdW0gcywgc21hbGxlc3QgbGV4LgoKICAgICAgICAvLyBTbyBmb3IgcyBpbiAxLi45MDA6CiAgICAgICAgLy8gRmluZCBtaW5pbWFsIG51bWJlciB3aXRoIGRpZ2l0IHN1bSBzLg
oKICAgICAgICAvLyBBbW9uZyB0aGVzZSBhbGwsIHBpY2sgbWluaW1hbCBjb3N0LgoKICAgICAgICAvLyBCdXQgd2UgbXVzdCBmaW5kIHN1YnNlcXVlbmNlIG9mIG4gd2l0aCBzdW0gb2YgZGlnaXRzIHMgYW5kIG
1pbmltYWwgbnVtYmVyLgoKICAgICAgICAvLyBTbyB0aGUgcHJvYmxlbSByZWR1Y2VzIHRvIERQOgogICAgICAgIC8vIGRwW3Bvc11bc3VtXSA9IG1pbmltYWwgc3RyaW5nIHN1YnNlcXVlbmNlIG51bWJlciB1c2
luZyBuWzAuLnBvc10sIHN1bSBvZiBkaWdpdHMgPSBzdW0KCiAgICAgICAgLy8gV2UgY2FuIGltcGxlbWVudCBEUCB3aXRoIG1hcCBvciB1bm9yZGVyZWRfbWFwIGZvciBzdW0uCgogICAgICAgIC8vIFNpbmNlIH
QgdXAgdG8gMTAwMCBhbmQgbiB1cCB0byAxMDAgZGlnaXRzLCBzdW0gbWF4IDkqMTAwPTkwMC4KCiAgICAgICAgLy8gU28gRFAgY29tcGxleGl0eSBtYW5hZ2VhYmxlLgoKICAgICAgICAvLyBMZXQncyBpbXBsZW
1lbnQgRFAuCgogICAgICAgIHZlY3RvcjxtYXA8aW50LHN0cmluZz4+IGRwKGxlbmd0aCsxKTsKICAgICAgICBkcFswXVswXSA9ICIiOwoKICAgICAgICBmb3IoaW50IGk9MDsgaTxsZW5ndGg7IGkrKykgewogIC
AgICAgICAgICBpbnQgZGlnaXQgPSBuW2ldIC0gJzAnOwogICAgICAgICAgICBkcFtpKzFdID0gZHBbaV07CiAgICAgICAgICAgIGZvcihhdXRvICZwIDogZHBbaV0pIHsKICAgICAgICAgICAgICAgIGludCBzdW
0gPSBwLmZpcnN0OwogICAgICAgICAgICAgICAgc3RyaW5nIHN1YnNlcSA9IHAuc2Vjb25kOwoKICAgICAgICAgICAgICAgIC8vIE9wdGlvbiAxOiBza2lwIG5baV0KICAgICAgICAgICAgICAgIC8vIEFscmVhZH
kgaW4gZHBbaSsxXQoKICAgICAgICAgICAgICAgIC8vIE9wdGlvbiAyOiB0YWtlIG5baV0KICAgICAgICAgICAgICAgIGludCBuZXdfc3VtID0gc3VtICsgZGlnaXQ7CiAgICAgICAgICAgICAgICBzdHJpbmcgbm
V3X3N1YnNlcSA9IHN1YnNlcSArIG5baV07CgogICAgICAgICAgICAgICAgaWYoZHBbaSsxXS5jb3VudChuZXdfc3VtKSA9PSAwIHx8IG5ld19zdWJzZXEgPCBkcFtpKzFdW25ld19zdW1dKSB7CiAgICAgICAgIC
AgICAgICAgICAgZHBbaSsxXVtuZXdfc3VtXSA9IG5ld19zdWJzZXE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIE5vdyBmaW5kIG1pbmltYWwgY29zdCBhbW
9uZyBkcFtsZW5ndGhdCiAgICAgICAgZG91YmxlIGJlc3RfY29zdCA9IDFlMTg7CiAgICAgICAgaW50IGJlc3RfcmVtb3ZlZCA9IGxlbmd0aCAtIDE7IC8vIGRlZmF1bHQgc2luZ2xlIGRpZ2l0CgogICAgICAgIG
ZvcihhdXRvICZwIDogZHBbbGVuZ3RoXSkgewogICAgICAgICAgICBpbnQgcyA9IHAuZmlyc3Q7CiAgICAgICAgICAgIHN0cmluZyB2YWwgPSBwLnNlY29uZDsKICAgICAgICAgICAgaWYodmFsLmVtcHR5KCkpIG
NvbnRpbnVlOwoKICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIG51bWJlciBhcyBpbnRlZ2VyIChsZWFkaW5nIHplcm9zIGFsbG93ZWQpCiAgICAgICAgICAgIC8vIEJ1dCBudW1iZXIgY2FuIGJlIGxhcmdlLCBzby
B1c2Ugc3RyaW5nIHRvIGRvdWJsZSBjb252ZXJzaW9uCgogICAgICAgICAgICAvLyBDb252ZXJ0IHZhbCB0byBkb3VibGUgdG8gYXZvaWQgb3ZlcmZsb3cKICAgICAgICAgICAgZG91YmxlIG51bSA9IDA7CiAgIC
AgICAgICAgIGZvcihjaGFyIGMgOiB2YWwpIG51bSA9IG51bSoxMCArIChjIC0gJzAnKTsKCiAgICAgICAgICAgIGlmKHMgPT0gMCkgY29udGludWU7IC8vIHN1bT0wIG5vIHZhbGlkIGNvc3QKCiAgICAgICAgIC
AgIGRvdWJsZSBjb3N0ID0gbnVtIC8gczsKCiAgICAgICAgICAgIGlmKGNvc3QgPCBiZXN0X2Nvc3QgfHwgKGFicyhjb3N0IC0gYmVzdF9jb3N0KSA8IDFlLTE0ICYmIChsZW5ndGggLSAoaW50KXZhbC5zaXplKC
kpIDwgYmVzdF9yZW1vdmVkKSkgewogICAgICAgICAgICAgICAgYmVzdF9jb3N0ID0gY29zdDsKICAgICAgICAgICAgICAgIGJlc3RfcmVtb3ZlZCA9IGxlbmd0aCAtIChpbnQpdmFsLnNpemUoKTsKICAgICAgIC
AgICAgfQogICAgICAgIH0KCiAgICAgICAgY291dCA8PCBiZXN0X3JlbW92ZWQgPDwgIlxuIjsKICAgIH0KICAgIHJldHVybiAwOwp9Cg==' | base64 -d > /app/main.cpp; tmux wait -S done
root@fdbdd6d8dbab:/app#
