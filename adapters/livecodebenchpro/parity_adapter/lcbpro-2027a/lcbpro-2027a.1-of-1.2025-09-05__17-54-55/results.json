{
    "id": "7b70c9a0-0c55-4ae9-babe-a685cf4a7f6e",
    "trial_name": "lcbpro-2027a.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2027a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2027A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are coloring an infinite square grid, in which all cells are initially white. To do this, you are given $n$ stamps. Each stamp is a rectangle of width $w_i$ and height $h_i$.\n\nYou will use each stamp exactly once to color a rectangle of the same size as the stamp on the grid in black. You cannot rotate the stamp, and for each cell, the stamp must either cover it fully or not cover it at all. You can use the stamp at any position on the grid, even if some or all of the cells covered by the stamping area are already black.\n\nWhat is the minimum sum of the perimeters of the connected regions of black squares you can obtain after all the stamps have been used?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$).\n\nThe $i$-th of the next $n$ lines contains two integers $w_i$ and $h_i$ ($1 \\le w_i, h_i \\le 100$).\n\n### Output\n\nFor each test case, output a single integerÂ -- the minimum sum of the perimeters of the connected regions of black squares you can obtain after all the stamps have been used.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n1 5\n\n2 4\n\n3 3\n\n4 2\n\n5 1\n\n3\n\n2 2\n\n1 1\n\n1 2\n\n1\n\n3 2\n\n3\n\n100 100\n\n100 100\n\n100 100\n\n4\n\n1 4\n\n2 3\n\n1 5\n\n3 2\n\n```\n\n#### Output #1\n\n```\n20\n8\n10\n400\n16\n```\n\n### Note\n\nIn the first test case, the stamps can be used as shown on the left. Each stamp is highlighted in its own color for clarity.\n\n![](https://espresso.codeforces.com/e5cb3a60d3f4edae5433009de214eeef86376690.png)\n\nAfter all these stamps are used, there is one black region (as shown on the right), and its perimeter is $20$. It can be shown that there is no way of using the stamps that yields a lower total perimeter.\n\nIn the second test case, the second and third stamps can be used entirely inside the first one, so the minimum perimeter is equal to $8$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2027a/lcbpro-2027a.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 952,
    "total_output_tokens": 567,
    "trial_started_at": "2025-09-06T01:09:43.120930+00:00",
    "trial_ended_at": "2025-09-06T01:10:35.166265+00:00",
    "agent_started_at": "2025-09-06T01:09:54.376964+00:00",
    "agent_ended_at": "2025-09-06T01:10:10.925028+00:00",
    "test_started_at": "2025-09-06T01:10:13.285957+00:00",
    "test_ended_at": "2025-09-06T01:10:16.604724+00:00"
}