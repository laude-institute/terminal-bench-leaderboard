{
    "id": "276c7171-c719-4217-a321-fd9470819440",
    "trial_name": "lcbpro-2055a.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2055a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2055A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nRoaming through the alligator-infested Everglades, Florida Man encounters a most peculiar showdown.\n\nThere are $n$ lilypads arranged in a row, numbered from $1$ to $n$ from left to right. Alice and Bob are frogs initially positioned on distinct lilypads, $a$ and $b$, respectively. They take turns jumping, starting with Alice.\n\nDuring a frog's turn, it can jump either one space to the left or one space to the right, as long as the destination lilypad exists. For example, on Alice's first turn, she can jump to either lilypad $a-1$ or $a+1$, provided these lilypads are within bounds. It is important to note that each frog must jump during its turn and cannot remain on the same lilypad.\n\nHowever, there are some restrictions:\n\n- The two frogs cannot occupy the same lilypad. This means that Alice cannot jump to a lilypad that Bob is currently occupying, and vice versa.\n- If a frog cannot make a valid jump on its turn, it loses the game. As a result, the other frog wins.\n\nDetermine whether Alice can guarantee a win, assuming that both players play optimally. It can be proven that the game will end after a finite number of moves if both players play optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first and only line of each test case contains three integers $n$, $a$, and $b$ ($2 \\leq n \\leq 100$, $1 \\leq a, b \\leq n$, $a\\neq b$)Â -- the number of lilypads, and the starting positions of Alice and Bob, respectively.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, print a single line containing either \"YES\" or \"NO\", representing whether or not Alice has a winning strategy.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1 2\n\n3 3 1\n\n4 2 3\n\n5 2 4\n\n7 6 2\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, Alice has no legal moves. Therefore, Alice loses on the first turn.\n\nIn the second test case, Alice can only move to lilypad $2$. Then, Bob has no legal moves. Therefore, Alice has a winning strategy in this case.\n\nIn the third test case, Alice can only move to lilypad $1$. Then, Bob can move to lilypad $2$. Alice is no longer able to move and loses, giving Bob the win. It can be shown that Bob can always win regardless of Alice's moves; hence, Alice does not have a winning strategy.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2055a/lcbpro-2055a.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1071,
    "total_output_tokens": 377,
    "trial_started_at": "2025-09-06T01:25:21.966485+00:00",
    "trial_ended_at": "2025-09-06T01:26:10.539119+00:00",
    "agent_started_at": "2025-09-06T01:25:37.672799+00:00",
    "agent_ended_at": "2025-09-06T01:25:44.995096+00:00",
    "test_started_at": "2025-09-06T01:25:48.974335+00:00",
    "test_ended_at": "2025-09-06T01:25:52.017297+00:00"
}