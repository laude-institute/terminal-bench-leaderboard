['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIGNpbi50aWUobnVsbHB0cik7CiAgICBpbnQgdDsgY2luID4+IHQ7CiAgICB3aGlsZSAodC0tKSB7CiAgICAgICAgaW50IG47IGNpbiA+PiBuOwogICAgICAgIHN0cmluZyBzOyBjaW4gPj4gczsKCiAgICAgICAgLy8gZHBbaV0gPSBtaW5pbXVtIGNvc3QgdG8gYnV5IGZpZ3VyZXMgMS4uaQogICAgICAgIC8vIFdlIHdpbGwgYnV5IGZpZ3VyZSBpIG9uIGRheSBpIG9yIGxhdGVyLCBidXQgb25seSBvbiBkYXlzIHdoZXJlIHNbal0gPT0gJzEnIGFuZCBqID49IGkKICAgICAgICAvLyBPbiBkYXlzIHdpdGggc1tqXSA9PSAnMScsIHdlIGNhbiBidXkgYSBncm91cCBvZiBmaWd1cmVzIGF2YWlsYWJsZSBhdCB0aGF0IGRheQogICAgICAgIC8vIFNpbmNlIGZpZ3VyZSBpIGlzIGF2YWlsYWJsZSBmcm9tIGRheSBpIHRvIGRheSBuLCBidXlpbmcgZmlndXJlIGkgb24gZGF5IGogKGo+PWkpIGlzIHZhbGlkCgogICAgICAgIC8vIFRoZSBpZGVhOgogICAgICAgIC8vIFdlIGNhbiBvbmx5IGJ1eSBmaWd1cmVzIG9uIGRheXMgd2l0aCBzW2pdID09ICcxJwogICAgICAgIC8vIFdlIHdhbnQgdG8gcGFydGl0aW9uIHRoZSBmaWd1cmVzIGludG8gZ3JvdXBzIGJvdWdodCBvbiB0aG9zZSBkYXlzCiAgICAgICAgLy8gV2hlbiBidXlpbmcgYSBncm91cCwgY29zdCBpcyBzdW0gb2YgZmlndXJlcyBpbiBncm91cCBtaW51cyBtYXggZmlndXJlIGluIGdyb3VwCgogICAgICAgIC8vIFdlIGNhbiBtb2RlbCBkcFtpXTogbWluaW11bSBjb3N0IHRvIGJ1eSBmaXJzdCBpIGZpZ3VyZXMKICAgICAgICAvLyBkcFswXSA9IDAKICAgICAgICAvLyBGb3IgaSBmcm9tIDEgdG8gbjoKICAgICAgICAvLyAgIGZvciBlYWNoIGogPD0gaSB3aGVyZSBzW2otMV0gPT0gJzEnIChkYXlzIGFyZSAxLWJhc2VkLCBzIGlzIDAtYmFzZWQpLCAKICAgICAgICAvLyAgICAgY29uc2lkZXIgYnV5aW5nIGZpZ3VyZXMgai4uaSB0b2dldGhlciBvbiBkYXkgagogICAgICAgIC8vICAgICBjb3N0ID0gZHBbai0xXSArIHN1bShqLi5pKSAtIG1heChqLi5pKQogICAgICAgIC8vIG1heChqLi5pKSA9IGkgKHNpbmNlIGZpZ3VyZXMgY29zdCBmcm9tIDEuLm4gYW5kIGk+PWopCiAgICAgICAgLy8gc3VtKGouLmkpID0gKGkqKGkrMSkpLzIgLSAoKGotMSkqaikvMgogICAgICAgIC8vIFdlIHdhbnQgbWluIG92ZXIgagoKICAgICAgICAvLyBJbXBsZW1lbnRpbmcgdGhlIGFib3ZlIGRpcmVjdGx5IGlzIE8obl4yKSwgdG9vIHNsb3cgZm9yIG4gdXAgdG8gNGU1CgogICAgICAgIC8vIE9wdGltaXphdGlvbjoKICAgICAgICAvLyBXZSBjYW4gaXRlcmF0ZSBpIGZyb20gMSB0byBuLCBhbmQga2VlcCB0cmFjayBvZiBkcFtpXQogICAgICAgIC8vIFdlIG9ubHkgYnV5IGZpZ3VyZXMgb24gZGF5cyB3aXRoIHNbal09PTEKICAgICAgICAvLyBTbyB3ZSBvbmx5IGNvbnNpZGVyIGogd2hlcmUgc1tqLTFdPT0nMScgYW5kIGo8PWkKCiAgICAgICAgLy8gVG8gb3B0aW1pemUsIHdlIHByb2Nlc3MgZGF5cyBmcm9tIDEgdG8gbjoKICAgICAgICAvLyBGb3IgZWFjaCBkYXkgZCB3aGVyZSBzW2QtMV09PScxJywgd2UgY29uc2lkZXIgYnV5aW5nIGEgZ3JvdXAgb2YgZmlndXJlcyBmcm9tIGQgdG8gc29tZSBpID49IGQKICAgICAgICAvLyBTbyB3ZSBjYW4gcHJvY2VzcyBpbiBvcmRlciBhbmQgdXNlIGEgZGF0YSBzdHJ1Y3R1cmUgb3IgcHJlY29tcHV0YXRpb25zCgogICAgICAgIC8vIFdlIGNhbiB1c2UgYSBzZWdtZW50IHRyZWUgb3IgYmluYXJ5IHNlYXJjaCB3aXRoIHByZWZpeCBzdW1zIGFuZCBkcCBhcnJheS4KCiAgICAgICAgLy8gSG93ZXZlciwgdGhlcmUncyBhIGtub3duIGFwcHJvYWNoOgogICAgICAgIC8vIExldCBkcFswXSA9IDAKICAgICAgICAvLyBGb3IgaSA9IDEgdG8gbjoKICAgICAgICAvLyAgIGRwW2ldID0gZHBbaS0xXSArIGkgLy8gYnV5IGZpZ3VyZSBpIGFsb25lIG9uIGRheSBpIChhbHdheXMgcG9zc2libGUgc2luY2Ugc1tuLTFdPT0nMScpCiAgICAgICAgLy8gICBGb3IgYWxsIGogPCBpIHdoZXJlIHNbai0xXSA9PSAnMScsIGRwW2ldID0gbWluKGRwW2ldLCBkcFtqLTFdICsgc3VtKGouLmkpIC0gaSkKCiAgICAgICAgLy8gVG8gb3B0aW1pemU6CiAgICAgICAgLy8gV2UgY2FuIGtlZXAgdHJhY2sgb2YgdGhlIGxhc3QgcG9zaXRpb25zIHdpdGggc1tqLTFdPT0nMScgaW4gYW4gYXJyYXkuCiAgICAgICAgLy8gVXNpbmcgcHJlZml4IHN1bXMgb2YgZmlndXJlcyBjb3N0cy4KCiAgICAgICAgdmVjdG9yPGxvbmcgbG9uZz4gcHJlZml4KG4rMSwgMCk7CiAgICAgICAgZm9yIChpbnQgaSA9IDE7IGkgPD0gbjsgaSsrKSB7CiAgICAgICAgICAgIHByZWZpeFtpXSA9IHByZWZpeFtpLTFdICsgaTsKICAgICAgICB9CgogICAgICAgIHZlY3Rvcjxsb25nIGxvbmc+IGRwKG4rMSwgTExPTkdfTUFYKTsKICAgICAgICBkcFswXSA9IDA7CgogICAgICAgIC8vIFBvc2l0aW9ucyB3aGVyZSBzW2ldPT0nMScKICAgICAgICB2ZWN0b3I8aW50PiBkYXlzOwogICAgICAgIGZvciAoaW50IGkgPSAxOyBpIDw9IG47IGkrKykgewogICAgICAgICAgICBpZiAoc1tpLTFdID09ICcxJykgZGF5cy5wdXNoX2JhY2soaSk7CiAgICAgICAgfQoKICAgICAgICAvLyBXZSdsbCBpdGVyYXRlIGkgZnJvbSAxIHRvIG4KICAgICAgICAvLyBGb3IgZWFjaCBpLCBmaW5kIHRoZSBtaW5pbWFsIGRwW2ldOiBkcFtpXSA9IG1pbiBvdmVyIGogaW4gZGF5cyBhbmQgaiA8PSBpIG9mIGRwW2otMV0gKyBwcmVmaXhbaV0gLSBwcmVmaXhbai0xXSAtIGkKICAgICAgICAvLyBXZSBjYW4gbWFpbnRhaW4gYSBwb2ludGVyIHRvIGRheXMgdG8gYXZvaWQgY2hlY2tpbmcgYWxsIGRheXMgZWFjaCB0aW1lLgoKICAgICAgICAvLyBUbyBvcHRpbWl6ZSwgdXNlIHR3byBwb2ludGVyczoKICAgICAgICAvLyBGb3IgZWFjaCBpLCB3ZSBvbmx5IGNvbnNpZGVyIGRheXMgaiA8PSBpCiAgICAgICAgLy8gV2UnbGwga2VlcCBkYXlzIHNvcnRlZCAoYWxyZWFkeSBzb3J0ZWQpCgogICAgICAgIGludCBwb3MgPSAwOwogICAgICAgIGZvciAoaW50IGkgPSAxOyBpIDw9IG47IGkrKykgewogICAgICAgICAgICAvLyBJbml0aWFsOiBidXkgZmlndXJlIGkgYWxvbmUgb24gZGF5IGkKICAgICAgICAgICAgZHBbaV0gPSBkcFtpLTFdICsgaTsKICAgICAgICAgICAgLy8gTW92ZSBwb3MgdG8gaW5jbHVkZSBhbGwgZGF5cyA8PSBpCiAgICAgICAgICAgIHdoaWxlIChwb3MgPCAoaW50KWRheXMuc2l6ZSgpICYmIGRheXNbcG9zXSA8PSBpKSBwb3MrKzsKICAgICAgICAgICAgLy8gQ2hlY2sgYWxsIGRheXMgPD0gaQogICAgICAgICAgICAvLyBJbnN0ZWFkIG9mIGNoZWNraW5nIGFsbCwgd2UgY2hlY2sgYWxsIGRheXMgaiBpbiBkYXlzIHdoZXJlIGogPD0gaQogICAgICAgICAgICAvLyBUbyBhdm9pZCBPKG5eMiksIHdlIGNhbiBrZWVwIHRyYWNrIG9mIG1pbmltdW0gb2YgZHBbai0xXSAtIHByZWZpeFtqLTFdICsgagogICAgICAgICAgICAvLyBTaW5jZSBkcFtpXSA9IG1pbiBvdmVyIGogPD0gaSBvZiBkcFtqLTFdICsgKHByZWZpeFtpXS1wcmVmaXhbai0xXSkgLSBpID0gbWluKGRwW2otMV0tcHJlZml4W2otMV0gKyBqKSArIHByZWZpeFtpXSAtIGkKICAgICAgICB9CgogICAgICAgIC8vIFByZWNvbXB1dGUgbWluX3ZhbHMgZm9yIGRwW2otMV0tcHJlZml4W2otMV0raiBvdmVyIGFsbCBkYXlzIGogaW4gYXNjZW5kaW5nIG9yZGVyCgogICAgICAgIHZlY3Rvcjxsb25nIGxvbmc+IG1pbl92YWxzKGRheXMuc2l6ZSgpLCBMTE9OR19NQVgpOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgKGludClkYXlzLnNpemUoKTsgaSsrKSB7CiAgICAgICAgICAgIGludCBkID0gZGF5c1tpXTsKICAgICAgICAgICAgbWluX3ZhbHNbaV0gPSBkcFtkLTFdIC0gcHJlZml4W2QtMV0gKyBkOwogICAgICAgIH0KCiAgICAgICAgLy8gQ29tcHV0ZSBwcmVmaXggbWluaW11bSBvZiBtaW5fdmFscwogICAgICAgIGZvciAoaW50IGkgPSAxOyBpIDwgKGludClkYXlzLnNpemUoKTsgaSsrKSB7CiAgICAgICAgICAgIG1pbl92YWxzW2ldID0gbWluKG1pbl92YWxzW2ldLCBtaW5fdmFsc1tpLTFdKTsKICAgICAgICB9CgogICAgICAgIGZvciAoaW50IGkgPSAxOyBpIDw9IG47IGkrKykgewogICAgICAgICAgICAvLyBGaW5kIHJpZ2h0bW9zdCBkYXkgaiA8PSBpCiAgICAgICAgICAgIGludCBpZHggPSAoaW50KSh1cHBlcl9ib3VuZChkYXlzLmJlZ2luKCksIGRheXMuZW5kKCksIGkpIC0gZGF5cy5iZWdpbigpKSAtIDE7CiAgICAgICAgICAgIGlmIChpZHggPj0gMCkgewogICAgICAgICAgICAgICAgbG9uZyBsb25nIGNhbmRpZGF0ZSA9IG1pbl92YWxzW2lkeF0gKyBwcmVmaXhbaV0gLSBpOwogICAgICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSA8IGRwW2ldKSBkcFtpXSA9IGNhbmRpZGF0ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY291dCA8PCBkcFtuXSA8PCAiXG4iOwogICAgfQogICAgcmV0dXJuIDA7Cn0K' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
