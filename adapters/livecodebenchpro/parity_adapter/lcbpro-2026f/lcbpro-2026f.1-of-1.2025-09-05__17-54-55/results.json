{
    "id": "e779817d-623a-4f08-a1ab-59d5203efaee",
    "trial_name": "lcbpro-2026f.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2026f",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2026F)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nIn the Bermart chain of stores, a variety of ice cream is sold. Each type of ice cream has two parameters: price and tastiness.\n\nInitially, there is one store numbered $1$, which sells nothing. You have to process $q$ queries of the following types:\n\n- $1~x$ -- a new store opens, that sells the same types of ice cream as store $x$. It receives the minimum available positive index. The order of the types of ice cream in the new store is the same as in store $x$.\n- $2~x~p~t$ -- a type of ice cream with price $p$ and tastiness $t$ becomes available in store $x$.\n- $3~x$ -- a type of ice cream that was available the longest (appeared the earliest) in store $x$ is removed.\n- $4~x~p$ -- for store $x$, find the maximum total tastiness of a subset of types of ice cream that are sold there, such that the total price does not exceed $p$ (each type can be used in the subset no more than once).\n\n### Input\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 3 \\cdot 10^4$) -- the number of queries.\n\nEach of the following $q$ lines contains a query in the format described in the statement:\n\n- $1~x$;\n- $2~x~p~t$ ($1 \\le p, t \\le 2000$);\n- $3~x$;\n- $4~x~p$ ($1 \\le p \\le 2000$).\n\nAdditional constraints on the input data:\n\n- $x$ in each query does not exceed the current number of stores (that is, $1$ plus the number of type $1$ queries);\n- query type $3$ is not applied to a store that has no types of ice cream;\n- there is at least one query of type $4$.\n\n### Output\n\nFor each query of type $4$, output a single integer -- for store $x$, find the maximum total tastiness of a subset of types of ice cream that are sold there, such that the total price does not exceed $p$ (each type can be used in the subset no more than once).\n\n### Example\n\n#### Input #1\n\n```\n\n12\n\n2 1 5 7\n\n2 1 3 4\n\n4 1 4\n\n4 1 8\n\n4 1 2\n\n1 1\n\n2 2 4 10\n\n4 1 9\n\n4 2 9\n\n3 1\n\n4 1 9\n\n4 2 9\n\n```\n\n#### Output #1\n\n```\n4\n11\n0\n11\n17\n4\n17\n```",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2026f/lcbpro-2026f.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1013,
    "total_output_tokens": 622,
    "trial_started_at": "2025-09-06T01:07:25.720829+00:00",
    "trial_ended_at": "2025-09-06T01:08:18.829742+00:00",
    "agent_started_at": "2025-09-06T01:07:38.816005+00:00",
    "agent_ended_at": "2025-09-06T01:07:54.596482+00:00",
    "test_started_at": "2025-09-06T01:07:58.591905+00:00",
    "test_ended_at": "2025-09-06T01:08:02.852034+00:00"
}