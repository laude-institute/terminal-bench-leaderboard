['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo 'I2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8YWxnb3JpdGhtPgp1c2luZyBuYW1lc3BhY2Ugc3RkOwoKaW50IG1haW4oKSB7CiAgICBpb3M6OnN5bmNfd2l0aF9zdGRpbyhmYWxzZSk7CiAgICBjaW4udGllKG51bGxwdHIpOwoKICAgIGludCB0OwogICAgY2luID4+IHQ7CiAgICB3aGlsZSAodC0tKSB7CiAgICAgICAgbG9uZyBsb25nIHcsIGgsIGEsIGI7CiAgICAgICAgY2luID4+IHcgPj4gaCA+PiBhID4+IGI7CiAgICAgICAgbG9uZyBsb25nIHgxLCB5MSwgeDIsIHkyOwogICAgICAgIGNpbiA+PiB4MSA+PiB5MSA+PiB4MiA+PiB5MjsKCiAgICAgICAgLy8gQ2hlY2sgaWYgc2hlZXRzIG92ZXJsYXAgKGd1YXJhbnRlZWQgbm8gb3ZlcmxhcCBieSBwcm9ibGVtIHN0YXRlbWVudCwgYnV0IHdlIHJlc3BlY3QgaXQgYW55d2F5KQoKICAgICAgICAvLyBDb25kaXRpb246IHNoZWV0cyBjYW5ub3QgYmUgcm90YXRlZAogICAgICAgIC8vIEVhY2ggcm9vZmluZyBzaGVldCBpcyBzaXplIGEgeCBiCiAgICAgICAgLy8gU2hlZXRzIHBsYWNlZCBhdCAoeDEseTEpIGFuZCAoeDIseTIpLCBubyBvdmVybGFwCiAgICAgICAgCiAgICAgICAgLy8gV2Ugd2FudCB0byBjaGVjayBpZiB0aGUgcm9vZiB3IHggaCBjYW4gYmUgdGlsZWQgYnkgYSB4IGIgc2hlZXRzIGNvdmVyaW5nIHRoZSBlbnRpcmUgcm9vZgogICAgICAgIC8vIHdpdGhvdXQgcmVtb3ZpbmcgdGhlIHR3byBwbGFjZWQgc2hlZXRzLgogICAgICAgIC8vIFNoZWV0cyBjYW4gZXh0ZW5kIGJleW9uZCB0aGUgcm9vZiBib3VuZGFyaWVzLgoKICAgICAgICAvLyBTdHJhdGVneToKICAgICAgICAvLyBUaGUgcm9vZiBtdXN0IGJlIGZ1bGx5IGNvdmVyZWQuCiAgICAgICAgLy8gU2luY2Ugc2hlZXRzIGNhbm5vdCBvdmVybGFwIGFuZCBjYW5ub3QgYmUgcm90YXRlZC4KICAgICAgICAvLyBUaGUgc2hlZXRzIGFyZSBheGlzIGFsaWduZWQgd2l0aCBzaXplIGEgeCBiLgogICAgICAgIC8vIFRoZSB0d28gcGxhY2VkIHNoZWV0cyBwYXJ0aWFsbHkgY292ZXIgdGhlIHJvb2YuCiAgICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIHJvb2YgbXVzdCBiZSBjb3ZlcmVkIGJ5IGFkZGl0aW9uYWwgc2hlZXRzLgoKICAgICAgICAvLyBLZXkgaW5zaWdodDoKICAgICAgICAvLyBCZWNhdXNlIHNoZWV0cyBjYW5ub3QgYmUgcm90YXRlZCBhbmQgbXVzdCBjb3ZlciB0aGUgcm9vZiBmdWxseSwKICAgICAgICAvLyB0aGUgcm9vZiBtdXN0IGJlIGNvdmVyZWQgYnkgYW4gaW50ZWdlciBudW1iZXIgb2Ygc2hlZXRzIGluIHdpZHRoIGFuZCBoZWlnaHQ6CiAgICAgICAgLy8gbnVtYmVyX3cgPSBjZWlsKHcgLyBhKSwgbnVtYmVyX2ggPSBjZWlsKGggLyBiKQogICAgICAgIC8vIHRvdGFsIG51bWJlciBvZiBzaGVldHMgPSBudW1iZXJfdyAqIG51bWJlcl9oCgogICAgICAgIC8vIFRoZSB0d28gc2hlZXRzIGFscmVhZHkgcGxhY2VkIG9jY3VweSBwb3NpdGlvbnMgKHgxLHkxKSBhbmQgKHgyLHkyKSwgZWFjaCBjb3ZlcnMgW3gseCthKSB4IFt5LHkrYikKICAgICAgICAvLyBUaGV5IGRvIG5vdCBvdmVybGFwLgoKICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0d28gc2hlZXRzIGFsaWduIHdpdGggdGhlIGdyaWQgb2Ygc2hlZXRzIGNvdmVyaW5nIHRoZSByb29mLgogICAgICAgIC8vIFRoZSBncmlkIGlzIGF0IG11bHRpcGxlcyBvZiBhIGluIHggYW5kIG11bHRpcGxlcyBvZiBiIGluIHkuCgogICAgICAgIC8vIElmIHRoZSB0d28gc2hlZXRzIGFyZSBwbGFjZWQgYXQgcG9zaXRpb25zIHRoYXQgYXJlIG5vdCBhbGlnbmVkIHRvIHRoaXMgZ3JpZCwgdGhlbiBpdCdzIGltcG9zc2libGUuCiAgICAgICAgLy8gQmVjYXVzZSBzaGVldHMgY2Fubm90IGJlIHJvdGF0ZWQsIGFuZCBjYW5ub3QgcGFydGlhbGx5IGNvdmVyIGEgdGlsZS4KCiAgICAgICAgLy8gU28gY2hlY2sgaWYgeDEgYW5kIHgyIGFyZSBtdWx0aXBsZXMgb2YgYSAobW9kIGEgPT0gMCBvciBtb2QgYSA9PSAwKSBhbmQgeTEgYW5kIHkyIG11bHRpcGxlcyBvZiBiLgoKICAgICAgICAvLyBUaGVuIGNoZWNrIGlmIHRoZSB0d28gc2hlZXRzIGFyZSBkaXN0aW5jdCBncmlkIHBvc2l0aW9ucyAobm8gb3ZlcmxhcCksIGFuZCB0aGF0IHRoZSBlbnRpcmUgZ3JpZCBjb3ZlcnMgdGhlIHJvb2YuCgogICAgICAgIC8vIEFkZGl0aW9uYWxseSwgY2hlY2sgaWYgdGhlIHR3byBzaGVldHMgcGFydGlhbGx5IGNvdmVyIHRoZSByb29mIChnaXZlbikuCgogICAgICAgIC8vIEltcGxlbWVudGF0aW9uOgogICAgICAgIC8vIENoZWNrIGlmIHgxICUgYSA9PSAwLCB5MSAlIGIgPT0gMCwgeDIgJSBhID09IDAsIHkyICUgYiA9PSAwCiAgICAgICAgLy8gVXNlIG1vZHVsbyB3aXRoIGhhbmRsaW5nIG5lZ2F0aXZlIHZhbHVlcy4KCiAgICAgICAgYXV0byBtb2QgPSBbXShsb25nIGxvbmcgeCwgbG9uZyBsb25nIG0pIC0+IGxvbmcgbG9uZyB7CiAgICAgICAgICAgIGxvbmcgbG9uZyByID0geCAlIG07CiAgICAgICAgICAgIGlmIChyIDwgMCkgciArPSBtOwogICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICB9OwoKICAgICAgICBib29sIGFsaWduZWQgPSAobW9kKHgxLGEpID09IDApICYmIChtb2QoeTEsYikgPT0gMCkgJiYgKG1vZCh4MixhKSA9PSAwKSAmJiAobW9kKHkyLGIpID09IDApOwoKICAgICAgICBpZiAoIWFsaWduZWQpIHsKICAgICAgICAgICAgY291dCA8PCAiTm9cbiI7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgLy8gQ2hlY2sgbm9uLW92ZXJsYXAgKGd1YXJhbnRlZWQgYnkgcHJvYmxlbSwgYnV0IGxldCdzIGJlIHNhZmUpCiAgICAgICAgYm9vbCBvdmVybGFwID0gZmFsc2U7CiAgICAgICAgaWYgKHgxIDwgeDIgKyBhICYmIHgyIDwgeDEgKyBhICYmIHkxIDwgeTIgKyBiICYmIHkyIDwgeTEgKyBiKSB7CiAgICAgICAgICAgIG92ZXJsYXAgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAob3ZlcmxhcCkgewogICAgICAgICAgICBjb3V0IDw8ICJOb1xuIjsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSB0d28gc2hlZXRzIHBhcnRpYWxseSBjb3ZlciB0aGUgcm9vZgogICAgICAgIC8vIFRoYXQgbWVhbnMgdGhlaXIgcmVjdGFuZ2xlcyBpbnRlcnNlY3Qgd2l0aCB0aGUgcm9vZiByZWN0YW5nbGUgWzAsdykgeCBbMCxoKQogICAgICAgIGF1dG8gaW50ZXJzZWN0ID0gW10obG9uZyBsb25nIHgsIGxvbmcgbG9uZyB5LCBsb25nIGxvbmcgYSwgbG9uZyBsb25nIGIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nIGxvbmcgdywgbG9uZyBsb25nIGgpIC0+IGJvb2wgewogICAgICAgICAgICAvLyBDaGVjayBpZiBbeCx4K2EpIGludGVyc2VjdHMgd2l0aCBbMCx3KSBhbmQgW3kseStiKSBpbnRlcnNlY3RzIHdpdGggWzAsaCkKICAgICAgICAgICAgcmV0dXJuICh4ICsgYSA+IDAgJiYgeCA8IHcgJiYgeSArIGIgPiAwICYmIHkgPCBoKTsKICAgICAgICB9OwoKICAgICAgICBpZiAoIWludGVyc2VjdCh4MSwgeTEsIGEsIGIsIHcsIGgpIHx8ICFpbnRlcnNlY3QoeDIsIHkyLCBhLCBiLCB3LCBoKSkgewogICAgICAgICAgICBjb3V0IDw8ICJOb1xuIjsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBDaGVjayBpZiB0b3RhbCBudW1iZXIgb2Ygc2hlZXRzIG5lZWRlZCBjb3ZlciB0aGUgcm9vZgogICAgICAgIC8vIE51bWJlciBvZiBzaGVldHMgaW4gd2lkdGggYW5kIGhlaWdodAogICAgICAgIGxvbmcgbG9uZyBuX3cgPSAodyArIGEgLSAxKSAvIGE7CiAgICAgICAgbG9uZyBsb25nIG5faCA9IChoICsgYiAtIDEpIC8gYjsKCiAgICAgICAgLy8gQmVjYXVzZSBzaGVldHMgY2FuJ3Qgb3ZlcmxhcCwgZWFjaCBzaGVldCBjb3JyZXNwb25kcyB0byBvbmUgZ3JpZCBjZWxsCiAgICAgICAgLy8gVGhlIHR3byBnaXZlbiBzaGVldHMgb2NjdXB5IHR3byBkaXN0aW5jdCBncmlkIGNlbGxzCgogICAgICAgIC8vIFRoZSBncmlkIGNlbGxzIGFyZSBhdCBwb3NpdGlvbnMgKGkqYSwgaipiKSwgaT0wLi5uX3ctMSwgaj0wLi5uX2gtMQogICAgICAgIC8vIENoZWNrIGlmICh4MSx5MSkgYW5kICh4Mix5MikgYXJlIHdpdGhpbiB0aGUgZ3JpZAogICAgICAgIGF1dG8gaW5fZ3JpZCA9IFsmXShsb25nIGxvbmcgeCwgbG9uZyBsb25nIHkpIHsKICAgICAgICAgICAgaWYgKHggPCAwIHx8IHkgPCAwKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGlmICh4ID49IG5fdyAqIGEgfHwgeSA+PSBuX2ggKiBiKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH07CgogICAgICAgIGlmICghaW5fZ3JpZCh4MSwgeTEpIHx8ICFpbl9ncmlkKHgyLCB5MikpIHsKICAgICAgICAgICAgLy8gUGxhY2VkIHNoZWV0cyBhcmUgb3V0c2lkZSB0aGUgZ3JpZCBuZWVkZWQgdG8gY292ZXIgdGhlIHJvb2YsIGJ1dCBwcm9ibGVtIGFsbG93cyBzaGVldHMgdG8gZXh0ZW5kIGJleW9uZCBib3VuZGFyaWVzCiAgICAgICAgICAgIC8vIFNvIHRoaXMgaXMgYWxsb3dlZC4KICAgICAgICAgICAgLy8gU28gbm8gcHJvYmxlbSBoZXJlLgogICAgICAgIH0KCiAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgdHdvIHNoZWV0cyBhcmUgZGlzdGluY3QgZ3JpZCBjZWxscwogICAgICAgIGlmICh4MSA9PSB4MiAmJiB5MSA9PSB5MikgewogICAgICAgICAgICBjb3V0IDw8ICJOb1xuIjsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBTaW5jZSBzaGVldHMgY2FuIGV4dGVuZCBiZXlvbmQgdGhlIHJvb2YgYm91bmRhcmllcywgaXQncyBzdWZmaWNpZW50IHRoYXQgdGhlIGdyaWQgY292ZXJzIHRoZSByb29mLgogICAgICAgIC8vIFRoZSB0d28gc2hlZXRzIG9jY3VweSB0d28gZGlzdGluY3QgZ3JpZCBjZWxscy4KICAgICAgICAvLyBUaGUgcmVzdCBvZiB0aGUgZ3JpZCBjZWxscyBjYW4gYmUgcGxhY2VkIHRvIGNvdmVyIHRoZSByb29mIGZ1bGx5LgoKICAgICAgICAvLyBUaGVyZWZvcmUsIGFuc3dlciBpcyBZZXMuCgogICAgICAgIGNvdXQgPDwgIlllc1xuIjsKICAgIH0KCiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
