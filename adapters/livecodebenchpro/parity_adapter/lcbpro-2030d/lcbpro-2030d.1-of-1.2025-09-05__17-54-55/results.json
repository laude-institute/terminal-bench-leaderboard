{
    "id": "b3a66c10-8582-4bde-b1dd-6daf2905e927",
    "trial_name": "lcbpro-2030d.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2030d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2030D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nQED is given a permutation$^{\\text{∗}}$ $p$ of length $n$. He also has a string $s$ of length $n$ containing only characters $\\texttt{L}$ and $\\texttt{R}$. QED only likes permutations that are sorted in non-decreasing order. To sort $p$, he can select any of the following operations and perform them any number of times:\n\n- Choose an index $i$ such that $s_i = \\texttt{L}$. Then, swap $p_i$ and $p_{i-1}$. It is guaranteed that $s_1 \\neq \\texttt{L}$.\n- Choose an index $i$ such that $s_i = \\texttt{R}$. Then, swap $p_i$ and $p_{i+1}$. It is guaranteed that $s_n \\neq \\texttt{R}$.\n\nHe is also given $q$ queries. In each query, he selects an index $i$ and changes $s_i$ from $\\texttt{L}$ to $\\texttt{R}$ (or from $\\texttt{R}$ to $\\texttt{L}$). Note that the changes are persistent.\n\nAfter each query, he asks you if it is possible to sort $p$ in non-decreasing order by performing the aforementioned operations any number of times. Note that before answering each query, the permutation $p$ is reset to its original form.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) -- the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($3 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq q \\leq 2 \\cdot 10^5$) -- the length of the permutation and the number of queries.\n\nThe following line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq n$, $p$ is a permutation).\n\nThe following line contains $n$ characters $s_1s_2 \\ldots s_n$. It is guaranteed that $s_i$ is either $\\texttt{L}$ or $\\texttt{R}$, $s_1 = \\texttt{R}$, and $s_n = \\texttt{L}$.\n\nThe following $q$ lines contain an integer $i$ ($2 \\leq i \\leq n-1$), denoting that $s_i$ is changed from $\\texttt{L}$ to $\\texttt{R}$ (or from $\\texttt{R}$ to $\\texttt{L}$).\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output \"YES\" (without quotes) if it is possible, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 3\n\n1 4 2 5 3\n\nRLRLL\n\n2\n\n4\n\n3\n\n8 5\n\n1 5 2 4 8 3 6 7\n\nRRLLRRRL\n\n4\n\n3\n\n5\n\n3\n\n4\n\n6 2\n\n1 2 3 4 5 6\n\nRLRLRL\n\n4\n\n5\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first testcase, $s = \\texttt{RRRLL}$ after the first query. QED may sort $p$ using the following operations:\n\n- Initially, $p = [1,4,2,5,3]$.\n- Select $i = 2$ and swap $p_2$ with $p_{3}$. Now, $p = [1,2,4,5,3]$.\n- Select $i = 5$ and swap $p_5$ with $p_{4}$. Now, $p = [1,2,4,3,5]$.\n- Select $i = 4$ and swap $p_4$ with $p_{3}$. Now, $p = [1,2,3,4,5]$, which is in non-decreasing order.\n\nIt can be shown that it is impossible to sort the array after all three updates of the first testcase.",
    "is_resolved": false,
    "failure_mode": "agent_timeout",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2030d/lcbpro-2030d.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": null,
    "total_output_tokens": null,
    "trial_started_at": "2025-09-06T01:45:12.115248+00:00",
    "trial_ended_at": "2025-09-06T01:49:55.735367+00:00",
    "agent_started_at": "2025-09-06T01:45:36.568318+00:00",
    "agent_ended_at": "2025-09-06T01:49:25.061179+00:00",
    "test_started_at": "2025-09-06T01:49:29.879836+00:00",
    "test_ended_at": "2025-09-06T01:49:33.332610+00:00"
}