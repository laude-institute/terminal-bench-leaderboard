['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIGNpbi50aWUobnVsbHB0cik7CgogICAgaW50IHQ7IGNpbiA+PiB0OwogICAgd2hpbGUgKHQtLSkgewogICAgICAgIGludCBuLCBxOyBjaW4gPj4gbiA+PiBxOwogICAgICAgIHZlY3RvcjxpbnQ+IHAobisxKTsKICAgICAgICBmb3IgKGludCBpID0gMTsgaSA8PSBuOyBpKyspIGNpbiA+PiBwW2ldOwogICAgICAgIHN0cmluZyBzOyBjaW4gPj4gczsKCiAgICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiB0aGUgcGVybXV0YXRpb24gcCBjYW4gYmUgc29ydGVkIGJ5IHN3YXBwaW5nCiAgICAgICAgLy8gb25seSB3aGVyZSBhbGxvd2VkIGJ5IHMuCiAgICAgICAgLy8gVGhlIG9wZXJhdGlvbnMgYWxsb3cgc3dhcHBpbmcgcF9pIHdpdGggcF97aS0xfSBpZiBzW2ldID0gJ0wnIGFuZCBzd2FwcGluZyBwX2kgd2l0aCBwX3tpKzF9IGlmIHNbaV0gPSAnUicuCiAgICAgICAgLy8gVGhpcyBlZmZlY3RpdmVseSBtZWFucyB0aGF0IHRoZSBhcnJheSBjYW4gYmUgcmVhcnJhbmdlZCBmcmVlbHkgaW5zaWRlIGNvbm5lY3RlZCBjb21wb25lbnRzIGZvcm1lZCBieQogICAgICAgIC8vIHRoZSBlZGdlcyB3aGVyZSBzd2FwcGluZyBpcyBwb3NzaWJsZS4KICAgICAgICAvLyBXZSBjYW4gbW9kZWwgdGhlIGFsbG93ZWQgc3dhcHMgYXMgZWRnZXMgaW4gYSBncmFwaCBhbmQgY2hlY2sgaWYgc29ydGluZyBpcyBwb3NzaWJsZS4KCiAgICAgICAgLy8gQ29uc3RydWN0IGFkamFjZW5jeSBiYXNlZCBvbiBzOgogICAgICAgIC8vIEZvciBlYWNoIGkgZnJvbSAxIHRvIG4tMToKICAgICAgICAvLyBpZiBzW2krMV0gPT0gJ0wnLCB0aGVuIGNhbiBzd2FwIHBvc2l0aW9ucyBpIGFuZCBpKzEgKGJlY2F1c2UgZnJvbSBpKzEgd2UgY2FuIHN3YXAgd2l0aCBpIGlmIHNbaSsxXSA9ICdMJykKICAgICAgICAvLyBpZiBzW2ldID09ICdSJywgdGhlbiBjYW4gc3dhcCBwb3NpdGlvbnMgaSBhbmQgaSsxIChiZWNhdXNlIGZyb20gaSB3ZSBjYW4gc3dhcCB3aXRoIGkrMSBpZiBzW2ldID0gJ1InKQogICAgICAgIC8vIFNvIGVkZ2VzIGJldHdlZW4gaSBhbmQgaSsxIGV4aXN0IGlmIHNbaV0gPT0gJ1InIG9yIHNbaSsxXSA9PSAnTCcKCiAgICAgICAgdmVjdG9yPHZlY3RvcjxpbnQ+PiBhZGoobisxKTsKICAgICAgICBmb3IgKGludCBpID0gMTsgaSA8IG47IGkrKykgewogICAgICAgICAgICBpZiAoc1tpLTFdID09ICdSJyB8fCBzW2ldID09ICdMJykgewogICAgICAgICAgICAgICAgYWRqW2ldLnB1c2hfYmFjayhpKzEpOwogICAgICAgICAgICAgICAgYWRqW2krMV0ucHVzaF9iYWNrKGkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2ZWN0b3I8Ym9vbD4gdmlzaXRlZChuKzEsIGZhbHNlKTsKICAgICAgICB2ZWN0b3I8aW50PiBjb21wOwoKICAgICAgICBhdXRvIGRmcyA9IFsmXShpbnQgc3RhcnQsIGF1dG8mJiBkZnNfcmVmKSAtPiB2b2lkIHsKICAgICAgICAgICAgdmlzaXRlZFtzdGFydF0gPSB0cnVlOwogICAgICAgICAgICBjb21wLnB1c2hfYmFjayhzdGFydCk7CiAgICAgICAgICAgIGZvciAoYXV0byAmbnggOiBhZGpbc3RhcnRdKSB7CiAgICAgICAgICAgICAgICBpZiAoIXZpc2l0ZWRbbnhdKSBkZnNfcmVmKG54LCBkZnNfcmVmKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIC8vIFdlJ2xsIGZpbmQgY29ubmVjdGVkIGNvbXBvbmVudHMgaW4gdGhlIGdyYXBoIGZvcm1lZCBieSB0aGUgZWRnZXMKICAgICAgICAvLyBXaXRoaW4gZWFjaCBjb25uZWN0ZWQgY29tcG9uZW50LCB0aGUgZWxlbWVudHMgb2YgcCBjYW4gYmUgcmVhcnJhbmdlZCBhcmJpdHJhcmlseQogICAgICAgIC8vIFNvIGZvciBlYWNoIGNvbm5lY3RlZCBjb21wb25lbnQsIHdlIGNoZWNrIGlmIHNvcnRpbmcgcCBpbiB0aGF0IGNvbXBvbmVudCBpcyBwb3NzaWJsZQoKICAgICAgICAvLyBNYWtlIGEgY29weSBvZiBwIHNvcnRlZCBnbG9iYWxseQogICAgICAgIHZlY3RvcjxpbnQ+IHBfc29ydGVkKHAuYmVnaW4oKSsxLCBwLmVuZCgpKTsKICAgICAgICBzb3J0KHBfc29ydGVkLmJlZ2luKCksIHBfc29ydGVkLmVuZCgpKTsKCiAgICAgICAgLy8gV2UnbGwgbWFpbnRhaW4gcyBhcyBtdXRhYmxlIHNpbmNlIHF1ZXJpZXMgY2hhbmdlIGl0CiAgICAgICAgLy8gV2UnbGwgcHJvY2VzcyBxdWVyaWVzIG9uZSBieSBvbmUKCiAgICAgICAgLy8gV2Ugd2lsbCBtYWludGFpbiB0aGUgZWRnZXMgYW5kIGNvbm5lY3Rpdml0eSBkeW5hbWljYWxseS4KICAgICAgICAvLyBCdXQgc2luY2UgZWFjaCBxdWVyeSBmbGlwcyBzW2ldIGJldHdlZW4gTCBhbmQgUiwgdGhlIGVkZ2VzIGJldHdlZW4gaS0xIGFuZCBpIGFuZCBiZXR3ZWVuIGkgYW5kIGkrMSBtYXkgY2hhbmdlCiAgICAgICAgLy8gQnV0IHNpbmNlIG9ubHkgc1tpXSBjaGFuZ2VzLCB3ZSBvbmx5IG5lZWQgdG8gdXBkYXRlIGVkZ2VzIGludm9sdmluZyBwb3NpdGlvbnMgaS0xIGFuZCBpLCBhbmQgaSBhbmQgaSsxCiAgICAgICAgLy8gQWN0dWFsbHkgZWRnZXMgYXJlIGJldHdlZW4gaSBhbmQgaSsxIGlmIHNbaV0gPT0gJ1InIG9yIHNbaSsxXSA9PSAnTCcKCiAgICAgICAgLy8gQmVjYXVzZSB1cGRhdGVzIGFuZCBxdWVyaWVzIGFyZSBsYXJnZSwgd2UgbmVlZCBlZmZpY2llbnQgc3VwcG9ydC4KICAgICAgICAvLyBXZSdsbCB1c2UgYSBEU1UgKGRpc2pvaW50IHNldCB1bmlvbikgdG8gbWFpbnRhaW4gY29ubmVjdGVkIGNvbXBvbmVudHMuCgogICAgICAgIHN0cnVjdCBEU1UgewogICAgICAgICAgICB2ZWN0b3I8aW50PiBwYXJlbnQsIHNpemU7CiAgICAgICAgICAgIERTVShpbnQgbikgOiBwYXJlbnQobisxKSwgc2l6ZShuKzEsMSkgewogICAgICAgICAgICAgICAgZm9yIChpbnQgaT0xO2k8PW47aSsrKSBwYXJlbnRbaV09aTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpbnQgZmluZChpbnQgeCkgewogICAgICAgICAgICAgICAgd2hpbGUgKHBhcmVudFt4XSE9eCkgewogICAgICAgICAgICAgICAgICAgIHBhcmVudFt4XT1wYXJlbnRbcGFyZW50W3hdXTsKICAgICAgICAgICAgICAgICAgICB4PXBhcmVudFt4XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB4OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJvb2wgdW5pdGUoaW50IGEsaW50IGIpIHsKICAgICAgICAgICAgICAgIGE9ZmluZChhKTsgYj1maW5kKGIpOwogICAgICAgICAgICAgICAgaWYgKGE9PWIpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIGlmIChzaXplW2FdPHNpemVbYl0pIHN3YXAoYSxiKTsKICAgICAgICAgICAgICAgIHBhcmVudFtiXT1hOwogICAgICAgICAgICAgICAgc2l6ZVthXSs9c2l6ZVtiXTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgLy8gQnVpbGQgRFNVIGZyb20gaW5pdGlhbCBzCiAgICAgICAgRFNVIGRzdShuKTsKICAgICAgICBmb3IgKGludCBpPTE7IGk8bjsgaSsrKSB7CiAgICAgICAgICAgIGlmIChzW2ktMV0gPT0gJ1InIHx8IHNbaV0gPT0gJ0wnKSB7CiAgICAgICAgICAgICAgICBkc3UudW5pdGUoaSwgaSsxKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gRm9yIGVhY2ggY29tcG9uZW50LCB3ZSB3aWxsIHN0b3JlIHRoZSBlbGVtZW50cyBvZiBwIGFuZCBzb3J0ZWQgcAogICAgICAgIC8vIFRvIGFuc3dlciBxdWVyeSBmYXN0LCB3ZSBuZWVkIHRvIGNoZWNrIGlmIGZvciBlYWNoIGNvbXBvbmVudCwgdGhlIG11bHRpc2V0IG9mIHAgZWxlbWVudHMgbWF0Y2hlcyB0aGUgbXVsdGlzZXQgb2Ygc29ydGVkIGVsZW1lbnRzCiAgICAgICAgLy8gV2UgcHJlY29tcHV0ZSBmb3IgdGhlIGluaXRpYWwgcwoKICAgICAgICAvLyBXZSdsbCBzdG9yZSBmb3IgZWFjaCBjb21wb25lbnQgcm9vdDoKICAgICAgICAvLyAtIGEgdmVjdG9yIG9mIGluZGljZXMgaW4gdGhhdCBjb21wb25lbnQKICAgICAgICAvLyBXZSdsbCBhbHNvIG5lZWQgdG8gYmUgYWJsZSB0byB1cGRhdGUgRFNVIHdoZW4gZWRnZXMgYXJlIGFkZGVkIG9yIHJlbW92ZWQKCiAgICAgICAgLy8gQnV0IGVkZ2VzIGNoYW5nZSBvbiBxdWVyaWVzOiBlYWNoIHF1ZXJ5IGZsaXBzIHNbaV0gYmV0d2VlbiBMIGFuZCBSCiAgICAgICAgLy8gU28gZWRnZXMgYmV0d2VlbiBpLTEgYW5kIGksIGFuZCBpIGFuZCBpKzEgbWF5IGNoYW5nZS4KCiAgICAgICAgLy8gSG93ZXZlciwgdGhlIHByb2JsZW0gc3RhdGVzIHRoYXQgcXVlcmllcyBvbmx5IGZsaXAgc1tpXSBmb3IgaSBpbiBbMixuLTFdCgogICAgICAgIC8vIEZvciBlZGdlIGJldHdlZW4gaSBhbmQgaSsxOgogICAgICAgIC8vIGVkZ2UgZXhpc3RzIGlmIHNbaV09PSdSJyBvciBzW2krMV09PSdMJwoKICAgICAgICAvLyBPbiBmbGlwcGluZyBzW2ldLCBlZGdlcyBpbnZvbHZpbmcgaS0xIGFuZCBpLCBhbmQgaSBhbmQgaSsxIG1heSBjaGFuZ2UKCiAgICAgICAgLy8gV2UgY2FuIG1haW50YWluIGVkZ2VzIGFuZCBEU1UgZHluYW1pY2FsbHkgYnkgcmVtb3ZpbmcgYW5kIGFkZGluZyBlZGdlcy4KICAgICAgICAvLyBEU1UgZG9lc24ndCBzdXBwb3J0IGVkZ2UgcmVtb3ZhbHMgZWZmaWNpZW50bHksIHNvIHdlIG5lZWQgYSBkaWZmZXJlbnQgYXBwcm9hY2guCgogICAgICAgIC8vIFNpbmNlIHdlIG9ubHkgZmxpcCBlZGdlcyBvbiBzW2ldLCBhbmQgZWRnZXMgYXJlIGJldHdlZW4gaSBhbmQgaSsxIGlmIHNbaV09PSdSJyBvciBzW2krMV09PSdMJwogICAgICAgIC8vIFRoZSBlZGdlcyBhZmZlY3RlZCBhcmUgb25seSBiZXR3ZWVuIGktMSBhbmQgaSBhbmQgYmV0d2VlbiBpIGFuZCBpKzEKCiAgICAgICAgLy8gVGhlIHByb2JsZW0gaXMgdGhhdCBEU1UgY2Fubm90IHJlbW92ZSBlZGdlcy4KCiAgICAgICAgLy8gQWx0ZXJuYXRpdmUgYXBwcm9hY2g6CiAgICAgICAgLy8gV2UgY2FuIG5vdGUgdGhhdCB0aGUgY29ubmVjdGl2aXR5IG9ubHkgY2hhbmdlcyBieSBmbGlwcGluZyBlZGdlcyBhdCBwb3NpdGlvbnMgaS0xIGFuZCBpLgogICAgICAgIC8vIEJ1dCBiZWNhdXNlIHJlbW92YWwgaXMgaGFyZCwgd2UgY2FuIHRyeSB0byBtYWludGFpbiBjb25uZWN0aXZpdHkgYnkgY2hlY2tpbmcgZm9yIHByZXNlbmNlIG9mIGEgcGFpciBvZiBjb25zZWN1dGl2ZSBpbmRpY2VzIGkgYW5kIGkrMSBzdWNoIHRoYXQgc1tpXT09J1InIG9yIHNbaSsxXT09J0wnCgogICAgICAgIC8vIFdlIGNhbiBrZWVwIGFuIGFycmF5IG9mIGJvb2xlYW5zIGlzX2Nvbm5lY3RlZFtpXSA9IChzW2ldPT0nUicgfHwgc1tpKzFdPT0nTCcpIGZvciBpIGluIFsxLG4tMV0KCiAgICAgICAgLy8gVGhlbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudHMgYXJlIGZvcm1lZCBieSBjb25zZWN1dGl2ZSBpbmRpY2VzIGxpbmtlZCBieSBpc19jb25uZWN0ZWQuCgogICAgICAgIC8vIFNvIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50cyBhcmUgaW50ZXJ2YWxzIHdoZXJlIGlzX2Nvbm5lY3RlZFtpXSBpcyB0cnVlIGZvciBhbGwgaSBpbnNpZGUsIGFuZCBmYWxzZSBhdCBib3JkZXJzLgoKICAgICAgICAvLyBTbyB0aGUgYXJyYXkgaXMgcGFydGl0aW9uZWQgaW50byBpbnRlcnZhbHMgc2VwYXJhdGVkIGJ5IGZhbHNlIGVkZ2VzLgoKICAgICAgICAvLyBPbiBlYWNoIHF1ZXJ5LCBvbmx5IHNbaV0gZmxpcHMsIHNvIGlzX2Nvbm5lY3RlZFtpLTFdIGFuZCBpc19jb25uZWN0ZWRbaV0gbWF5IGNoYW5nZS4KCiAgICAgICAgLy8gV2UgY2FuIG1haW50YWluIGEgc2VnbWVudCB0cmVlIG9yIGJhbGFuY2VkIHRyZWUgdG8gbWFpbnRhaW4gaW50ZXJ2YWxzLgoKICAgICAgICAvLyBCdXQgc2luY2UgaW50ZXJ2YWxzIGFyZSBjb250aWd1b3VzLCBpdCBpcyBlbm91Z2ggdG8gbWFpbnRhaW4gYSBiYWxhbmNlZCBzdHJ1Y3R1cmUgKGUuZy4sIGJhbGFuY2VkIHRyZWUpIG9yIHNlZ21lbnQgdHJlZSBvciBzaW1wbHkgbWFpbnRhaW4gYSBiYWxhbmNlZCB0cmVlIG9mIGludGVydmFscy4KCiAgICAgICAgLy8gV2UnbGwgbWFpbnRhaW4gYSBiYWxhbmNlZCB0cmVlIG9mIGludGVydmFscyByZXByZXNlbnRpbmcgY29ubmVjdGVkIGNvbXBvbmVudHMuCgogICAgICAgIC8vIEZvciBlYWNoIGNvbm5lY3RlZCBjb21wb25lbnQsIHdlIG5lZWQgdG8gdmVyaWZ5IGlmIHRoZSBtdWx0aXNldCBvZiBwIGVsZW1lbnRzIGluIHRoYXQgaW50ZXJ2YWwgbWF0Y2hlcyB0aGUgc29ydGVkIHAgZWxlbWVudHMgaW4gdGhhdCBpbnRlcnZhbC4KCiAgICAgICAgLy8gQmVjYXVzZSBwIGlzIGZpeGVkLCBhbmQgdGhlIGludGVydmFscyBhcmUgY29udGlndW91cywgd2UgY2FuIHByZWNvbXB1dGUgcHJlZml4IHN1bXMgb3IgcHJlZml4IGZyZXF1ZW5jeSBhcnJheXMuCgogICAgICAgIC8vIEJ1dCBzaW5jZSBwIGlzIGEgcGVybXV0YXRpb24sIHdlIGNhbiBzdG9yZSB0aGUgaW5kaWNlcyBvZiBwJ3MgZWxlbWVudHMuCgogICAgICAgIC8vIExldCdzIHByb2NlZWQgd2l0aCBhbiBpbnRlcnZhbCBhcHByb2FjaDoKCiAgICAgICAgLy8gV2UnbGwgbWFpbnRhaW4gYW4gb3JkZXJlZCBzZXQgb2YgaW50ZXJ2YWxzIFtsLHJdCgogICAgICAgIC8vIEluaXRpYWxseSwgaW50ZXJ2YWxzIGFyZSBmb3JtZWQgYnkgc3BsaXR0aW5nIGF0IGVkZ2VzIHdoZXJlIGlzX2Nvbm5lY3RlZFtpXSA9PSBmYWxzZQoKICAgICAgICAvLyBPbiBxdWVyeSwgd2UgZmxpcCBzW2ldLCB1cGRhdGUgaXNfY29ubmVjdGVkW2ktMV0gYW5kIGlzX2Nvbm5lY3RlZFtpXQoKICAgICAgICAvLyBGb3IgZWFjaCBjaGFuZ2VkIGVkZ2UsIGlmIGl0IGNoYW5nZXMgZnJvbSBmYWxzZSB0byB0cnVlLCBtZXJnZSBpbnRlcnZhbHMKICAgICAgICAvLyBpZiBpdCBjaGFuZ2VzIGZyb20gdHJ1ZSB0byBmYWxzZSwgc3BsaXQgaW50ZXJ2YWxzCgogICAgICAgIC8vIFRoZW4gZm9yIGVhY2ggcXVlcnksIHdlIGNoZWNrIGlmIGZvciBhbGwgaW50ZXJ2YWxzLCB0aGUgc3ViYXJyYXkgb2YgcCBhdCB0aGF0IGludGVydmFsIGNhbiBiZSBzb3J0ZWQgdG8gdGhlIHNvcnRlZCBwIHN1YmFycmF5IGF0IHRoYXQgaW50ZXJ2YWwuCgogICAgICAgIC8vIFNpbmNlIHAgYW5kIHBfc29ydGVkIGFyZSBmaXhlZCwgY2hlY2tpbmcgaWYgbXVsdGlzZXRzIGFyZSBlcXVhbCByZWR1Y2VzIHRvIGNoZWNraW5nIGlmIHNldHMgb2YgZWxlbWVudHMgYXJlIGVxdWFsIGluIHRoYXQgaW50ZXJ2YWwuCgogICAgICAgIC8vIEJ1dCBzaW5jZSBwIGlzIGEgcGVybXV0YXRpb24sIGJvdGggc3ViYXJyYXlzIGFyZSB0aGUgc2FtZSBsZW5ndGggYW5kIGNvbnRhaW4gc2FtZSBlbGVtZW50cyBpZiB0aGUgc29ydGVkIHAgc3ViYXJyYXkgaXMgdGhlIHNvcnRlZCB2ZXJzaW9uIG9mIHAgc3ViYXJyYXkuCgogICAgICAgIC8vIFNvIHRvIGNoZWNrIHF1aWNrbHksIGZvciBlYWNoIGludGVydmFsLCB3ZSBjYW4gY2hlY2sgaWYgdGhlIHNvcnRlZCBwIHN1YmFycmF5IGVxdWFscyB0aGUgcCBzdWJhcnJheSBzb3J0ZWQuCgogICAgICAgIC8vIEJlY2F1c2UgcCBpcyBmaXhlZCwgcF9zdWJhcnJheSBzb3J0ZWQgZXF1YWxzIHRoZSBzb3J0ZWQgcCBzdWJhcnJheS4KCiAgICAgICAgLy8gU28gc29ydGluZyBwX3N1YmFycmF5IHNob3VsZCBlcXVhbCBwX3NvcnRlZCBzdWJhcnJheS4KCiAgICAgICAgLy8gU28gZm9yIGVhY2ggaW50ZXJ2YWwsIHdlIGNhbjoKICAgICAgICAvLyAtIGV4dHJhY3QgaW5kaWNlcwogICAgICAgIC8vIC0gY2hlY2sgaWYgcCBzdWJhcnJheSBzb3J0ZWQgZXF1YWxzIHBfc29ydGVkIHN1YmFycmF5CgogICAgICAgIC8vIFNpbmNlIHF1ZXJpZXMgY2FuIGJlIHVwIHRvIDJlNSBhbmQgdG90YWwgbiBpcyAyZTUsIHNvcnRpbmcgZWFjaCBzdWJhcnJheSBldmVyeSBxdWVyeSBpcyB0b28gc2xvdy4KCiAgICAgICAgLy8gSW5zdGVhZCwgd2UgY2FuIHByZWNvbXB1dGUgZm9yIHAgYW5kIHBfc29ydGVkIHRoZSBwcmVmaXggc3VtcyBvZiB2YWx1ZXMuCgogICAgICAgIC8vIFNpbmNlIHAgaXMgYSBwZXJtdXRhdGlvbiBvZiAxLi5uLCB0aGUgc3VtIG9mIGVsZW1lbnRzIGluIGFuIGludGVydmFsIGlzIHVuaXF1ZS4KCiAgICAgICAgLy8gRm9yIGVhY2ggaW50ZXJ2YWwgW2wscl06IHN1bV9wID0gcHJlZml4X3Bbcl0gLSBwcmVmaXhfcFtsLTFdLCBzdW1fc29ydGVkID0gcHJlZml4X3Bfc29ydGVkW3JdIC0gcHJlZml4X3Bfc29ydGVkW2wtMV0KCiAgICAgICAgLy8gSWYgc3VtcyBkaWZmZXIsIGFuc3dlciBOTy4KCiAgICAgICAgLy8gQnV0IHN1bSBlcXVhbGl0eSBpcyBuZWNlc3NhcnkgYnV0IG5vdCBzdWZmaWNpZW50LgoKICAgICAgICAvLyBXZSBjYW4gYWxzbyBjaGVjayBzdW1zIG9mIHNxdWFyZXMgdG8gcmVkdWNlIGNvbGxpc2lvbiBwcm9iYWJpbGl0eS4KCiAgICAgICAgLy8gV2UnbGwgcHJlY29tcHV0ZSBwcmVmaXggc3VtcyBhbmQgcHJlZml4IHN1bXMgb2Ygc3F1YXJlcyBmb3IgcCBhbmQgcF9zb3J0ZWQuCgogICAgICAgIC8vIElmIHN1bXMgYW5kIHN1bXMgb2Ygc3F1YXJlcyBtYXRjaCwgd2UgY2FuIGFzc3VtZSB0aGV5IGFyZSBlcXVhbCAoZHVlIHRvIHBlcm11dGF0aW9uIHVuaXF1ZW5lc3MpLgoKICAgICAgICAvLyBTbyBmb3IgZWFjaCBpbnRlcnZhbCwgd2UgY2hlY2sgdGhlc2Ugc3Vtcy4KCiAgICAgICAgLy8gSWYgYWxsIGludGVydmFscyBzYXRpc2Z5IHRoZSBjb25kaXRpb24sIHByaW50IFlFUyBlbHNlIE5PLgoKICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiBkZXRhaWxzOgoKICAgICAgICAvLyBNYWludGFpbiBpbnRlcnZhbHMgd2l0aCBhIGJhbGFuY2VkIHRyZWUgKHN0ZDo6c2V0KSBvZiBwYWlycyAobCxyKQoKICAgICAgICAvLyBJbml0aWFsbHkgYnVpbGQgaW50ZXJ2YWxzCgogICAgICAgIHZlY3Rvcjxib29sPiBpc19jb25uZWN0ZWQobixmYWxzZSk7CiAgICAgICAgZm9yIChpbnQgaT0xO2k8bjtpKyspIHsKICAgICAgICAgICAgaXNfY29ubmVjdGVkW2ldID0gKHNbaS0xXSA9PSAnUicgfHwgc1tpXSA9PSAnTCcpOwogICAgICAgIH0KCiAgICAgICAgc2V0PHBhaXI8aW50LGludD4+IGludGVydmFsczsKICAgICAgICAvLyBCdWlsZCBpbnRlcnZhbHMKICAgICAgICBpbnQgc3RhcnQ9MTsKICAgICAgICBmb3IgKGludCBpPTE7IGk8bjsgaSsrKSB7CiAgICAgICAgICAgIGlmICghaXNfY29ubmVjdGVkW2ldKSB7CiAgICAgICAgICAgICAgICBpbnRlcnZhbHMuaW5zZXJ0KHtzdGFydCxpfSk7CiAgICAgICAgICAgICAgICBzdGFydCA9IGkrMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpbnRlcnZhbHMuaW5zZXJ0KHtzdGFydCxufSk7CgogICAgICAgIC8vIFByZWNvbXB1dGUgcHJlZml4IHN1bXMgYW5kIHNxdWFyZXMgZm9yIHAgYW5kIHBfc29ydGVkCiAgICAgICAgdmVjdG9yPGxvbmcgbG9uZz4gcHJlZml4X3AobisxLDApLCBwcmVmaXhfcF9zcShuKzEsMCk7CiAgICAgICAgdmVjdG9yPGxvbmcgbG9uZz4gcHJlZml4X3NvcnRlZChuKzEsMCksIHByZWZpeF9zb3J0ZWRfc3EobisxLDApOwogICAgICAgIGZvciAoaW50IGk9MTsgaTw9bjsgaSsrKSB7CiAgICAgICAgICAgIHByZWZpeF9wW2ldID0gcHJlZml4X3BbaS0xXSArIHBbaV07CiAgICAgICAgICAgIHByZWZpeF9wX3NxW2ldID0gcHJlZml4X3Bfc3FbaS0xXSArIDFMTCAqIHBbaV0gKiBwW2ldOwogICAgICAgICAgICBwcmVmaXhfc29ydGVkW2ldID0gcHJlZml4X3NvcnRlZFtpLTFdICsgcF9zb3J0ZWRbaS0xXTsKICAgICAgICAgICAgcHJlZml4X3NvcnRlZF9zcVtpXSA9IHByZWZpeF9zb3J0ZWRfc3FbaS0xXSArIDFMTCAqIHBfc29ydGVkW2ktMV0gKiBwX3NvcnRlZFtpLTFdOwogICAgICAgIH0KCiAgICAgICAgYXV0byBjaGVja19pbnRlcnZhbCA9IFsmXShpbnQgbCwgaW50IHIpIC0+IGJvb2wgewogICAgICAgICAgICBsb25nIGxvbmcgc3VtX3AgPSBwcmVmaXhfcFtyXSAtIHByZWZpeF9wW2wtMV07CiAgICAgICAgICAgIGxvbmcgbG9uZyBzdW1fcF9zcSA9IHByZWZpeF9wX3NxW3JdIC0gcHJlZml4X3Bfc3FbbC0xXTsKICAgICAgICAgICAgbG9uZyBsb25nIHN1bV9zID0gcHJlZml4X3NvcnRlZFtyXSAtIHByZWZpeF9zb3J0ZWRbbC0xXTsKICAgICAgICAgICAgbG9uZyBsb25nIHN1bV9zX3NxID0gcHJlZml4X3NvcnRlZF9zcVtyXSAtIHByZWZpeF9zb3J0ZWRfc3FbbC0xXTsKICAgICAgICAgICAgcmV0dXJuIChzdW1fcCA9PSBzdW1fcyAmJiBzdW1fcF9zcSA9PSBzdW1fc19zcSk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gRnVuY3Rpb24gdG8gY2hlY2sgYWxsIGludGVydmFscwogICAgICAgIGF1dG8gY2hlY2tfYWxsID0gWyZdKCkgLT4gYm9vbCB7CiAgICAgICAgICAgIGZvciAoYXV0byAmcHIgOiBpbnRlcnZhbHMpIHsKICAgICAgICAgICAgICAgIGlmICghY2hlY2tfaW50ZXJ2YWwocHIuZmlyc3QsIHByLnNlY29uZCkpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9OwoKICAgICAgICAvLyBPdXRwdXQgYW5zd2VycyBmb3IgcXVlcmllcwoKICAgICAgICAvLyBGb3IgZWFjaCBxdWVyeSBmbGlwIHNbaV06CiAgICAgICAgLy8gVXBkYXRlIGlzX2Nvbm5lY3RlZFtpLTFdIGFuZCBpc19jb25uZWN0ZWRbaV0KICAgICAgICAvLyBGb3IgZWRnZSBpLTEgKGJldHdlZW4gaS0xIGFuZCBpKTogaWYgaS0xPj0xCiAgICAgICAgLy8gRm9yIGVkZ2UgaSAoYmV0d2VlbiBpIGFuZCBpKzEpOiBpZiBpPG4KCiAgICAgICAgLy8gT24gZWRnZSBjaGFuZ2UgZnJvbSBmYWxzZSB0byB0cnVlOiBtZXJnZSBpbnRlcnZhbHMKICAgICAgICAvLyBPbiBlZGdlIGNoYW5nZSBmcm9tIHRydWUgdG8gZmFsc2U6IHNwbGl0IGludGVydmFscwoKICAgICAgICAvLyBJbXBsZW1lbnQgbWVyZ2UgaW50ZXJ2YWxzIGFuZCBzcGxpdCBpbnRlcnZhbHMgaW4gc2V0IGludGVydmFscwoKICAgICAgICBhdXRvIGZpbmRfaW50ZXJ2YWwgPSBbJl0oaW50IHBvcykgLT4gc2V0PHBhaXI8aW50LGludD4+OjppdGVyYXRvciB7CiAgICAgICAgICAgIGF1dG8gaXQgPSBpbnRlcnZhbHMudXBwZXJfYm91bmQoe3BvcywgbisxfSk7CiAgICAgICAgICAgIGlmIChpdCA9PSBpbnRlcnZhbHMuYmVnaW4oKSkgcmV0dXJuIGludGVydmFscy5lbmQoKTsKICAgICAgICAgICAgaXQtLTsKICAgICAgICAgICAgaWYgKGl0LT5maXJzdCA8PSBwb3MgJiYgcG9zIDw9IGl0LT5zZWNvbmQpIHJldHVybiBpdDsKICAgICAgICAgICAgcmV0dXJuIGludGVydmFscy5lbmQoKTsKICAgICAgICB9OwoKICAgICAgICBhdXRvIG1lcmdlX2ludGVydmFscyA9IFsmXShpbnQgYSwgaW50IGIpIHsKICAgICAgICAgICAgLy8gbWVyZ2UgaW50ZXJ2YWxzIGNvbnRhaW5pbmcgYSBhbmQgYgogICAgICAgICAgICBhdXRvIGl0YSA9IGZpbmRfaW50ZXJ2YWwoYSk7CiAgICAgICAgICAgIGF1dG8gaXRiID0gZmluZF9pbnRlcnZhbChiKTsKICAgICAgICAgICAgaWYgKGl0YSA9PSBpbnRlcnZhbHMuZW5kKCkgfHwgaXRiID09IGludGVydmFscy5lbmQoKSB8fCBpdGEgPT0gaXRiKSByZXR1cm47CiAgICAgICAgICAgIGludCBsID0gbWluKGl0YS0+Zmlyc3QsIGl0Yi0+Zmlyc3QpOwogICAgICAgICAgICBpbnQgciA9IG1heChpdGEtPnNlY29uZCwgaXRiLT5zZWNvbmQpOwogICAgICAgICAgICBpbnRlcnZhbHMuZXJhc2UoaXRhKTsKICAgICAgICAgICAgaW50ZXJ2YWxzLmVyYXNlKGl0Yik7CiAgICAgICAgICAgIGludGVydmFscy5pbnNlcnQoe2wscn0pOwogICAgICAgIH07CgogICAgICAgIGF1dG8gc3BsaXRfaW50ZXJ2YWwgPSBbJl0oaW50IHBvcykgewogICAgICAgICAgICAvLyBzcGxpdCBpbnRlcnZhbCBjb250YWluaW5nIHBvcyBpbnRvIFtsLHBvc10gYW5kIFtwb3MrMSxyXQogICAgICAgICAgICBhdXRvIGl0ID0gZmluZF9pbnRlcnZhbChwb3MpOwogICAgICAgICAgICBpZiAoaXQgPT0gaW50ZXJ2YWxzLmVuZCgpKSByZXR1cm47CiAgICAgICAgICAgIGludCBsID0gaXQtPmZpcnN0LCByID0gaXQtPnNlY29uZDsKICAgICAgICAgICAgaWYgKHBvcyA8IGwgfHwgcG9zID49IHIpIHJldHVybjsgLy8gbm8gc3BsaXQgbmVlZGVkCiAgICAgICAgICAgIGludGVydmFscy5lcmFzZShpdCk7CiAgICAgICAgICAgIGludGVydmFscy5pbnNlcnQoe2wscG9zfSk7CiAgICAgICAgICAgIGludGVydmFscy5pbnNlcnQoe3BvcysxLHJ9KTsKICAgICAgICB9OwoKICAgICAgICAvLyBJbml0aWFsIGFuc3dlcgogICAgICAgIC8vIEFjdHVhbGx5IG5vIG5lZWQgdG8gb3V0cHV0IGJlZm9yZSBxdWVyaWVzCgogICAgICAgIGZvciAoaW50IF89MDsgXzxxOyBfKyspIHsKICAgICAgICAgICAgaW50IGk7IGNpbiA+PiBpOwogICAgICAgICAgICAvLyBGbGlwIHNbaV0KICAgICAgICAgICAgaWYgKHNbaS0xXSA9PSAnTCcpIHNbaS0xXSA9ICdSJzsKICAgICAgICAgICAgZWxzZSBzW2ktMV0gPSAnTCc7CgogICAgICAgICAgICAvLyBVcGRhdGUgZWRnZXMKCiAgICAgICAgICAgIC8vIEVkZ2UgaS0xIChiZXR3ZWVuIGktMSBhbmQgaSkgaWYgaS0xID49IDEKICAgICAgICAgICAgaWYgKGktMSA+PSAxKSB7CiAgICAgICAgICAgICAgICBib29sIG9sZF9jb25uZWN0ZWQgPSBpc19jb25uZWN0ZWRbaS0xXTsKICAgICAgICAgICAgICAgIGJvb2wgbmV3X2Nvbm5lY3RlZCA9IChzW2ktMl0gPT0gJ1InIHx8IHNbaS0xXSA9PSAnTCcpOwogICAgICAgICAgICAgICAgaWYgKG9sZF9jb25uZWN0ZWQgIT0gbmV3X2Nvbm5lY3RlZCkgewogICAgICAgICAgICAgICAgICAgIGlzX2Nvbm5lY3RlZFtpLTFdID0gbmV3X2Nvbm5lY3RlZDsKICAgICAgICAgICAgICAgICAgICBpZiAobmV3X2Nvbm5lY3RlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBtZXJnZSBpbnRlcnZhbHMKICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VfaW50ZXJ2YWxzKGktMSwgaSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3BsaXQgaW50ZXJ2YWxzCiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0X2ludGVydmFsKGktMSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBFZGdlIGkgKGJldHdlZW4gaSBhbmQgaSsxKSBpZiBpIDwgbgogICAgICAgICAgICBpZiAoaSA8IG4pIHsKICAgICAgICAgICAgICAgIGJvb2wgb2xkX2Nvbm5lY3RlZCA9IGlzX2Nvbm5lY3RlZFtpXTsKICAgICAgICAgICAgICAgIGJvb2wgbmV3X2Nvbm5lY3RlZCA9IChzW2ktMV0gPT0gJ1InIHx8IHNbaV0gPT0gJ0wnKTsKICAgICAgICAgICAgICAgIGlmIChvbGRfY29ubmVjdGVkICE9IG5ld19jb25uZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgICBpc19jb25uZWN0ZWRbaV0gPSBuZXdfY29ubmVjdGVkOwogICAgICAgICAgICAgICAgICAgIGlmIChuZXdfY29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlX2ludGVydmFscyhpLCBpKzEpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0X2ludGVydmFsKGkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQ2hlY2sgYWxsIGludGVydmFscwogICAgICAgICAgICBpZiAoY2hlY2tfYWxsKCkpIGNvdXQgPDwgIllFU1xuIjsKICAgICAgICAgICAgZWxzZSBjb3V0IDw8ICJOT1xuIjsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
