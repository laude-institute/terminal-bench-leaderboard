['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIGNpbi50aWUobnVsbHB0cik7CiAgICBpbnQgdDsKICAgIGNpbiA+PiB0OwogICAgd2hpbGUgKHQtLSkgewogICAgICAgIGludCBuLCBtLCBrOwogICAgICAgIGNpbiA+PiBuID4+IG0gPj4gazsKICAgICAgICBzdHJpbmcgYTsKICAgICAgICBjaW4gPj4gYTsKCiAgICAgICAgLy8gUG9zaXRpb25zOiAwIChsZWZ0IGJhbmspLCAxLi5uIChyaXZlciBzZWdtZW50cyksIG4rMSAocmlnaHQgYmFuaykKICAgICAgICAvLyBhW2ktMV0gY29ycmVzcG9uZHMgdG8gcG9zaXRpb24gaQoKICAgICAgICAvLyBXZSdsbCBzaW11bGF0ZSBFcm5Lb3IncyBwcm9ncmVzcyB1c2luZyBhIHBvaW50ZXIgcG9zIGFuZCBjb3VudCBzd2ltbWluZyBtZXRlcnMKICAgICAgICAvLyBFcm5Lb3IgY2FuIGp1bXAgZnJvbSBzdXJmYWNlIChiYW5rIG9yIGxvZykgdXAgdG8gbSBtZXRlcnMgZm9yd2FyZAogICAgICAgIC8vIElmIEVybktvciBpcyBvbiB3YXRlciwgaGUgY2FuIG9ubHkgc3dpbSBmb3J3YXJkIDEgbWV0ZXIgYXQgYSB0aW1lCiAgICAgICAgLy8gQ2Fubm90IGxhbmQgb24gY3JvY29kaWxlCgogICAgICAgIGludCBwb3MgPSAwOyAvLyBzdGFydCBhdCBsZWZ0IGJhbmsKICAgICAgICBpbnQgc3dpbSA9IDA7IC8vIHN3aW1taW5nIG1ldGVycyBjb3VudAogICAgICAgIGJvb2wgY2FuX3JlYWNoID0gdHJ1ZTsKCiAgICAgICAgd2hpbGUgKHBvcyA8IG4gKyAxKSB7CiAgICAgICAgICAgIGlmIChwb3MgPT0gbikgewogICAgICAgICAgICAgICAgLy8gRnJvbSBzZWdtZW50IG4gdG8gcmlnaHQgYmFuayAobisxKQogICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgY2FuIGp1bXAgb3Igc3dpbQogICAgICAgICAgICAgICAgLy8gUmlnaHQgYmFuayBpcyBzdXJmYWNlCiAgICAgICAgICAgICAgICAvLyBJZiBvbiBzdXJmYWNlLCBjYW4ganVtcCB1cCB0byBtCiAgICAgICAgICAgICAgICAvLyBJZiBvbiB3YXRlciwgY2FuIG9ubHkgc3dpbSAxIG1ldGVyCgogICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIGN1cnJlbnQgcG9zIGlzIHN1cmZhY2Ugb3Igd2F0ZXIKICAgICAgICAgICAgICAgIGJvb2wgb25fc3VyZmFjZSA9IChwb3MgPT0gMCkgfHwgKHBvcyA9PSBuICsgMSkgfHwgKHBvcyA+IDAgJiYgcG9zIDw9IG4gJiYgYVtwb3MgLSAxXSA9PSAnTCcpOwogICAgICAgICAgICAgICAgaWYgKG9uX3N1cmZhY2UpIHsKICAgICAgICAgICAgICAgICAgICAvLyBqdW1wIGRpcmVjdGx5IHRvIG4rMQogICAgICAgICAgICAgICAgICAgIHBvcyA9IG4gKyAxOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBzd2ltbWluZyAxIG1ldGVyCiAgICAgICAgICAgICAgICAgICAgc3dpbSsrOwogICAgICAgICAgICAgICAgICAgIGlmIChzd2ltID4gaykgewogICAgICAgICAgICAgICAgICAgICAgICBjYW5fcmVhY2ggPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHBvcysrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIElmIG9uIHN1cmZhY2UgKGJhbmsgb3IgbG9nKQogICAgICAgICAgICBib29sIG9uX3N1cmZhY2UgPSAocG9zID09IDApIHx8IChhW3BvcyAtIDFdID09ICdMJyk7CgogICAgICAgICAgICBpZiAob25fc3VyZmFjZSkgewogICAgICAgICAgICAgICAgLy8gdHJ5IHRvIGp1bXAgYXMgZmFyIGFzIHBvc3NpYmxlIHVwIHRvIG0gbWV0ZXJzCiAgICAgICAgICAgICAgICAvLyBqdW1wIG11c3QgbGFuZCBvbiBzdXJmYWNlIG9yIHdhdGVyIGJ1dCBub3Qgb24gY3JvY29kaWxlCiAgICAgICAgICAgICAgICAvLyBmaW5kIGZ1cnRoZXN0IHJlYWNoYWJsZSBwb3NpdGlvbgogICAgICAgICAgICAgICAgaW50IGp1bXBfdG8gPSAtMTsKICAgICAgICAgICAgICAgIGZvciAoaW50IGp1bXAgPSBtOyBqdW1wID49IDE7IC0tanVtcCkgewogICAgICAgICAgICAgICAgICAgIGludCBueHQgPSBwb3MgKyBqdW1wOwogICAgICAgICAgICAgICAgICAgIGlmIChueHQgPiBuICsgMSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgaWYgKG54dCA9PSBuICsgMSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyByaWdodCBiYW5rLCBzdXJmYWNlCiAgICAgICAgICAgICAgICAgICAgICAgIGp1bXBfdG8gPSBueHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBsYW5kaW5nIHNlZ21lbnQKICAgICAgICAgICAgICAgICAgICBjaGFyIGMgPSBhW254dCAtIDFdOwogICAgICAgICAgICAgICAgICAgIGlmIChjID09ICdDJykgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgLy8gY2FuIGxhbmQgb24gTCBvciBXCiAgICAgICAgICAgICAgICAgICAganVtcF90byA9IG54dDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChqdW1wX3RvID09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gY2FuJ3QganVtcCBhbnl3aGVyZQogICAgICAgICAgICAgICAgICAgIGNhbl9yZWFjaCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChqdW1wX3RvID09IHBvcyArIDEgJiYgYVtqdW1wX3RvIC0gMV0gPT0gJ1cnKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gbGFuZGluZyBvbiB3YXRlciBieSBqdW1wIGZyb20gc3VyZmFjZSBtZWFucyBzdGFydCBzd2ltbWluZwogICAgICAgICAgICAgICAgICAgIC8vIHN3aW1taW5nIDEgbWV0ZXIKICAgICAgICAgICAgICAgICAgICBzd2ltKys7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN3aW0gPiBrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbl9yZWFjaCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGp1bXBfdG8gPiBwb3MgKyAxKSB7CiAgICAgICAgICAgICAgICAgICAgLy8ganVtcGluZyBvdmVyIG11bHRpcGxlIHNlZ21lbnRzCiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbGFuZCBvbiBzdXJmYWNlIG9yIHdhdGVyCiAgICAgICAgICAgICAgICAgICAgLy8gaWYgbGFuZGluZyBvbiB3YXRlciwgd2Ugb25seSBjb3VudCBzd2ltbWluZyBpZiB3ZSBzdGVwIGludG8gd2F0ZXIgc2VnbWVudCBieSBzZWdtZW50CiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGp1bXAgb3ZlciB3YXRlciBpcyBhbGxvd2VkLCBubyBzd2ltbWluZyBjb3VudGVkIGZvciBqdW1waW5nIG92ZXIgd2F0ZXIKICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHN3aW1taW5nIHdoZW4gbW92aW5nIGluIHdhdGVyIHN0ZXAgYnkgc3RlcAogICAgICAgICAgICAgICAgICAgIC8vIFNvIG5vIHN3aW1taW5nIGNvdW50ZWQgaGVyZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHBvcyA9IGp1bXBfdG87CiAgICAgICAgICAgICAgICBpZiAocG9zID09IG4gKyAxKSBicmVhazsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIG9uIHdhdGVyCiAgICAgICAgICAgICAgICAvLyBjYW4gb25seSBzd2ltIG9uZSBtZXRlciBmb3J3YXJkCiAgICAgICAgICAgICAgICAvLyBjaGVjayBuZXh0IHNlZ21lbnQKICAgICAgICAgICAgICAgIGludCBueHQgPSBwb3MgKyAxOwogICAgICAgICAgICAgICAgaWYgKG54dCA9PSBuICsgMSkgewogICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaXMgcmlnaHQgYmFuayAoc3VyZmFjZSkKICAgICAgICAgICAgICAgICAgICBzd2ltKys7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN3aW0gPiBrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbl9yZWFjaCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcG9zID0gbnh0OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChhW254dCAtIDFdID09ICdDJykgewogICAgICAgICAgICAgICAgICAgIGNhbl9yZWFjaCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN3aW0rKzsKICAgICAgICAgICAgICAgIGlmIChzd2ltID4gaykgewogICAgICAgICAgICAgICAgICAgIGNhbl9yZWFjaCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcG9zID0gbnh0OwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBjb3V0IDw8IChjYW5fcmVhY2ggPyAiWUVTIiA6ICJOTyIpIDw8ICJcbiI7CiAgICB9CiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
