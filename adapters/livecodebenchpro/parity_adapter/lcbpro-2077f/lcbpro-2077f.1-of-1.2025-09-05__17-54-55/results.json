{
    "id": "a84790f4-b5e1-43be-a04a-7cc801be704b",
    "trial_name": "lcbpro-2077f.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2077f",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2077F)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nSuppose you have two arrays $c$ and $d$, each of length $k$. The pair $(c, d)$ is called good if $c$ can be changed to $d$ by performing the following operation any number of times.\n\n- Select two distinct indices $i$ and $j$ ($1 \\leq i, j \\leq k$, $i \\neq j$) and a nonnegative integer $x$ ($0 \\leq x < 2^{30}$). Then, apply the following transformations:\n- $c_i := c_i \\mathbin{\\&} x$, where $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n- $c_j := c_j \\mathbin{|} x$, where $|$ denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\nYou are given two arrays $a$ and $b$, both of length $n$, containing nonnegative integers not exceeding $m$.\n\nYou can perform two types of moves on these arrays any number of times:\n\n1. Select an index $i$ ($1 \\leq i \\leq n$) and set $a_i := a_i + 1$.\n2. Select an index $i$ ($1 \\leq i \\leq n$) and set $b_i := b_i + 1$.\n\nNote that the elements of $a$ and $b$ may exceed $m$ at some point while performing the moves.\n\nFind the minimum number of moves required to make the pair $(a, b)$ good.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 2 \\cdot 10^6$) -- the length of arrays $a$ and $b$, and the maximum possible value in these arrays, respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq m$) -- denoting the array $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($0 \\leq b_i \\leq m$) -- denoting the array $b$.\n\nAdditionally, it is guaranteed that the sum of all values of $n$ and the sum of all values of $m$ across all test cases do not exceed $2 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single integer -- the minimum number of moves required to make the pair $(a, b)$ good.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 3\n\n0 1 2 3\n\n0 1 2 3\n\n3 32\n\n8 9 32\n\n8 6 32\n\n5 64\n\n5 7 16 32 64\n\n4 8 16 32 64\n\n4 11\n\n9 1 4 3\n\n8 11 6 2\n\n5 10\n\n7 9 5 4 2\n\n3 10 6 5 9\n\n```\n\n#### Output #1\n\n```\n0\n2\n2\n0\n1\n```\n\n### Note\n\nIn the first case, we already have $a = b$.\n\nIn the second case, we can perform move $2$ on index $i = 2$ twice. The array $b$ becomes $[8, 8, 32]$. We can see that $(a, b)$ is now good.\n\nIn the third case, we can perform move $2$ on index $i = 1$, then perform move $1$ on index $i = 2$. It can be proven that you cannot make the pair $(a, b)$ good in fewer than $2$ moves.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2077f/lcbpro-2077f.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1288,
    "total_output_tokens": 1721,
    "trial_started_at": "2025-09-06T00:57:03.364850+00:00",
    "trial_ended_at": "2025-09-06T00:58:00.220119+00:00",
    "agent_started_at": "2025-09-06T00:57:15.814755+00:00",
    "agent_ended_at": "2025-09-06T00:57:39.432632+00:00",
    "test_started_at": "2025-09-06T00:57:42.108569+00:00",
    "test_ended_at": "2025-09-06T00:57:45.825065+00:00"
}