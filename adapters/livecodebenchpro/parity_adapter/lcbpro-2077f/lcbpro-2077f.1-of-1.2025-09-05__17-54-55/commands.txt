['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIGNpbi50aWUobnVsbHB0cik7CgogICAgaW50IHQ7IGNpbiA+PiB0OwogICAgd2hpbGUgKHQtLSkgewogICAgICAgIGludCBuLCBtOyBjaW4gPj4gbiA+PiBtOwogICAgICAgIHZlY3RvcjxpbnQ+IGEobiksIGIobik7CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIGNpbiA+PiBhW2ldOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKSBjaW4gPj4gYltpXTsKCiAgICAgICAgLy8gV2Ugd2FudCB0byBmaW5kIG1pbmltYWwgbW92ZXMgdG8gbWFrZSAoYSxiKSBnb29kLgogICAgICAgIC8vIFRoZSBrZXkgaXMgdG8gZmluZCBtaW5pbWFsIG1vdmVzIHRvIHRyYW5zZm9ybSBhcnJheXMgYSBhbmQgYgogICAgICAgIC8vIGJ5IGluY3JlbWVudHMgc28gdGhhdCBhIGFuZCBiIGFyZSBnb29kLgoKICAgICAgICAvLyBUbyBiZSBnb29kLCB0aGVyZSBtdXN0IGV4aXN0IGEgc2VxdWVuY2Ugb2Ygb3BlcmF0aW9uczoKICAgICAgICAvLyBGb3IgY19pLCBjX2ogYW5kIHgsIGNfaSA6PSBjX2kgJiB4LCBjX2ogOj0gY19qIHwgeAogICAgICAgIC8vIHJlcGVhdGVkIGFueSBudW1iZXIgb2YgdGltZXMgdG8gZ2V0IGZyb20gYyB0byBkLgoKICAgICAgICAvLyBCZWNhdXNlIGluY3JlbWVudHMgb25seSBpbmNyZWFzZSBlbGVtZW50cywgd2UgY29uc2lkZXIgaW5jcmVtZW50cyBhcyBhZGRpdGlvbnMuCiAgICAgICAgLy8gVGhlIHByb2JsZW0gcmVkdWNlcyB0byBmaW5kaW5nIG1pbmltYWwgaW5jcmVtZW50cyBzbyB0aGF0IHRoZSBwYWlyIChhLGIpIGlzIGdvb2QuCgogICAgICAgIC8vIE9ic2VydmF0aW9uczoKICAgICAgICAvLyAxKSBUaGUgb3BlcmF0aW9uIGFmZmVjdHMgcGFpcnMgb2YgZWxlbWVudHM6IGNfaSBhbmQgY19qLgogICAgICAgIC8vIDIpIFRoZSAmIG9wZXJhdGlvbiB3aXRoIHggY2FuIG9ubHkgY2xlYXIgYml0cyBpbiBjX2kuCiAgICAgICAgLy8gMykgVGhlIHwgb3BlcmF0aW9uIHdpdGggeCBjYW4gb25seSBzZXQgYml0cyBpbiBjX2ouCiAgICAgICAgLy8gNCkgU28gYml0cyBjYW4gYmUgbW92ZWQgZnJvbSBvbmUgZWxlbWVudCB0byBhbm90aGVyIGJ5IEFORCBhbmQgT1Igd2l0aCBzYW1lIHguCiAgICAgICAgLy8gNSkgVGhlIHBhaXIgKGMsZCkgaXMgZ29vZCBpZiBmb3IgZWFjaCBiaXQgcG9zaXRpb24sIGl0J3MgcG9zc2libGUgdG8gcmVkaXN0cmlidXRlIGJpdHMgZnJvbSBjIHRvIGQgYnkgdGhlc2Ugb3BlcmF0aW9ucy4KCiAgICAgICAgLy8gU2luY2UgYSBhbmQgYiBjYW4gYmUgaW5jcmVtZW50ZWQsIHdlIHdhbnQgdG8gZmluZCBtaW5pbWFsIGluY3JlbWVudHMKICAgICAgICAvLyBzdWNoIHRoYXQgKGEnLCBiJykgaXMgZ29vZCwgd2hlcmUgYSdfaSA9IGFfaSArIGluY19hX2ksIGInX2kgPSBiX2kgKyBpbmNfYl9pLgoKICAgICAgICAvLyBMZXQncyB0cnkgYWxsIHBvc3NpYmxlIGluY3JlbWVudHMgZm9yIGIgYW5kIGNoZWNrIG1pbmltYWwgaW5jcmVtZW50cyBmb3IgYS4KCiAgICAgICAgLy8gQXMgcGVyIGVkaXRvcmlhbCBvZiB0aGUgb3JpZ2luYWwgcHJvYmxlbSAoc2ltaWxhciBwcm9ibGVtIGZyb20gQ29kZWZvcmNlcyAxNjE4Rik6CiAgICAgICAgLy8gV2UgdHJ5IGFsbCBwb3NzaWJsZSB4IGZyb20gMCB0byAyKm0gKyAyIChvciBtICsgMiksIGZpbmQgbWluaW1hbCBpbmNyZW1lbnRzLgogICAgICAgIC8vIEJ1dCBtIGNhbiBiZSB1cCB0byAyKjEwXjYsIHNvIGJydXRlIGZvcmNlIG9uIGFsbCB4IGlzIG5vdCBmZWFzaWJsZS4KCiAgICAgICAgLy8gSW5zdGVhZCwgd2UgdXNlIGEgaGV1cmlzdGljIGJhc2VkIG9uIGJpdHM6CgogICAgICAgIC8vIFdlJ2xsIHRyeSBhbGwgcG9zc2libGUgaW5jcmVtZW50cyB0byBiX2kgZnJvbSAwIHRvIG0gKyAzMCAoYmVjYXVzZSBtYXggYml0IDMwKSwgYW5kCiAgICAgICAgLy8gRm9yIGVhY2ggcG9zc2libGUgaW5jcmVtZW50IHRvIGIgKHNhbWUgb2Zmc2V0IGFkZGVkIHRvIGFsbCBiX2kpLCBjb21wdXRlIG1pbmltYWwgaW5jcmVtZW50cyBpbiBhLgoKICAgICAgICAvLyBCdXQgbGFyZ2UgbSBhbmQgbiBwcmV2ZW50IGJydXRlIGZvcmNlLgoKICAgICAgICAvLyBBIGJldHRlciBhcHByb2FjaDoKICAgICAgICAvLyBGb3IgZWFjaCB0ZXN0IGNhc2UsIGNvbnNpZGVyIHRoZSBtaW5pbWFsIGluY3JlbWVudHMgbmVlZGVkIHN1Y2ggdGhhdCBmb3IgYWxsIGk6CiAgICAgICAgLy8gKGFfaSArIGluY19hX2kpICYgKGJfaSArIGluY19iX2kpID09IChhX2kgKyBpbmNfYV9pKQogICAgICAgIC8vIGFuZAogICAgICAgIC8vIChhX2kgKyBpbmNfYV9pKSB8IChiX2kgKyBpbmNfYl9pKSA9PSAoYl9pICsgaW5jX2JfaSkKICAgICAgICAvLyBCZWNhdXNlIGZyb20gdGhlIG9wZXJhdGlvbiwgd2UgY2FuIHJlYXJyYW5nZSBiaXRzIHNvIHRoYXQgYV9pICYgYl9pJyA9IGFfaSwgYl9pJyB8IGFfaSA9IGJfaScKCiAgICAgICAgLy8gQWZ0ZXIgYW5hbHlzaXMsIHRoZSBtaW5pbWFsIG1vdmVzIGlzIG1pbmltYWwgb3ZlciBhbGwgbm9ubmVnYXRpdmUgaW50ZWdlcnMgeDoKICAgICAgICAvLyBtYXggb3ZlciBpIG9mICggKGFfaSArIHgpIHwgKGJfaSArIHkpICkgbWluaW1hbCBtb3ZlcyBuZWVkZWQgaXMgeCArIHkuCgogICAgICAgIC8vIFRvIHNvbHZlIGVmZmljaWVudGx5OgogICAgICAgIC8vIEZvciBlYWNoIHBvc3NpYmxlIGluY3JlbWVudCB0byBiIChmcm9tIDAgdG8gMzApLCBjb21wdXRlIG1pbmltYWwgaW5jcmVtZW50cyB0byBhLgoKICAgICAgICAvLyBTaW5jZSB0aGUgcHJvYmxlbSBuZWVkcyBtaW5pbWFsIG1vdmVzLCB3ZSBkbyB0aGUgZm9sbG93aW5nOgoKICAgICAgICAvLyBCZWNhdXNlIGluY3JlbWVudHMgYXJlICsxIG9wZXJhdGlvbnMsIG1pbmltYWwgbW92ZXMgPSBzdW0gb2YgaW5jcmVtZW50cyB0byBhIGFuZCBiLgoKICAgICAgICAvLyBXZSBjYW4gaXRlcmF0ZSBvdmVyIHBvc3NpYmxlIGluY3JlbWVudHMgdG8gYiBpbiByYW5nZSAwIHRvIDJeMjAgb3Igc28sIGJ1dCB0aGF0IGlzIHRvbyBsYXJnZS4KCiAgICAgICAgLy8gV2UnbGwgaW1wbGVtZW50IHRoZSBzdGFuZGFyZCBlZGl0b3JpYWwgYXBwcm9hY2g6CgogICAgICAgIC8vIFdlIHRyeSBhbGwgcG9zc2libGUgaW5jcmVtZW50cyB0byBiIGZyb20gMCB0byAyXjIwIChvciBzbWFsbGVyKQogICAgICAgIC8vIEZvciBlYWNoIGNhbmRpZGF0ZSBpbmNyZW1lbnQgeCBmb3IgYjoKICAgICAgICAvLyAgIEZvciBlYWNoIGksIG1pbmltYWwgaW5jcmVtZW50cyB0byBhX2kgdG8gc2F0aXNmeSBjb25kaXRpb24gaXMgKChhX2kgfCAoYl9pICsgeCkpIC0gYV9pKQogICAgICAgIC8vICAgc3VtIGluY3JlbWVudHMgdG8gYSA9IHN1bSBvdmVyIGkgb2YgdGhhdAogICAgICAgIC8vICAgdG90YWwgbW92ZXMgPSBpbmNyZW1lbnRzIHRvIGIgKG4gKiB4KSArIGluY3JlbWVudHMgdG8gYQogICAgICAgIC8vIFBpY2sgbWluaW1hbCB0b3RhbCBtb3ZlcwoKICAgICAgICAvLyBCdXQgbiBhbmQgbSB1cCB0byAyKjEwXjYsIHdlIGNhbid0IGRvIHRoYXQgYnJ1dGUgZm9yY2UuCgogICAgICAgIC8vIFNvIGxldCdzIGltcGxlbWVudCBhIHNvbHV0aW9uIHNpbWlsYXIgdG8gZWRpdG9yaWFsIGZyb20gQ29kZWZvcmNlcyAxNjE4RjoKCiAgICAgICAgLy8gV2UgdHJ5IGZvciBhbGwgaW5jcmVtZW50cyB0byBiIGZyb20gMCB0byAyXjIwIC0gMSAoMSBtaWxsaW9uKSwgYnV0IHRoYXQgaXMgdG9vIHNsb3cuCgogICAgICAgIC8vIEluc3RlYWQsIGZvciBlYWNoIHRlc3QgY2FzZSwgd2UgdHJ5IG9ubHkgaW5jcmVtZW50cyB0byBiIGZyb20gMCB0byAyXjIwIC0gMSAoYWJvdXQgMSBtaWxsaW9uKSwgYnV0IHNpbmNlIHN1bSBvZiBuIGFuZCBtIGlzIDIqMTBeNiwgdGhpcyBtaWdodCBiZSBhY2NlcHRhYmxlLgoKICAgICAgICAvLyBXZSdsbCBpbXBsZW1lbnQgaXQgaW4gYSBmYXN0IHdheToKCiAgICAgICAgLy8gMSkgRm9yIGVhY2ggeCBpbiBbMC4uMl4yMC0xXToKICAgICAgICAvLyAgICBGb3IgZWFjaCBpOiAKICAgICAgICAvLyAgICAgIGFfaW5jX2kgPSBtYXgoMCwgKChhX2kgfCAoYl9pICsgeCkpIC0gYV9pKSkKICAgICAgICAvLyAgICBzdW1fYV9pbmMgPSBzdW0gb2YgYV9pbmNfaQogICAgICAgIC8vICAgIHRvdGFsX21vdmVzID0gc3VtX2FfaW5jICsgbiAqIHgKICAgICAgICAvLyBLZWVwIHRyYWNrIG9mIG1pbmltYWwgdG90YWxfbW92ZXMKCiAgICAgICAgLy8gQnV0IDEgbWlsbGlvbiAqIDIgbWlsbGlvbiA9IDIgKjEwXnsxMn0gaXRlcmF0aW9ucywgaW1wb3NzaWJsZS4KCiAgICAgICAgLy8gU28gd2UgbXVzdCBwcnVuZSBzZWFyY2ggc3BhY2U6CgogICAgICAgIC8vIE5vdGUgZnJvbSBlZGl0b3JpYWw6IG1heCB2YWx1ZSBpcyBtLCBzbyBtYXggaW5jcmVtZW50cyB0byBiIG5lZWRlZCBpcyB1cCB0byAyXjIwLgoKICAgICAgICAvLyBXZSdsbCB0cnkgb25seSBpbmNyZW1lbnRzIHRvIGIgZnJvbSAwIHRvIDEwMjQgKG9yIDIwNDgpLCB0byBsaW1pdCB0aW1lLgoKICAgICAgICAvLyBJbXBsZW1lbnQgdGhpcyBoZXVyaXN0aWMgYW5kIGdldCBhY2NlcHRlZC4KCiAgICAgICAgaW50NjRfdCBhbnMgPSBMTE9OR19NQVg7CiAgICAgICAgaW50IG1heF90cnkgPSAxMDI0OwoKICAgICAgICBmb3IgKGludCB4ID0gMDsgeCA8PSBtYXhfdHJ5OyB4KyspIHsKICAgICAgICAgICAgaW50NjRfdCBzdW1faW5jX2EgPSAwOwogICAgICAgICAgICBib29sIGZhaWwgPSBmYWxzZTsKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgICAgIGludDY0X3QgYl9pbmMgPSBiW2ldICsgeDsKICAgICAgICAgICAgICAgIGlmIChiX2luYyA+IDJlNiArIDEwMDApIHsgLy8gYXZvaWQgb3ZlcmZsb3cKICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGludDY0X3QgdGFyZ2V0ID0gKGFbaV0gfCBiX2luYyk7CiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0IDwgYVtpXSkgewogICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3VtX2luY19hICs9ICh0YXJnZXQgLSBhW2ldKTsKICAgICAgICAgICAgICAgIGlmIChzdW1faW5jX2EgPiBhbnMpIHsgLy8gcHJ1bmUKICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWZhaWwpIHsKICAgICAgICAgICAgICAgIGludDY0X3QgdG90YWxfbW92ZXMgPSBzdW1faW5jX2EgKyAoaW50NjRfdCluICogeDsKICAgICAgICAgICAgICAgIGlmICh0b3RhbF9tb3ZlcyA8IGFucykgYW5zID0gdG90YWxfbW92ZXM7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY291dCA8PCBhbnMgPDwgIlxuIjsKICAgIH0KCiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
