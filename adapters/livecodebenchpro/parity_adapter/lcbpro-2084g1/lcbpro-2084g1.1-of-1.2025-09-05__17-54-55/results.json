{
    "id": "b11ec4d1-1e56-4e78-b4ba-6310ec99500c",
    "trial_name": "lcbpro-2084g1.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2084g1",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2084G1)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThis is the easy version of the problem. The difference between the versions is that in this version, $t \\le 1000$, $n \\le 5000$ and the sum of $n$ does not exceed $5000$. You can hack only if you solved all versions of this problem.\n\nFor a non-empty sequence $c$ of length $k$, define $f(c)$ as follows:\n\n- Turtle and Piggy are playing a game on a sequence. They are given the sequence $c_1, c_2, \\ldots, c_k$, and Turtle goes first. Turtle and Piggy alternate in turns (so, Turtle does the first turn, Piggy does the second, Turtle does the third, etc.).\n- The game goes as follows:\n- Let the current length of the sequence be $m$. If $m = 1$, the game ends.\n- If the game does not end and it's Turtle's turn, then Turtle must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $c_i$ to $\\min(c_i, c_{i + 1})$, and remove $c_{i + 1}$.\n- If the game does not end and it's Piggy's turn, then Piggy must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $c_i$ to $\\max(c_i, c_{i + 1})$, and remove $c_{i + 1}$.\n- Turtle wants to maximize the value of $c_1$ in the end, while Piggy wants to minimize the value of $c_1$ in the end.\n- $f(c)$ is the value of $c_1$ in the end if both players play optimally.\n\nFor a permutation $p$ of length $n$$^{\\\\text{∗}}$, Turtle defines the beauty of the permutation as $\\sum\\limits_{i = 1}^n \\sum\\limits_{j = i}^n f([p_i, p_{i + 1}, \\ldots, p_j])$ (i.e., the sum of $f(c)$ where $c$ is a non-empty subsegment$^{\\text{†}}$ of $p$).\n\nPiggy gives Turtle a permutation $a$ of length $n$ where some elements are missing and represented by $0$.\n\nTurtle asks you to determine a permutation $b$ of length $n$ such that:\n\n- $b$ can be formed by filling in the missing elements of $a$ (i.e., for all $1 \\le i \\le n$, if $a_i \\ne 0$, then $b_i = a_i$).\n- The beauty of the permutation $b$ is maximized.\n\nFor convenience, you only need to find the maximum beauty of such permutation $b$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$A sequence $a$ is a subsegment of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5000$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le n$). It is guaranteed that the elements of $a$ that are not $0$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer -- the maximum beauty of the permutation $b$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\n1 0\n\n3\n\n0 0 0\n\n3\n\n0 1 0\n\n5\n\n3 2 4 5 1\n\n7\n\n0 3 2 5 0 0 0\n\n10\n\n1 2 6 5 8 9 0 0 0 0\n\n5\n\n0 4 1 0 0\n\n5\n\n0 1 5 2 3\n\n```\n\n#### Output #1\n\n```\n4\n12\n11\n44\n110\n300\n45\n40\n```\n\n### Note\n\nIn the first test case, the permutation $b$ with the maximum beauty is $[1, 2]$. The beauty of $[1, 2]$ is $4$ since $f([1]) + f([2]) + f([1, 2]) = 1 + 2 + 1 = 4$. If $c = [1, 2]$, then $f(c) = 1$ since Turtle can only choose $i = 1$ and he will set $c_1$ to $\\min(c_1, c_2) = 1$.\n\nIn the second test case, one of the permutations $b$ with the maximum beauty is $[3, 2, 1]$. The beauty of $[3, 2, 1]$ is $12$ since $f([3]) + f([2]) + f([1]) + f([3, 2]) + f([2, 1]) + f([3, 2, 1]) = 3 + 2 + 1 + 2 + 1 + 3 = 12$.\n\nIn the third test case, one of the permutations $b$ with the maximum beauty is $[2, 1, 3]$.\n\nIn the fourth test case, if $c = [3, 2, 4, 5, 1]$, then $f(c) = 3$. One of the possible game processes is as follows:\n\n- Turtle can choose $i = 3$. Then he will set $c_3$ to $\\min(c_3, c_4) = 4$ and remove $c_4$. The sequence $c$ will become $[3, 2, 4, 1]$.\n- Piggy can choose $i = 1$. Then he will set $c_1$ to $\\max(c_1, c_2) = 3$ and remove $c_2$. The sequence $c$ will become $[3, 4, 1]$.\n- Turtle can choose $i = 2$. Then he will set $c_2$ to $\\min(c_2, c_3) = 1$ and remove $c_3$. The sequence $c$ will become $[3, 1]$.\n- Piggy can choose $i = 1$. Then he will set $c_1$ to $\\max(c_1, c_2) = 3$ and remove $c_2$. The sequence $c$ will become $[3]$.\n- The length of the sequence becomes $1$, so the game will end. The value of $c_1$ will be $3$ in the end.\n\nIn the fifth test case, one of the permutations $b$ with the maximum beauty is $[1, 3, 2, 5, 6, 4, 7]$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2084g1/lcbpro-2084g1.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 2125,
    "total_output_tokens": 1954,
    "trial_started_at": "2025-09-06T01:08:41.400436+00:00",
    "trial_ended_at": "2025-09-06T01:09:35.834360+00:00",
    "agent_started_at": "2025-09-06T01:08:49.860685+00:00",
    "agent_ended_at": "2025-09-06T01:09:14.230565+00:00",
    "test_started_at": "2025-09-06T01:09:17.280467+00:00",
    "test_ended_at": "2025-09-06T01:09:20.482872+00:00"
}