[?2004hroot@cfeae0078cca:/app# asciinema rec --stdin /logs/agent.cast
[?2004l[0;32masciinema: recording asciicast to /logs/agent.cast[0m
[0;32masciinema: press <ctrl-d> or type "exit" when you're done[0m
[?2004hroot@cfeae0078cca:/app# clear
[?2004l[H[J[3J[?2004hroot@cfeae0078cca:/app# echo '' | base64 -d > /app/main.cpp; tmux wait -S done
[?2004l[?2004hroot@cfeae0078cca:/app# [?2004l
exit
[0;32masciinema: recording finished[0m
[0;32masciinema: asciicast saved to /logs/agent.cast[0m
[?2004hroot@cfeae0078cca:/app# 