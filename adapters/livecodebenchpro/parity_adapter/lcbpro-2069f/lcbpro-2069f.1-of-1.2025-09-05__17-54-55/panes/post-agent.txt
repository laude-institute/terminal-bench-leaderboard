root@cfeae0078cca:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgovLyBVc2luZyBhIERTVSAoRGlzam9pbnQgU2V0IFVuaW9uKSBzdHJ1Y3R1cmUgd2l0aC
B1bmlvbiBieSBzaXplIGFuZCBwYXRoIGNvbXByZXNzaW9uCnN0cnVjdCBEU1UgewogICAgdmVjdG9yPGludD4gcGFyZW50LCBzaXplOwogICAgRFNVKGludCBuKSA6IHBhcmVudChuKSwgc2l6ZShuLDEpIHsKIC
AgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykgcGFyZW50W2ldID0gaTsKICAgIH0KICAgIGludCBmaW5kKGludCBhKSB7CiAgICAgICAgd2hpbGUgKGEgIT0gcGFyZW50W2FdKSBwYXJlbnRbYV0gPS
BwYXJlbnRbcGFyZW50W2FdXSwgYSA9IHBhcmVudFthXTsKICAgICAgICByZXR1cm4gYTsKICAgIH0KICAgIGJvb2wgdW5pdGUoaW50IGEsIGludCBiKSB7CiAgICAgICAgYSA9IGZpbmQoYSk7IGIgPSBmaW5kKG
IpOwogICAgICAgIGlmIChhID09IGIpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoc2l6ZVthXSA8IHNpemVbYl0pIHN3YXAoYSxiKTsKICAgICAgICBwYXJlbnRbYl0gPSBhOwogICAgICAgIHNpemVbYV0gKz
0gc2l6ZVtiXTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfTsKCmludCBtYWluKCkgewogICAgaW9zOjpzeW5jX3dpdGhfc3RkaW8oZmFsc2UpOwogICAgY2luLnRpZShudWxscHRyKTsKICAgIGludCBuLC
BxOwogICAgY2luID4+IG4gPj4gcTsKCiAgICAvLyBEU1UgZm9yIGdyYXBoIEEgYW5kIGdyYXBoIEIKICAgIERTVSBkc3VBKG4pLCBkc3VCKG4pOwoKICAgIC8vIEZvciBlYWNoIGVkZ2UsIHdlIG5lZWQgdG8ga2
5vdyBpZiBpdCBleGlzdHMgaW4gQSBhbmQvb3IgQgogICAgLy8gV2UnbGwga2VlcCB0cmFjayBvZiBlZGdlcyB1c2luZyBtYXAgb3IgdW5vcmRlcmVkX21hcCB3aXRoIHBhaXJzCiAgICAvLyBCdXQgc2luY2Ugbi
BhbmQgcSBhcmUgbGFyZ2UsIHdlIG11c3QgdXNlIGEgaGFzaCBtYXAgd2l0aCBjdXN0b20gaGFzaGluZwoKICAgIC8vIFdlJ2xsIHN0b3JlIGVkZ2VzIGluIGEgbWFwPHBhaXI8aW50LGludD4sIGludD4gd2hlcm
UgaW50IGlzIGJpdG1hc2s6IDEgaWYgaW4gQSwgMiBpZiBpbiBCCiAgICAvLyBXZSdsbCBub3JtYWxpemUgZWRnZXMgc28gdGhhdCBmaXJzdCA8IHNlY29uZAoKICAgIC8vIFRvIGhhbmRsZSBhZGQvcmVtb3ZlIH
F1ZXJpZXMsIGlmIGVkZ2UgZXhpc3RzIHdlIHJlbW92ZSBpdCwgZWxzZSBhZGQgaXQKCiAgICAvLyBLZXkgaW5zaWdodDoKICAgIC8vIFRoZSBtaW5pbWFsIG51bWJlciBvZiBlZGdlcyB0byBhZGQgdG8gQSBzby
B0aGF0IEEgaW5jbHVkZXMgQiBpczoKICAgIC8vIG51bWJlcl9vZl9jb21wb25lbnRzX2luX0IgLSBudW1iZXJfb2ZfY29tcG9uZW50c19pbl9pbnRlcnNlY3Rpb24KCiAgICAvLyBCdXQgaW50ZXJzZWN0aW9uIG
lzIHRyaWNreSwgc28gd2UgdXNlIHRoZSBhcHByb2FjaCBkZXNjcmliZWQgaW4gZWRpdG9yaWFsOgogICAgLy8gQWZ0ZXIgZWFjaCBxdWVyeSwgdGhlIGZvcm11bGEgaXM6CiAgICAvLyBhbnN3ZXIgPSBjb21wb2
5lbnRzX2luX0IgLSBjb21wb25lbnRzX2luX2ludGVyc2VjdGlvbgoKICAgIC8vIFdlJ2xsIG1haW50YWluIHRocmVlIERTVXM6CiAgICAvLyBkc3VBIGZvciBncmFwaCBBCiAgICAvLyBkc3VCIGZvciBncmFwaC
BCCiAgICAvLyBkc3VBQiBmb3IgaW50ZXJzZWN0aW9uIGdyYXBoIChlZGdlcyBwcmVzZW50IGluIGJvdGggQSBhbmQgQikKCiAgICAvLyBXZSBuZWVkIHRvIG1haW50YWluIGNvbm5lY3RlZCBjb21wb25lbnRzIG
luIHRoZXNlIERTVXMgZHluYW1pY2FsbHkgYXMgZWRnZXMgYXJlIGFkZGVkL3JlbW92ZWQuCgogICAgLy8gSG93ZXZlciwgRFNVIGRvZXMgbm90IHN1cHBvcnQgZWRnZSByZW1vdmFscyBlZmZpY2llbnRseS4gR2
l2ZW4gY29uc3RyYWludHMgdXAgdG8gNCoxMF41LAogICAgLy8gc3RhbmRhcmQgRFNVIHdpdGggcm9sbGJhY2tzIG9yIHBlcnNpc3RlbnQgRFNVIG1pZ2h0IGJlIHRvbyBjb21wbGV4LgoKICAgIC8vIEluc3RlYW
QsIHNpbmNlIGVkZ2VzIG9ubHkgdG9nZ2xlIChhZGQgaWYgYWJzZW50LCByZW1vdmUgaWYgcHJlc2VudCksIHdlIGNhbiB1c2UgYSBkYXRhIHN0cnVjdHVyZQogICAgLy8gZm9yIGR5bmFtaWMgY29ubmVjdGl2aX
R5IHdpdGggZWRnZSBpbnNlcnRpb25zIGFuZCBkZWxldGlvbnMuIEJ1dCB0aGlzIGlzIGNvbXBsZXguCgogICAgLy8gQSBrbm93biBhcHByb2FjaCBmb3IgdGhpcyBwcm9ibGVtIGlzIHRvIHVzZSBhIERTVSB3aX
RoIGF1eGlsaWFyeSBkYXRhIHN0cnVjdHVyZXMgYW5kIG9mZmxpbmUgcHJvY2Vzc2luZy4KCiAgICAvLyBIb3dldmVyLCBzaW5jZSB0aGUgcHJvYmxlbSBjb25zdHJhaW50cyBhcmUgbGFyZ2UsIGJ1dCBubyBsb2
NhbCB0ZXN0aW5nIGlzIHJlcXVpcmVkLCB3ZSBpbXBsZW1lbnQgYSBzb2x1dGlvbgogICAgLy8gdGhhdCBhY2NlcHRzIHRoZSBxdWVyaWVzLCBtYWludGFpbnMgZWRnZXMgc3RhdHVzIGluIGEgbWFwLCBhbmQgdX
BkYXRlcyBEU1Ugd2l0aCB1bmlvbiBvcGVyYXRpb25zIG9ubHkgd2hlbiBlZGdlcyBhZGRlZC4KICAgIC8vIFdoZW4gZWRnZXMgcmVtb3ZlZCwgd2UgZG8gbm90IHJlbW92ZSBmcm9tIERTVSBidXQga2VlcCB0cm
FjayBvZiBjb3VudHMgYW5kIGRvIG5vdCBkZWNyZWFzZSBjb21wb25lbnRzIGNvdW50LgoKICAgIC8vIEJ1dCB0aGUgcHJvYmxlbSByZXF1aXJlcyBleGFjdCBhbnN3ZXJzIGFmdGVyIGVhY2ggcXVlcnkuCgogIC
AgLy8gVGhlcmVmb3JlLCB3ZSBpbXBsZW1lbnQgYSBEU1Ugd2l0aCByb2xsYmFjayBhbmQgb2ZmbGluZSBwcm9jZXNzaW5nIHVzaW5nIHNlZ21lbnQgdHJlZSBvciB1c2UgYSBkYXRhIHN0cnVjdHVyZSB0byBzdX
Bwb3J0CiAgICAvLyBmdWxseSBkeW5hbWljIGNvbm5lY3Rpdml0eSBpcyBjb21wbGV4LgoKICAgIC8vIEFsdGVybmF0aXZlIGFwcHJvYWNoOgogICAgLy8gU2luY2UgZWRnZXMgb25seSB0b2dnbGUsIHdlIGNhbi
Bwcm9jZXNzIHF1ZXJpZXMgb2ZmbGluZSB1c2luZyBhIHNlZ21lbnQgdHJlZSBvZiBzZXRzIHN0b3JpbmcgaW50ZXJ2YWxzIGR1cmluZyB3aGljaCBlZGdlcyBleGlzdCwKICAgIC8vIHRoZW4gcHJvY2VzcyB0aG
Ugc2VnbWVudCB0cmVlIGluIERGUyBhcHBseWluZyBhbmQgdW5kb2luZyB1bmlvbnMgdG8gYW5zd2VyIHF1ZXJpZXMgaW4gb3JkZXIuCgogICAgLy8gTGV0J3MgaW1wbGVtZW50IHRoZSBvZmZsaW5lIHNvbHV0aW
9uIHVzaW5nIHNlZ21lbnQgdHJlZSB0byBoYW5kbGUgZHluYW1pYyBjb25uZWN0aXZpdHkuCgogICAgLy8gRmlyc3QsIHJlYWQgYWxsIHF1ZXJpZXMgYW5kIHN0b3JlIHRoZW0uCgogICAgdmVjdG9yPHR1cGxlPG
NoYXIsaW50LGludD4+IHF1ZXJpZXMocSk7CiAgICBmb3IgKGludCBpPTA7IGk8cTsgaSsrKSB7CiAgICAgICAgY2hhciBjOyBpbnQgeCx5OwogICAgICAgIGNpbiA+PiBjID4+IHggPj4geTsKICAgICAgICB4LS
07IHktLTsKICAgICAgICBpZiAoeD55KSBzd2FwKHgseSk7CiAgICAgICAgcXVlcmllc1tpXSA9IHtjLHgseX07CiAgICB9CgogICAgLy8gRm9yIGVhY2ggZ3JhcGggKEEgYW5kIEIpIHdlIG1haW50YWluIHdoZW
4gZWRnZXMgYXJlIHRvZ2dsZWQgb24gYW5kIG9mZi4KCiAgICAvLyBNYXAgZWRnZSB0byB2ZWN0b3Igb2YgdG9nZ2xlIHRpbWVzLgogICAgLy8ga2V5OiBwYWlyPGludCxpbnQ+CiAgICAvLyB2YWx1ZTogdmVjdG
9yPGludD4gdG9nZ2xlIHRpbWVzCgogICAgLy8gV2UnbGwgaGFuZGxlIGdyYXBocyBzZXBhcmF0ZWx5CgogICAgdW5vcmRlcmVkX21hcDxsb25nIGxvbmcsIHZlY3RvcjxpbnQ+PiB0b2dnbGVzQSwgdG9nZ2xlc0
I7CgogICAgYXV0byBlZGdlX2tleSA9IFtdKGludCBhLCBpbnQgYikgLT4gbG9uZyBsb25nIHsKICAgICAgICByZXR1cm4gKGxvbmcgbG9uZylhICogNDAwMDAwICsgYjsKICAgIH07CgogICAgZm9yIChpbnQgaT
0wOyBpPHE7IGkrKykgewogICAgICAgIGNoYXIgYzsgaW50IHgseTsKICAgICAgICB0aWUoYyx4LHkpID0gcXVlcmllc1tpXTsKICAgICAgICBsb25nIGxvbmcga2V5ID0gZWRnZV9rZXkoeCx5KTsKICAgICAgIC
BpZiAoYyA9PSAnQScpIHRvZ2dsZXNBW2tleV0ucHVzaF9iYWNrKGkpOwogICAgICAgIGVsc2UgdG9nZ2xlc0Jba2V5XS5wdXNoX2JhY2soaSk7CiAgICB9CgogICAgLy8gRm9yIGVhY2ggZWRnZSwgd2UgYWRkIG
Egc2VudGluZWwgdG9nZ2xlIHRpbWUgPSBxIGF0IHRoZSBlbmQKICAgIGZvciAoYXV0byAmcCA6IHRvZ2dsZXNBKSBwLnNlY29uZC5wdXNoX2JhY2socSk7CiAgICBmb3IgKGF1dG8gJnAgOiB0b2dnbGVzQikgcC
5zZWNvbmQucHVzaF9iYWNrKHEpOwoKICAgIC8vIFdlIHdhbnQgdG8gYnVpbGQgYSBzZWdtZW50IHRyZWUgZnJvbSAwIHRvIHEtMQogICAgLy8gRm9yIGVhY2ggZWRnZSwgZm9yIGVhY2ggcGFpciBvZiB0b2dnbG
UgdGltZXMgKGwsciksIHRoZSBlZGdlIGlzIGFjdGl2ZSBkdXJpbmcgW2wsIHItMV0KCiAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSAzIERTVXM6CiAgICAvLyAxKSBBIGVkZ2VzIGFjdGl2ZQogICAgLy8gMikgQi
BlZGdlcyBhY3RpdmUKICAgIC8vIDMpIEludGVyc2VjdGlvbiBlZGdlcyBhY3RpdmUgKGVkZ2VzIGFjdGl2ZSBpbiBib3RoIEEgYW5kIEIpCgogICAgLy8gVG8gZG8gdGhpcywgd2Ugd2lsbCBidWlsZCAzIHNlZ2
1lbnQgdHJlZXMsIG9yIHdlIGNhbiBtZXJnZSBhbGwgaW50ZXJ2YWxzIGFuZCBvbiBlYWNoIG5vZGUgc3RvcmUgZWRnZXMgdG8gYWRkCiAgICAKICAgIC8vIEJ1dCBpbnRlcnNlY3Rpb24gZWRnZXMgZGVwZW5kIG
9uIGVkZ2VzIGFjdGl2ZSBpbiBib3RoIGdyYXBocyBhdCB0aGUgc2FtZSB0aW1lLgoKICAgIC8vIFdlJ2xsIHByb2Nlc3MgdGhlIHF1ZXJpZXMgb2ZmbGluZSB3aXRoIHNlZ21lbnQgdHJlZSBhbmQgRFNVIHdpdG
ggcm9sbGJhY2suCgogICAgLy8gRGVmaW5lIHNlZ21lbnQgdHJlZSBzdHJ1Y3R1cmUgZm9yIGR5bmFtaWMgY29ubmVjdGl2aXR5OgoKICAgIHN0cnVjdCBFZGdlIHsKICAgICAgICBpbnQgdSx2OwogICAgICAgIE
VkZ2UoaW50IHVfLCBpbnQgdl8pIDogdSh1XyksIHYodl8pIHt9CiAgICB9OwoKICAgIC8vIFNlZ21lbnQgdHJlZSB0aGF0IHN0b3JlcyBlZGdlcyB0byBhZGQgaW4gaW50ZXJ2YWxzCiAgICBzdHJ1Y3QgU2VnVH
JlZSB7CiAgICAgICAgaW50IG47CiAgICAgICAgdmVjdG9yPHZlY3RvcjxFZGdlPj4gdHJlZTsKICAgICAgICBTZWdUcmVlKGludCBuXyk6IG4obl8pIHsKICAgICAgICAgICAgdHJlZS5yZXNpemUoNCpuKTsKIC
AgICAgICB9CiAgICAgICAgdm9pZCBhZGRFZGdlKGludCBsLCBpbnQgciwgRWRnZSBlLCBpbnQgaWR4PTEsIGludCB0bD0wLCBpbnQgdHI9LTEpIHsKICAgICAgICAgICAgaWYgKHRyID09IC0xKSB0ciA9IG4tMT
sKICAgICAgICAgICAgaWYgKHIgPCB0bCB8fCB0ciA8IGwpIHJldHVybjsKICAgICAgICAgICAgaWYgKGwgPD0gdGwgJiYgdHIgPD0gcikgewogICAgICAgICAgICAgICAgdHJlZVtpZHhdLnB1c2hfYmFjayhlKT
sKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpbnQgdG0gPSAodGwrdHIpLzI7CiAgICAgICAgICAgIGFkZEVkZ2UobCxyLGUsaWR4KjIsdGwsdG0pOwogICAgICAgIC
AgICBhZGRFZGdlKGwscixlLGlkeCoyKzEsdG0rMSx0cik7CiAgICAgICAgfQogICAgfTsKCiAgICBTZWdUcmVlIHNlZ0EocSksIHNlZ0IocSksIHNlZ0FCKHEpOwoKICAgIC8vIEluc2VydCBlZGdlcyBhY3Rpdm
UgaW50ZXJ2YWxzIGludG8gc2VnQSBhbmQgc2VnQgogICAgZm9yIChhdXRvICZwIDogdG9nZ2xlc0EpIHsKICAgICAgICBhdXRvICZ0aW1lcyA9IHAuc2Vjb25kOwogICAgICAgIGZvciAoaW50IGk9MDsgaSsxPC
hpbnQpdGltZXMuc2l6ZSgpOyBpKz0yKSB7CiAgICAgICAgICAgIGludCBsID0gdGltZXNbaV0sIHIgPSB0aW1lc1tpKzFdLTE7CiAgICAgICAgICAgIGlmIChsIDw9IHIpIHsKICAgICAgICAgICAgICAgIGludC
B1ID0gcC5maXJzdCAvIDQwMDAwMDsKICAgICAgICAgICAgICAgIGludCB2ID0gcC5maXJzdCAlIDQwMDAwMDsKICAgICAgICAgICAgICAgIHNlZ0EuYWRkRWRnZShsLHIsRWRnZSh1LHYpKTsKICAgICAgICAgIC
AgfQogICAgICAgIH0KICAgIH0KICAgIGZvciAoYXV0byAmcCA6IHRvZ2dsZXNCKSB7CiAgICAgICAgYXV0byAmdGltZXMgPSBwLnNlY29uZDsKICAgICAgICBmb3IgKGludCBpPTA7IGkrMTwoaW50KXRpbWVzLn
NpemUoKTsgaSs9MikgewogICAgICAgICAgICBpbnQgbCA9IHRpbWVzW2ldLCByID0gdGltZXNbaSsxXS0xOwogICAgICAgICAgICBpZiAobCA8PSByKSB7CiAgICAgICAgICAgICAgICBpbnQgdSA9IHAuZmlyc3
QgLyA0MDAwMDA7CiAgICAgICAgICAgICAgICBpbnQgdiA9IHAuZmlyc3QgJSA0MDAwMDA7CiAgICAgICAgICAgICAgICBzZWdCLmFkZEVkZ2UobCxyLEVkZ2UodSx2KSk7CiAgICAgICAgICAgIH0KICAgICAgIC
B9CiAgICB9CgogICAgLy8gVG8gYnVpbGQgc2VnQUIgd2UgbmVlZCB0byBmaW5kIGludGVydmFscyB3aGVuIGVkZ2UgaXMgYWN0aXZlIGluIGJvdGggQSBhbmQgQgogICAgLy8gRm9yIGVhY2ggZWRnZSBwcmVzZW
50IGluIGJvdGggdG9nZ2xlcywgd2UgaW50ZXJzZWN0IGludGVydmFscwoKICAgIC8vIFdlIHdpbGwgaXRlcmF0ZSBvdmVyIGFsbCBlZGdlcyB0aGF0IGFwcGVhciBpbiBBIGFuZCBCCgogICAgLy8gQ29sbGVjdC
BhbGwga2V5cwogICAgdW5vcmRlcmVkX3NldDxsb25nIGxvbmc+IGFsbF9rZXlzOwogICAgZm9yIChhdXRvICZwIDogdG9nZ2xlc0EpIGFsbF9rZXlzLmluc2VydChwLmZpcnN0KTsKICAgIGZvciAoYXV0byAmcC
A6IHRvZ2dsZXNCKSBhbGxfa2V5cy5pbnNlcnQocC5maXJzdCk7CgogICAgZm9yIChhdXRvIGtleSA6IGFsbF9rZXlzKSB7CiAgICAgICAgYXV0byAmdGltZXNBID0gdG9nZ2xlc0Fba2V5XTsKICAgICAgICBhdX
RvICZ0aW1lc0IgPSB0b2dnbGVzQltrZXldOwoKICAgICAgICAvLyBJZiBlbXB0eSB0aGVuIHRpbWVzID0ge3F9CiAgICAgICAgaWYgKHRpbWVzQS5lbXB0eSgpKSB0aW1lc0EgPSB2ZWN0b3I8aW50PntxfTsKIC
AgICAgICBpZiAodGltZXNCLmVtcHR5KCkpIHRpbWVzQiA9IHZlY3RvcjxpbnQ+e3F9OwoKICAgICAgICAvLyBCdWlsZCBpbnRlcnZhbHMgZm9yIEEKICAgICAgICB2ZWN0b3I8cGFpcjxpbnQsaW50Pj4gaW50ZX
J2YWxzQTsKICAgICAgICBmb3IgKGludCBpPTA7IGkrMTwoaW50KXRpbWVzQS5zaXplKCk7IGkrPTIpIHsKICAgICAgICAgICAgaW50ZXJ2YWxzQS5lbXBsYWNlX2JhY2sodGltZXNBW2ldLCB0aW1lc0FbaSsxXS
0xKTsKICAgICAgICB9CiAgICAgICAgLy8gQnVpbGQgaW50ZXJ2YWxzIGZvciBCCiAgICAgICAgdmVjdG9yPHBhaXI8aW50LGludD4+IGludGVydmFsc0I7CiAgICAgICAgZm9yIChpbnQgaT0wOyBpKzE8KGludC
l0aW1lc0Iuc2l6ZSgpOyBpKz0yKSB7CiAgICAgICAgICAgIGludGVydmFsc0IuZW1wbGFjZV9iYWNrKHRpbWVzQltpXSwgdGltZXNCW2krMV0tMSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIEludG
Vyc2VjdCBpbnRlcnZhbHNBIGFuZCBpbnRlcnZhbHNCCiAgICAgICAgaW50IGlBPTAsIGlCPTA7CiAgICAgICAgd2hpbGUoaUE8KGludClpbnRlcnZhbHNBLnNpemUoKSAmJiBpQjwoaW50KWludGVydmFsc0Iuc2
l6ZSgpKSB7CiAgICAgICAgICAgIGludCBMID0gbWF4KGludGVydmFsc0FbaUFdLmZpcnN0LCBpbnRlcnZhbHNCW2lCXS5maXJzdCk7CiAgICAgICAgICAgIGludCBSID0gbWluKGludGVydmFsc0FbaUFdLnNlY2
9uZCwgaW50ZXJ2YWxzQltpQl0uc2Vjb25kKTsKICAgICAgICAgICAgaWYgKEwgPD0gUikgewogICAgICAgICAgICAgICAgaW50IHUgPSBrZXkgLyA0MDAwMDA7CiAgICAgICAgICAgICAgICBpbnQgdiA9IGtleS
AlIDQwMDAwMDsKICAgICAgICAgICAgICAgIHNlZ0FCLmFkZEVkZ2UoTCxSLEVkZ2UodSx2KSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGludGVydmFsc0FbaUFdLnNlY29uZCA8IGludGVydmFsc0
JbaUJdLnNlY29uZCkgaUErKzsKICAgICAgICAgICAgZWxzZSBpQisrOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBEU1Ugd2l0aCByb2xsYmFjawogICAgc3RydWN0IFJvbGxiYWNrRFNVIHsKICAgICAgICB2ZW
N0b3I8aW50PiBwYXJlbnQsIHNpemU7CiAgICAgICAgdmVjdG9yPHBhaXI8aW50LGludD4+IGhpc3Rvcnk7CiAgICAgICAgaW50IGNvbXBvbmVudHM7CiAgICAgICAgUm9sbGJhY2tEU1UoaW50IG4pIDogcGFyZW
50KG4pLCBzaXplKG4sMSksIGNvbXBvbmVudHMobikgewogICAgICAgICAgICBmb3IgKGludCBpPTA7IGk8bjsgaSsrKSBwYXJlbnRbaV0gPSBpOwogICAgICAgIH0KICAgICAgICBpbnQgZmluZChpbnQgYSkgew
ogICAgICAgICAgICB3aGlsZSAoYSAhPSBwYXJlbnRbYV0pIGEgPSBwYXJlbnRbYV07CiAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgIH0KICAgICAgICBib29sIHVuaXRlKGludCBhLCBpbnQgYikgewogIC
AgICAgICAgICBhID0gZmluZChhKTsgYiA9IGZpbmQoYik7CiAgICAgICAgICAgIGlmIChhID09IGIpIHsKICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaF9iYWNrKHstMSwtMX0pOwogICAgICAgICAgICAgIC
AgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzaXplW2FdIDwgc2l6ZVtiXSkgc3dhcChhLGIpOwogICAgICAgICAgICBoaXN0b3J5LnB1c2hfYmFjayh7Yiwgc2l6ZVthXX0pOw
ogICAgICAgICAgICBwYXJlbnRbYl0gPSBhOwogICAgICAgICAgICBzaXplW2FdICs9IHNpemVbYl07CiAgICAgICAgICAgIGNvbXBvbmVudHMtLTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQ
ogICAgICAgIHZvaWQgcm9sbGJhY2soKSB7CiAgICAgICAgICAgIGlmIChoaXN0b3J5LmVtcHR5KCkpIHJldHVybjsKICAgICAgICAgICAgYXV0byBbYiwgc3pdID0gaGlzdG9yeS5iYWNrKCk7CiAgICAgICAgIC
AgIGhpc3RvcnkucG9wX2JhY2soKTsKICAgICAgICAgICAgaWYgKGIgPT0gLTEpIHJldHVybjsKICAgICAgICAgICAgaW50IGEgPSBwYXJlbnRbYl07CiAgICAgICAgICAgIHNpemVbYV0gPSBzejsKICAgICAgIC
AgICAgcGFyZW50W2JdID0gYjsKICAgICAgICAgICAgY29tcG9uZW50cysrOwogICAgICAgIH0KICAgIH07CgogICAgUm9sbGJhY2tEU1UgZHN1QXJiKG4pLCBkc3VCcmIobiksIGRzdUFCcmIobik7CgogICAgdm
VjdG9yPGludD4gcmVzKHEpOwoKICAgIC8vIERGUyBvbiBzZWdtZW50IHRyZWUKICAgIGZ1bmN0aW9uPHZvaWQoaW50LGludCxpbnQpPiBkZnMgPSBbJl0oaW50IGlkeCwgaW50IHRsLCBpbnQgdHIpIHsKICAgIC
AgICAvLyBBZGQgZWRnZXMgaW4gc2VnQQogICAgICAgIGZvciAoYXV0byAmZSA6IHNlZ0EudHJlZVtpZHhdKSBkc3VBcmIudW5pdGUoZS51LGUudik7CiAgICAgICAgLy8gQWRkIGVkZ2VzIGluIHNlZ0IKICAgIC
AgICBmb3IgKGF1dG8gJmUgOiBzZWdCLnRyZWVbaWR4XSkgZHN1QnJiLnVuaXRlKGUudSxlLnYpOwogICAgICAgIC8vIEFkZCBlZGdlcyBpbiBzZWdBQgogICAgICAgIGZvciAoYXV0byAmZSA6IHNlZ0FCLnRyZW
VbaWR4XSkgZHN1QUJyYi51bml0ZShlLnUsZS52KTsKCiAgICAgICAgaWYgKHRsID09IHRyKSB7CiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBhbnN3ZXIKICAgICAgICAgICAgLy8gbWluaW1hbCBlZGdlcyB0by
BhZGQgdG8gQSBzbyB0aGF0IEEgaW5jbHVkZXMgQiA9CiAgICAgICAgICAgIC8vIGNvbXBvbmVudHMgaW4gQiAtIGNvbXBvbmVudHMgaW4gaW50ZXJzZWN0aW9uCiAgICAgICAgICAgIHJlc1t0bF0gPSBkc3VCcm
IuY29tcG9uZW50cyAtIGRzdUFCcmIuY29tcG9uZW50czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpbnQgdG0gPSAodGwrdHIpLzI7CiAgICAgICAgICAgIGRmcyhpZHgqMiwgdGwsIHRtKTsKICAgIC
AgICAgICAgZGZzKGlkeCoyKzEsIHRtKzEsIHRyKTsKICAgICAgICB9CgogICAgICAgIC8vIHJvbGxiYWNrCiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCAoaW50KXNlZ0FCLnRyZWVbaWR4XS5zaXplKCk7IG
krKykgZHN1QUJyYi5yb2xsYmFjaygpOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgKGludClzZWdCLnRyZWVbaWR4XS5zaXplKCk7IGkrKykgZHN1QnJiLnJvbGxiYWNrKCk7CiAgICAgICAgZm9yIChpbn
QgaSA9IDA7IGkgPCAoaW50KXNlZ0EudHJlZVtpZHhdLnNpemUoKTsgaSsrKSBkc3VBcmIucm9sbGJhY2soKTsKICAgIH07CgogICAgZGZzKDEsMCxxLTEpOwoKICAgIGZvciAoaW50IGk9MDsgaTxxOyBpKyspIG
NvdXQgPDwgcmVzW2ldIDw8ICJcbiI7CgogICAgcmV0dXJuIDA7Cn0K' | base64 -d > /app/main.cpp; tmux wait -S done
root@cfeae0078cca:/app#
