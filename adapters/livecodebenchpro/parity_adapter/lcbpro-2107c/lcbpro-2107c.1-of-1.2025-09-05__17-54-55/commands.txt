['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CnVzaW5nIGxsID0gbG9uZyBsb25nOwoKaW50IG1haW4oKSB7CiAgICBpb3M6OnN5bmNfd2l0aF9zdGRpbyhmYWxzZSk7CiAgICBjaW4udGllKG51bGxwdHIpOwogICAgaW50IHQ7IGNpbiA+PiB0OwogICAgd2hpbGUodC0tKSB7CiAgICAgICAgaW50IG47IGxsIGs7CiAgICAgICAgY2luID4+IG4gPj4gazsKICAgICAgICBzdHJpbmcgczsgY2luID4+IHM7CiAgICAgICAgdmVjdG9yPGxsPiBhKG4pOwogICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBuOyBpKyspIGNpbiA+PiBhW2ldOwoKICAgICAgICAvLyBGaXJzdCwgd2UgY2hlY2sgaWYgdGhlIGtub3duIGVsZW1lbnRzIGFscmVhZHkgdmlvbGF0ZSBtYXggc3ViYXJyYXkgc3VtID4gawogICAgICAgIC8vIFdlJ2xsIGZpbGwgdW5rbm93bnMgd2l0aCAwIGZvciBjaGVja2luZyBtaW4gbWF4IHN1YmFycmF5IHN1bQoKICAgICAgICB2ZWN0b3I8bGw+IGIgPSBhOwogICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBuOyBpKyspIGlmKHNbaV0gPT0gJzAnKSBiW2ldID0gMDsKCiAgICAgICAgLy8gS2FkYW5lJ3MgYWxnb3JpdGhtCiAgICAgICAgbGwgbWF4X3N1YmFycmF5ID0gTExPTkdfTUlOLCBjdXIgPSAwOwogICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgY3VyICs9IGJbaV07CiAgICAgICAgICAgIGlmKGN1ciA+IG1heF9zdWJhcnJheSkgbWF4X3N1YmFycmF5ID0gY3VyOwogICAgICAgICAgICBpZihjdXIgPCAwKSBjdXIgPSAwOwogICAgICAgIH0KCiAgICAgICAgaWYobWF4X3N1YmFycmF5ID4gaykgewogICAgICAgICAgICBjb3V0IDw8ICJOb1xuIjsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBXZSB3YW50IHRvIGZpbGwgemVyb3MgdG8gbWFrZSBtYXggc3ViYXJyYXkgc3VtIGV4YWN0bHkgawogICAgICAgIC8vIFN0cmF0ZWd5OgogICAgICAgIC8vIFJlcGxhY2UgYWxsIHVua25vd25zIGJ5IDAgaW5pdGlhbGx5CiAgICAgICAgLy8gVGhlbiB0cnkgdG8gaW5jcmVhc2Ugc29tZSBjb25zZWN1dGl2ZSB1bmtub3duIHNlZ21lbnQgdG8gZ2V0IG1heF9zdWJhcnJheSBzdW0gPSBrCgogICAgICAgIC8vIEZpbmQgbWF4IHN1YmFycmF5IHN1bSBvZiBrbm93biBlbGVtZW50cwogICAgICAgIC8vIFRoZSBtYXggc3ViYXJyYXkgc3VtIHdpdGggdW5rbm93bnMgYXMgMCBpcyBtYXhfc3ViYXJyYXkKCiAgICAgICAgLy8gSWYgbWF4X3N1YmFycmF5ID09IGssIGp1c3QgcHJpbnQgdGhlIGFycmF5IHdpdGggdW5rbm93bnMgYXMgMAogICAgICAgIGlmKG1heF9zdWJhcnJheSA9PSBrKSB7CiAgICAgICAgICAgIGNvdXQgPDwgIlllc1xuIjsKICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IG47IGkrKykgewogICAgICAgICAgICAgICAgY291dCA8PCAoc1tpXSA9PSAnMScgPyBhW2ldIDogMCkgPDwgKGkgPT0gbi0xID8gJ1xuJyA6ICcgJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBPdGhlcndpc2UsIHdlIHRyeSB0byBhZGQgdG8gYSBzZWdtZW50IG9mIHVua25vd25zIHRvIGluY3JlYXNlIG1heCBzdWJhcnJheSBzdW0gYnkgKGsgLSBtYXhfc3ViYXJyYXkpCiAgICAgICAgLy8gV2Ugd2lsbCB0cnkgdG8gZmluZCBhIGNvbnRpbnVvdXMgYmxvY2sgb2YgdW5rbm93bnMgdG8gYWRkIHRoZSBuZWVkZWQgYW1vdW50CiAgICAgICAgLy8gVG8gYXZvaWQgaW5jcmVhc2luZyBtYXggc3ViYXJyYXkgc3VtIGJleW9uZCBrLCB3ZSBtdXN0IGVuc3VyZSB0aGF0IHRoZSBtYXggc3ViYXJyYXkgc3VtIGFmdGVyIGFkZGluZyBpcyBleGFjdGx5IGsKCiAgICAgICAgLy8gV2UgdHJ5IGV2ZXJ5IHNlZ21lbnQgb2YgY29udGlndW91cyB1bmtub3ducyBhbmQgY2hlY2sgaWYgYWRkaW5nIChrIC0gbWF4X3N1YmFycmF5KSB0byB0aGF0IHNlZ21lbnQgd29ya3MKCiAgICAgICAgLy8gV2UnbGwgaW1wbGVtZW50IGEgaGVscGVyIGZ1bmN0aW9uIHRvIGNoZWNrIGZlYXNpYmlsaXR5CgogICAgICAgIGxsIGRpZmYgPSBrIC0gbWF4X3N1YmFycmF5OwogICAgICAgIGJvb2wgZm91bmQgPSBmYWxzZTsKICAgICAgICB2ZWN0b3I8bGw+IHJlcyA9IGE7CgogICAgICAgIHZlY3RvcjxpbnQ+IHplcm9fcG9zOwogICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBuOyBpKyspIGlmKHNbaV0gPT0gJzAnKSB6ZXJvX3Bvcy5wdXNoX2JhY2soaSk7CgogICAgICAgIC8vIElmIG5vIHVua25vd25zIGFuZCBtYXhfc3ViYXJyYXkgIT0gaywgbm8gc29sdXRpb24KICAgICAgICBpZih6ZXJvX3Bvcy5lbXB0eSgpKSB7CiAgICAgICAgICAgIGNvdXQgPDwgIk5vXG4iOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIC8vIFdlJ2xsIHRyeSBlYWNoIGNvbnRpbnVvdXMgemVybyBzZWdtZW50CiAgICAgICAgdmVjdG9yPHBhaXI8aW50LGludD4+IHplcm9fc2VnbWVudHM7CiAgICAgICAgaW50IHN0YXJ0ID0gLTE7CiAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IG47IGkrKykgewogICAgICAgICAgICBpZihzW2ldID09ICcwJykgewogICAgICAgICAgICAgICAgaWYoc3RhcnQgPT0gLTEpIHN0YXJ0ID0gaTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmKHN0YXJ0ICE9IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgemVyb19zZWdtZW50cy5wdXNoX2JhY2soe3N0YXJ0LCBpLTF9KTsKICAgICAgICAgICAgICAgICAgICBzdGFydCA9IC0xOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmKHN0YXJ0ICE9IC0xKSB6ZXJvX3NlZ21lbnRzLnB1c2hfYmFjayh7c3RhcnQsIG4tMX0pOwoKICAgICAgICAvLyBGdW5jdGlvbiB0byBjaGVjayBpZiB3aXRoIGFkZGVkIHggb24gc2VnbWVudCBbbCxyXSwgbWF4IHN1YmFycmF5IHN1bSA9PSBrCiAgICAgICAgYXV0byBjaGVjayA9IFsmXShpbnQgbCwgaW50IHIsIGxsIHgpIC0+IGJvb2wgewogICAgICAgICAgICB2ZWN0b3I8bGw+IHRlbXAgPSBhOwogICAgICAgICAgICBmb3IoaW50IGkgPSBsOyBpIDw9IHI7IGkrKykgewogICAgICAgICAgICAgICAgaWYoc1tpXSA9PSAnMCcpIHRlbXBbaV0gPSB4OwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIEthZGFuZQogICAgICAgICAgICBsbCBjdXIgPSAwLCBteCA9IExMT05HX01JTjsKICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IG47IGkrKykgewogICAgICAgICAgICAgICAgY3VyICs9IHRlbXBbaV07CiAgICAgICAgICAgICAgICBpZihjdXIgPiBteCkgbXggPSBjdXI7CiAgICAgICAgICAgICAgICBpZihjdXIgPCAwKSBjdXIgPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBteCA9PSBrOwogICAgICAgIH07CgogICAgICAgIC8vIFNpbmNlIHdlIGNhbiBhc3NpZ24gYW55IHZhbHVlIHVwIHRvIDEwXjE4IHRvIHVua25vd25zLCB0cnkgdG8gYXNzaWduIHVuaWZvcm1seSB4ID0gZGlmZiAvIGxlbmd0aAogICAgICAgIC8vIEJ1dCBkaWZmIG1pZ2h0IG5vdCBiZSBkaXZpc2libGUgYnkgbGVuZ3RoLCBzbyB3ZSB0cnkgZmxvb3IgYW5kIGNlaWwKCiAgICAgICAgZm9yKGF1dG8gc2VnIDogemVyb19zZWdtZW50cykgewogICAgICAgICAgICBpbnQgbGVuID0gc2VnLnNlY29uZCAtIHNlZy5maXJzdCArIDE7CiAgICAgICAgICAgIC8vIFRyeSB4ID0gZGlmZiAvIGxlbiBhbmQgeCA9IGRpZmYgLyBsZW4gKyAxCiAgICAgICAgICAgIGxsIHgxID0gZGlmZiAvIGxlbjsKICAgICAgICAgICAgbGwgeDIgPSB4MSArIDE7CgogICAgICAgICAgICB2ZWN0b3I8bGw+IGNhbmRpZGF0ZXMgPSB7eDEsIHgyfTsKCiAgICAgICAgICAgIGZvcihsbCB4IDogY2FuZGlkYXRlcykgewogICAgICAgICAgICAgICAgaWYoeCA8IC0xZTE4KSBjb250aW51ZTsKICAgICAgICAgICAgICAgIGlmKHggPiAxZTE4KSBjb250aW51ZTsKICAgICAgICAgICAgICAgIGlmKGNoZWNrKHNlZy5maXJzdCwgc2VnLnNlY29uZCwgeCkpIHsKICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgcmVzID0gYTsKICAgICAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSBzZWcuZmlyc3Q7IGkgPD0gc2VnLnNlY29uZDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNbaV0gPT0gJzAnKSByZXNbaV0gPSB4OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZihmb3VuZCkgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBpZihmb3VuZCkgewogICAgICAgICAgICBjb3V0IDw8ICJZZXNcbiI7CiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgICAgIGNvdXQgPDwgcmVzW2ldIDw8IChpID09IG4tMSA/ICdcbicgOiAnICcpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY291dCA8PCAiTm9cbiI7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIDA7Cn0K' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
