{
    "id": "49f74aac-fccd-4c4a-90bb-86ee47e1ece0",
    "trial_name": "lcbpro-2067b.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2067b",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2067B)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou have two large bags of numbers. Initially, the first bag contains $n$ numbers: $a_1, a_2, \\ldots, a_n$, while the second bag is empty. You are allowed to perform the following operations:\n\n- Choose any number from the first bag and move it to the second bag.\n- Choose a number from the first bag that is also present in the second bag and increase it by one.\n\nYou can perform an unlimited number of operations of both types, in any order. Is it possible to make the contents of the first and second bags identical?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 1000$)Â -- the length of the array $a$. It is guaranteed that $n$ is an even number.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$).\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print \"YES\" if it is possible to equalize the contents of the bags. Otherwise, output \"NO\".\n\nYou can output each letter in any case (for example, \"YES\", \"Yes\", \"yes\", \"yEs\", \"yEs\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n2\n\n1 1\n\n2\n\n2 1\n\n4\n\n1 1 4 4\n\n4\n\n3 4 3 3\n\n4\n\n2 3 4 4\n\n6\n\n3 3 4 5 3 3\n\n6\n\n2 2 2 4 4 4\n\n8\n\n1 1 1 1 1 1 1 4\n\n10\n\n9 9 9 10 10 10 10 10 10 10\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nYes\nYes\n```\n\n### Note\n\nLet's analyze the sixth test case: we will show the sequence of operations that leads to the equality of the bags. Initially, the first bag consists of the numbers $(3, 3, 4, 5, 3, 3)$, and the second bag is empty.\n\n1. In the first operation, move the number $3$ from the first bag to the second. State: $(3, 4, 5, 3, 3)$ and $(3)$.\n2. In the second operation, increase the number $3$ from the first bag by one. This operation is possible because the second bag contains the number $3$. State: $(4, 4, 5, 3, 3)$ and $(3)$.\n3. In the third operation, move the number $4$ from the first bag to the second. State: $(4, 5, 3, 3)$ and $(3, 4)$.\n4. In the fourth operation, increase the number $4$ from the first bag by one. State: $(5, 5, 3, 3)$ and $(3, 4)$.\n5. In the fifth operation, move the number $5$ from the first bag to the second. State: $(5, 3, 3)$ and $(3, 4, 5)$.\n6. In the sixth operation, increase the number $3$ from the first bag by one. State: $(5, 3, 4)$ and $(3, 4, 5)$.\n\nAs we can see, as a result of these operations, it is possible to make the contents of the bags equal, so the answer exists.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2067b/lcbpro-2067b.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1261,
    "total_output_tokens": 327,
    "trial_started_at": "2025-09-06T01:39:17.303387+00:00",
    "trial_ended_at": "2025-09-06T01:39:54.869908+00:00",
    "agent_started_at": "2025-09-06T01:39:26.329482+00:00",
    "agent_ended_at": "2025-09-06T01:39:30.997828+00:00",
    "test_started_at": "2025-09-06T01:39:33.688611+00:00",
    "test_ended_at": "2025-09-06T01:39:37.769776+00:00"
}