[?2004hroot@6f0e6609eb42:/app# asciinema rec --stdin /logs/agent.cast
[?2004l[0;32masciinema: recording asciicast to /logs/agent.cast[0m
[0;32masciinema: press <ctrl-d> or type "exit" when you're done[0m
[?2004hroot@6f0e6609eb42:/app# clear
[?2004l[H[J[3J[?2004hroot@6f0e6609eb42:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIGNpbi50aWUobnVsbHB0cik7CgogICAgaW50IHQ7CiAgICBjaW4gPj4gdDsKCiAgICAvLyBXZSdsbCBwcm9jZXNzIGFsbCB0ZXN0IGNhc2VzCiAgICB3aGlsZSAodC0tKSB7CiAgICAgICAgaW50IG4sIG07CiAgICAgICAgY2luID4+IG4gPj4gbTsKCiAgICAgICAgdmVjdG9yPGludD4gYShuKTsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykgY2luID4+IGFbaV07CiAgICAgICAgdmVjdG9yPGludD4gYihtKTsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG07IGkrKykgY2luID4+IGJbaV07CgogICAgICAgIC8vIFNvcnQgcGFydGljaXBhbnQgcmF0aW5ncyBkZXNjZW5kaW5nCiAgICAgICAgc29ydChhLnJiZWdpbigpLCBhLnJlbmQoKSk7CiAgICAgICAgaW50IGtldmluX3JhdGluZyA9IGFbMF07CgogICAgICAgIC8vIFNvcnQgcHJvYmxlbXMgYnkgZGlmZmljdWx0eSBhc2NlbmRpbmcKICAgICAgICBzb3J0KGIuYmVnaW4oKSwgYi5lbmQoKSk7CgogICAgICAgIC8vIFByZWNvbXB1dGUgcHJlZml4IHN1bXMgb2YgcHJvYmxlbXMgS2V2aW4gY2FuIHNvbHZlCiAgICAgICAgdmVjdG9yPGludD4gY2FuX3NvbHZlKG0gKyAxLCAwKTsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG07IGkrKykgewogICAgICAgICAgICBjYW5fc29sdmVbaSArIDFdID0gY2FuX3NvbHZlW2ldICsgKGJbaV0gPD0ga2V2aW5fcmF0aW5nID8gMSA6IDApOwogICAgICAgIH0KCiAgICAgICAgLy8gRm9yIGVhY2ggcGFydGljaXBhbnQsIGNvbXB1dGUgaG93IG1hbnkgcHJvYmxlbXMgdGhleSBjYW4gc29sdmUKICAgICAgICAvLyBXZSBvbmx5IG5lZWQgcGFydGljaXBhbnRzIG90aGVyIHRoYW4gS2V2aW4KICAgICAgICB2ZWN0b3I8aW50PiBzb2x2ZWRfYnlfb3RoZXJzKG4gLSAxKTsKICAgICAgICBmb3IgKGludCBpID0gMTsgaSA8IG47IGkrKykgewogICAgICAgICAgICBpbnQgY250ID0gKGludCkodXBwZXJfYm91bmQoYi5iZWdpbigpLCBiLmVuZCgpLCBhW2ldKSAtIGIuYmVnaW4oKSk7CiAgICAgICAgICAgIHNvbHZlZF9ieV9vdGhlcnNbaSAtIDFdID0gY250OwogICAgICAgIH0KCiAgICAgICAgLy8gU29ydCBzb2x2ZWQgY291bnRzIGRlc2NlbmRpbmcKICAgICAgICBzb3J0KHNvbHZlZF9ieV9vdGhlcnMucmJlZ2luKCksIHNvbHZlZF9ieV9vdGhlcnMucmVuZCgpKTsKCiAgICAgICAgLy8gUHJlY29tcHV0ZSBwcmVmaXggc3VtcyBvZiBzb2x2ZWRfYnlfb3RoZXJzCiAgICAgICAgdmVjdG9yPGxvbmcgbG9uZz4gcHJlZml4X3NvbHZlZChuKTsKICAgICAgICBwcmVmaXhfc29sdmVkWzBdID0gMDsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IChpbnQpc29sdmVkX2J5X290aGVycy5zaXplKCk7IGkrKykgewogICAgICAgICAgICBwcmVmaXhfc29sdmVkW2kgKyAxXSA9IHByZWZpeF9zb2x2ZWRbaV0gKyBzb2x2ZWRfYnlfb3RoZXJzW2ldOwogICAgICAgIH0KCiAgICAgICAgLy8gRm9yIGVhY2ggayA9IDEgdG8gbSwgY29tcHV0ZSB0aGUgYW5zd2VyCiAgICAgICAgLy8gTnVtYmVyIG9mIGNvbnRlc3RzID0gbSAvIGsKICAgICAgICAvLyBGb3IgZWFjaCBjb250ZXN0LCB3ZSB3YW50IHRvIGNob29zZSBrIHByb2JsZW1zIHRvIG1pbmltaXplIHN1bSBvZiBLZXZpbidzIHJhbmtzCiAgICAgICAgLy8gTGV0J3MgYW5hbHl6ZToKICAgICAgICAvLyBLZXZpbiBzb2x2ZXMgY250X2sgPSBudW1iZXIgb2YgcHJvYmxlbXMgaW4gY29udGVzdCB3aXRoIGRpZmZpY3VsdHkgPD0ga2V2aW5fcmF0aW5nCiAgICAgICAgLy8gRm9yIGVhY2ggY29udGVzdCwgcmFuayA9IDEgKyBudW1iZXIgb2YgcGFydGljaXBhbnRzIHdobyBzb2x2ZSBtb3JlIHByb2JsZW1zIGluIHRoYXQgY29udGVzdAogICAgICAgIC8vIFRoZSBzdW0gb3ZlciBhbGwgY29udGVzdHMgPSBzdW0gb2YgcmFua3MKCiAgICAgICAgLy8gQmVjYXVzZSB3ZSBjYW4gY2hvb3NlIHdoaWNoIHByb2JsZW1zIGdvIGludG8gY29udGVzdHMgYXJiaXRyYXJpbHksIGFuZCBwcm9ibGVtcyBhcmUgZGlzdGluY3QsCiAgICAgICAgLy8gaXQncyBvcHRpbWFsIHRvIGdyb3VwIHByb2JsZW1zIHRvIG1pbmltaXplIHN1bSBvZiByYW5rcy4KCiAgICAgICAgLy8gRm9yIGsgY29udGVzdHM6CiAgICAgICAgLy8gdG90YWxfcHJvYmxlbXNfdXNlZCA9IGZsb29yKG0gLyBrKSAqIGsKICAgICAgICAvLyBXZSBjYW4gY29uc2lkZXIgdGhlIHByb2JsZW0gZGlmZmljdWx0aWVzIHNvcnRlZCBhbmQgZGl2aWRlZCBpbnRvIGdyb3VwcyBvZiBzaXplIGsuCgogICAgICAgIC8vIFRvIG1pbmltaXplIHN1bSBvZiByYW5rcywgYXNzaWduIHByb2JsZW1zIHNvIHRoYXQgZGlzdHJpYnV0aW9uIG9mIHByb2JsZW1zIHNvbHZlZCBieSBLZXZpbiBhbmQgb3RoZXJzIGlzIGZhdm9yYWJsZS4KCiAgICAgICAgLy8gU2luY2UgS2V2aW4gc29sdmVzIHByb2JsZW1zIHdpdGggZGlmZmljdWx0eSA8PSBrZXZpbl9yYXRpbmcsCiAgICAgICAgLy8gdGhlIG51bWJlciBvZiBwcm9ibGVtcyBLZXZpbiBjYW4gc29sdmUgaW4gdG90YWwgaXMgdG90YWxfayA9IGNhbl9zb2x2ZVttXQoKICAgICAgICAvLyBXZSB3YW50IHRvIGRpc3RyaWJ1dGUgcHJvYmxlbXMgaW50byBjb250ZXN0cyB0byBtaW5pbWl6ZSBzdW0gb2YgcmFua3MuCiAgICAgICAgCiAgICAgICAgLy8gS2V5IG9ic2VydmF0aW9uOiB0aGUgc3VtIG9mIEtldmluJ3MgcmFua3MgPSBudW1iZXJfb2ZfY29udGVzdHMgKyBzdW1fb3Zlcl9jb250ZXN0cyhudW1iZXJfb2ZfcGFydGljaXBhbnRzX3dob19zb2x2ZV9tb3JlX3Byb2JsZW1zX3RoYW5fa2V2aW5faW5fdGhhdF9jb250ZXN0KQogICAgICAgIAogICAgICAgIC8vIFdlIHdhbnQgdG8gbWluaW1pemUgc3VtX292ZXJfY29udGVzdHMgb2YgcGFydGljaXBhbnRzIHdobyBzb2x2ZSBtb3JlIHByb2JsZW1zIHRoYW4gS2V2aW4uCiAgICAgICAgCiAgICAgICAgLy8gRm9yIHBhcnRpY2lwYW50IGosIHRoZXkgc29sdmUgc29sdmVkX2J5X290aGVyc1tqXSBwcm9ibGVtcyB0b3RhbC4KICAgICAgICAvLyBJZiB3ZSBkaXN0cmlidXRlIHByb2JsZW1zIGludG8gY29udGVzdHMsIHBhcnRpY2lwYW50J3Mgc29sdmVkIGNvdW50IHBlciBjb250ZXN0IGlzIDw9IGsKICAgICAgICAvLyBzdW0gb2YgdGhlaXIgc29sdmVkIHBlciBjb250ZXN0cyA9IHNvbHZlZF9ieV9vdGhlcnNbal0KICAgICAgICAKICAgICAgICAvLyBUaGUgcHJvYmxlbSBpcyBjb21wbGV4LCBidXQgdGhlIGVkaXRvcmlhbCdzIGFwcHJvYWNoIGlzIHRvIHVzZSBhIGdyZWVkeSBzb2x1dGlvbjoKICAgICAgICAKICAgICAgICAvLyBGb3IgZWFjaCBrLCBjYWxjdWxhdGUgaG93IG1hbnkgcHJvYmxlbXMgS2V2aW4gY2FuIHNvbHZlIHBlciBjb250ZXN0IChjYWxsIGl0IHgpLAogICAgICAgIC8vIGFuZCBob3cgbWFueSBwcm9ibGVtcyBlYWNoIG90aGVyIHBhcnRpY2lwYW50IGNhbiBzb2x2ZSBwZXIgY29udGVzdCAoY2FsbCBpdCB5X2opLgogICAgICAgIAogICAgICAgIC8vIFNpbmNlIHdlIHdhbnQgdG8gbWluaW1pemUgc3VtIG9mIHJhbmtzLCBmb3IgZWFjaCBjb250ZXN0LCBjb3VudCBob3cgbWFueSBwYXJ0aWNpcGFudHMgaGF2ZSB5X2ogPiB4LgogICAgICAgIAogICAgICAgIC8vIEl0IGNhbiBiZSBzaG93biB0aGF0IHRoZSBtaW5pbWFsIHN1bSBvZiByYW5rcyBpcyAobnVtYmVyX29mX2NvbnRlc3RzKSArIHN1bSBvdmVyIHBhcnRpY2lwYW50cyBvZiBtYXgoMCwgc29sdmVkX2J5X290aGVyc1tqXSAtIGNudF9rICogbnVtYmVyX29mX2NvbnRlc3RzKSAvIGsKICAgICAgICAKICAgICAgICAvLyBXZSB3aWxsIGltcGxlbWVudCB0aGlzIGFwcHJvYWNoOgoKICAgICAgICB2ZWN0b3I8bG9uZyBsb25nPiBhbnN3ZXJzKG0gKyAxLCAwKTsKICAgICAgICBsb25nIGxvbmcgdG90YWxfY29udGVzdHMgPSAwOwoKICAgICAgICAvLyBGb3IgcHJlZml4IHN1bXMgb2Ygc29sdmVkX2J5X290aGVycywgd2Ugd2lsbCBkbyBiaW5hcnkgc2VhcmNoIHRvIGZpbmQgaG93IG1hbnkgcGFydGljaXBhbnRzIGhhdmUgc29sdmVkIG1vcmUgdGhhbiBhIHRocmVzaG9sZC4KCiAgICAgICAgZm9yIChpbnQgayA9IDE7IGsgPD0gbTsgaysrKSB7CiAgICAgICAgICAgIGludCBjb250ZXN0cyA9IG0gLyBrOwogICAgICAgICAgICBpZiAoY29udGVzdHMgPT0gMCkgewogICAgICAgICAgICAgICAgYW5zd2Vyc1trXSA9IDA7IC8vIG5vIGNvbnRlc3RzCiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gS2V2aW4gc29sdmVzIGF0IG1vc3QgeCA9IG51bWJlciBvZiBwcm9ibGVtcyB3aXRoIGRpZmZpY3VsdHkgPD0ga2V2aW5fcmF0aW5nIGluIHRoZXNlIGNvbnRlc3RzCiAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gcGljayB0aGUgcHJvYmxlbXMgdGhhdCBtYXhpbWl6ZSBLZXZpbidzIHNvbHZlZCBwZXIgY29udGVzdAogICAgICAgICAgICAvLyBTaW5jZSBiIGlzIHNvcnRlZCwgcHJvYmxlbXMgPD0ga2V2aW5fcmF0aW5nIGFyZSBpbiB0aGUgcHJlZml4IGNhbl9zb2x2ZVttXQoKICAgICAgICAgICAgLy8gTnVtYmVyIG9mIHByb2JsZW1zIEtldmluIGNhbiBzb2x2ZSBpbiB0b3RhbCBpcyBjYW5fc29sdmVbbV0KCiAgICAgICAgICAgIC8vIE51bWJlciBvZiBwcm9ibGVtcyB1c2VkIHRvdGFsID0gY29udGVzdHMgKiBrCgogICAgICAgICAgICAvLyBLZXZpbidzIHNvbHZlZCBwcm9ibGVtcyBwZXIgY29udGVzdCwgeCA9IGZsb29yKChjYW5fc29sdmVbbV0pIC8gY29udGVzdHMpCiAgICAgICAgICAgIAogICAgICAgICAgICBpbnQgdG90YWxfdXNlZCA9IGNvbnRlc3RzICogazsKICAgICAgICAgICAgLy8gS2V2aW4gY2FuIG9ubHkgc29sdmUgcHJvYmxlbXMgd2l0aCBkaWZmaWN1bHR5IDw9IGtldmluX3JhdGluZwogICAgICAgICAgICAvLyBXZSB3YW50IHRvIGFzc2lnbiBwcm9ibGVtcyBzbyBLZXZpbiBzb2x2ZXMgYXMgbWFueSBhcyBwb3NzaWJsZQogICAgICAgICAgICAvLyBLZXZpbiBjYW4gc29sdmUgdXAgdG8gY2FuX3NvbHZlW21dIHByb2JsZW1zCiAgICAgICAgICAgIC8vIFdlIGNhbm5vdCBhc3NpZ24gbW9yZSB0aGFuIHRvdGFsX3VzZWQgcHJvYmxlbXMKICAgICAgICAgICAgLy8gU28gS2V2aW4gc29sdmVzIG1pbihjYW5fc29sdmVbbV0sIHRvdGFsX3VzZWQpIHByb2JsZW1zIHRvdGFsCiAgICAgICAgICAgIAogICAgICAgICAgICBpbnQga2V2aW5fdG90YWxfc29sdmVkID0gbWluKGNhbl9zb2x2ZVttXSwgdG90YWxfdXNlZCk7CiAgICAgICAgICAgIGludCB4ID0ga2V2aW5fdG90YWxfc29sdmVkIC8gY29udGVzdHM7CiAgICAgICAgICAgIC8vIEtldmluIHNvbHZlcyB4IHByb2JsZW1zIHBlciBjb250ZXN0IChpbnRlZ2VyIGRpdmlzaW9uKQoKICAgICAgICAgICAgLy8gRm9yIHBhcnRpY2lwYW50cyBvdGhlciB0aGFuIEtldmluOgogICAgICAgICAgICAvLyB3ZSB3YW50IHRvIGNvdW50IGhvdyBtYW55IHBhcnRpY2lwYW50cyBzb2x2ZSBtb3JlIHRoYW4geCBwcm9ibGVtcyBpbiBjb250ZXN0CiAgICAgICAgICAgIC8vIHBhcnRpY2lwYW50IGoncyB0b3RhbCBzb2x2ZWQgPSBzb2x2ZWRfYnlfb3RoZXJzW2pdCgogICAgICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIHBhcnRpY2lwYW50cyB3aG8gc29sdmUgbW9yZSB0aGFuIHggcHJvYmxlbXMgaW4gc29tZSBjb250ZXN0cyBkZXBlbmRzIG9uIGRpc3RyaWJ1dGlvbgogICAgICAgICAgICAvLyBXZSBjb25zaWRlciB0aGUgbWluaW1hbCBzdW0gb2YgcmFua3MgaXM6CiAgICAgICAgICAgIC8vIHN1bV9yYW5rcyA9IGNvbnRlc3RzICsgc3VtX3tqPTF9XntuLTF9IG1heCgwLCBzb2x2ZWRfYnlfb3RoZXJzW2pdIC0geCAqIGNvbnRlc3RzKSAvIGsKCiAgICAgICAgICAgIC8vIFdlIHVzZSBiaW5hcnkgc2VhcmNoIHRvIGZpbmQgaG93IG1hbnkgcGFydGljaXBhbnRzIGhhdmUgc29sdmVkX2J5X290aGVyc1tqXSA+IHggKiBjb250ZXN0cwogICAgICAgICAgICBpbnQgdGhyZXNob2xkID0geCAqIGNvbnRlc3RzOwoKICAgICAgICAgICAgLy8gVXNlIGxvd2VyX2JvdW5kIHRvIGZpbmQgZmlyc3QgcGFydGljaXBhbnQgd2l0aCBzb2x2ZWRfYnlfb3RoZXJzW2pdIDw9IHRocmVzaG9sZAogICAgICAgICAgICAvLyBzb2x2ZWRfYnlfb3RoZXJzIHNvcnRlZCBkZXNjZW5kaW5nCiAgICAgICAgICAgIC8vIFdlIGZpbmQgcGFydGljaXBhbnRzIHdpdGggc29sdmVkX2J5X290aGVyc1tqXSA+IHRocmVzaG9sZAoKICAgICAgICAgICAgaW50IGxlZnQgPSAwLCByaWdodCA9IChpbnQpc29sdmVkX2J5X290aGVycy5zaXplKCk7CiAgICAgICAgICAgIHdoaWxlIChsZWZ0IDwgcmlnaHQpIHsKICAgICAgICAgICAgICAgIGludCBtaWQgPSAobGVmdCArIHJpZ2h0KSAvIDI7CiAgICAgICAgICAgICAgICBpZiAoc29sdmVkX2J5X290aGVyc1ttaWRdID4gdGhyZXNob2xkKSB7CiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IG1pZCArIDE7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gbWlkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGludCBjb3VudF9ncmVhdGVyID0gbGVmdDsKCiAgICAgICAgICAgIC8vIHN1bSBvZiAoc29sdmVkX2J5X290aGVyc1tqXSAtIHRocmVzaG9sZCkgZm9yIHRob3NlIHBhcnRpY2lwYW50cwogICAgICAgICAgICBsb25nIGxvbmcgc3VtX2V4Y2VzcyA9IDA7CiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgY291bnRfZ3JlYXRlcjsgaSsrKSB7CiAgICAgICAgICAgICAgICBzdW1fZXhjZXNzICs9IChzb2x2ZWRfYnlfb3RoZXJzW2ldIC0gdGhyZXNob2xkKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gc3VtIG9mIHJhbmtzID0gY29udGVzdHMgKyBzdW1fZXhjZXNzIC8gawogICAgICAgICAgICAvLyBzdW1fZXhjZXNzIGlzIGRpdmlzaWJsZSBieSBrIGJlY2F1c2Ugc29sdmVkX2J5X290aGVyc1tqXSBhbmQgdGhyZXNob2xkIGFyZSBtdWx0aXBsZXMgb2Ygaz8KICAgICAgICAgICAgLy8gTm90IGd1YXJhbnRlZWQsIHNvIGRvIGludGVnZXIgZGl2aXNpb24gd2l0aCBjZWlsIGlmIG5lZWRlZAoKICAgICAgICAgICAgbG9uZyBsb25nIGFkZGl0aW9uYWwgPSBzdW1fZXhjZXNzIC8gazsKCiAgICAgICAgICAgIGFuc3dlcnNba10gPSAobG9uZyBsb25nKWNvbnRlc3RzICsgYWRkaXRpb25hbDsKICAgICAgICB9CgogICAgICAgIC8vIE91dHB1dCBhbnN3ZXJzIGZvciBrPTEgdG8gbQogICAgICAgIGZvciAoaW50IGsgPSAxOyBrIDw9IG07IGsrKykgewogICAgICAgICAgICBjb3V0IDw8IGFuc3dlcnNba10gPDwgKGsgPT0gbSA/ICdcbicgOiAnICcpOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp; tmux wait -S done
[?2004l[?2004hroot@6f0e6609eb42:/app# [?2004l
exit
[0;32masciinema: recording finished[0m
[0;32masciinema: asciicast saved to /logs/agent.cast[0m
[?2004hroot@6f0e6609eb42:/app# 