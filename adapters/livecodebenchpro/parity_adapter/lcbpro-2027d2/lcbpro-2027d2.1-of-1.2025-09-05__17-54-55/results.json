{
    "id": "6b0a07a2-b806-4e9c-9335-dde9ede35100",
    "trial_name": "lcbpro-2027d2.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2027d2",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2027D2)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThis is the hard version of this problem. The only difference is that you need to also output the number of optimal sequences in this version. You must solve both versions to be able to hack.\n\nYou're given an array $a$ of length $n$, and an array $b$ of length $m$ ($b_i > b_{i+1}$ for all $1 \\le i < m$). Initially, the value of $k$ is $1$. Your aim is to make the array $a$ empty by performing one of these two operations repeatedly:\n\n- Type $1$ -- If the value of $k$ is less than $m$ and the array $a$ is not empty, you can increase the value of $k$ by $1$. This does not incur any cost.\n- Type $2$ -- You remove a non-empty prefix of array $a$, such that its sum does not exceed $b_k$. This incurs a cost of $m - k$.\n\nYou need to minimize the total cost of the operations to make array $a$ empty. If it's impossible to do this through any sequence of operations, output $-1$. Otherwise, output the minimum total cost of the operations, and the number of sequences of operations which yield this minimum cost modulo $10^9 + 7$.\n\nTwo sequences of operations are considered different if you choose a different type of operation at any step, or the size of the removed prefix is different at any step.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$, $\\boldsymbol{1 \\le n \\cdot m \\le 3 \\cdot 10^5}$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le 10^9$).\n\nIt is also guaranteed that $b_i > b_{i+1}$ for all $1 \\le i < m$.\n\nIt is guaranteed that the sum of $\\boldsymbol{n \\cdot m}$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it's possible to make $a$ empty, then output two integers. The first should be the minimum total cost of the operations, and the second should be the number of sequences of operations which achieve this minimum cost, modulo $10^9 + 7$.\n\nIf there is no possible sequence of operations which makes $a$ empty, then output a single integer $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 2\n\n9 3 4 3\n\n11 7\n\n1 2\n\n20\n\n19 18\n\n10 2\n\n2 5 2 1 10 3 2 9 9 6\n\n17 9\n\n10 11\n\n2 2 2 2 2 2 2 2 2 2\n\n20 18 16 14 12 10 8 6 4 2 1\n\n1 6\n\n10\n\n32 16 8 4 2 1\n\n```\n\n#### Output #1\n\n```\n1 3\n-1\n2 11\n10 42\n4 1\n```\n\n### Note\n\nIn the first test case, there are $3$ optimal sequences of operations which yield a total cost of $1$:\n\n- All $3$ sequences begin with a type $2$ operation, removing the prefix $[9]$ to make $a = [3, 4, 3]$, incurring a cost of $1$. Then, we perform a type $1$ operation to increase the value of $k$ by $1$. All subsequent operations now incur a cost of $0$.\n- One sequence continues by removing the prefixes $[3, 4]$ then $[3]$.\n- Another sequence continues by removing the prefixes $[3]$ then $[4, 3]$.\n- Another sequence continues by removing the prefixes $[3]$ then $[4]$ then $[3]$.\n\nIn the second test case, it's impossible to remove any prefix of the array since $a_1 > b_1$, so array $a$ cannot be made empty by any sequence of operations.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2027d2/lcbpro-2027d2.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1430,
    "total_output_tokens": 1174,
    "trial_started_at": "2025-09-06T01:09:27.493493+00:00",
    "trial_ended_at": "2025-09-06T01:10:26.119384+00:00",
    "agent_started_at": "2025-09-06T01:09:47.123099+00:00",
    "agent_ended_at": "2025-09-06T01:10:04.455438+00:00",
    "test_started_at": "2025-09-06T01:10:06.208285+00:00",
    "test_ended_at": "2025-09-06T01:10:10.191322+00:00"
}