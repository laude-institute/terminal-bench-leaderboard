{
    "id": "a1f87563-03d6-45cb-b480-fb1e58ee3f91",
    "trial_name": "lcbpro-2101c.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2101c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2101C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThe distance of a value $x$ in an array $c$, denoted as $d_x(c)$, is defined as the largest gap between any two occurrences of $x$ in $c$.\n\nFormally, $d_x(c) = \\max(j - i)$ over all pairs $i < j$ where $c_i = c_j = x$. If $x$ appears only once or not at all in $c$, then $d_x(c) = 0$.\n\nThe beauty of an array is the sum of the distances of each distinct value in the array. Formally, the beauty of an array $c$ is equal to $\\sum\\limits_{1\\le x\\le n} d_x(c)$.\n\nGiven an array $a$ of length $n$, an array $b$ is nice if it also has length $n$ and its elements satisfy $1\\le b_i\\le a_i$ for all $1\\le i\\le n$. Your task is to find the maximum possible beauty of any nice array.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2\\cdot10^5$) -- the length of array $a$.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\le a_i\\le n$) -- the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the maximum possible beauty among all nice arrays.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n1 2 1 2\n\n2\n\n2 2\n\n10\n\n1 2 1 5 1 2 2 1 1 2\n\n8\n\n1 5 2 8 4 1 4 2\n\n```\n\n#### Output #1\n\n```\n4\n1\n16\n16\n```\n\n### Note\n\nIn the first test case, if $b = [1, 2, 1, 2]$, then $d_1(b) = 3 - 1 = 2$ and $d_2(b) = 4 - 2 = 2$, resulting in a beauty of $2 + 2 = 4$. It can be proven that there are no nice arrays with a beauty greater than $4$.\n\nIn the second test case, both $b = [1, 1]$ and $b = [2, 2]$ are valid solutions with a beauty of $1$.\n\nIn the third test case, if $b = [1, 2, 1, 4, 1, 2, 1, 1, 1, 2]$ with $d_1(b) = 9 - 1 = 8$, $d_2(b) = 10 - 2 = 8$, and $d_4(b) = 0$, resulting in a beauty of $16$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2101c/lcbpro-2101c.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1119,
    "total_output_tokens": 925,
    "trial_started_at": "2025-09-06T01:25:44.996371+00:00",
    "trial_ended_at": "2025-09-06T01:26:45.665376+00:00",
    "agent_started_at": "2025-09-06T01:26:03.461977+00:00",
    "agent_ended_at": "2025-09-06T01:26:19.846512+00:00",
    "test_started_at": "2025-09-06T01:26:23.540508+00:00",
    "test_ended_at": "2025-09-06T01:26:28.105889+00:00"
}