{
    "id": "eba66c6e-ab93-4032-ad98-53ee91b1a7c8",
    "trial_name": "lcbpro-2114g.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2114g",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2114G)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYesterday, Dima found an empty array and decided to add some integers to it. He can perform the following operation an unlimited number of times:\n\n- add any integer to the left or right end of the array.\n- then, as long as there is a pair of identical adjacent elements in the array, they will be replaced by their sum.\n\nIt can be shown that there can be at most one such pair in the array at the same time.\n\nFor example, if the array is $[3, 6, 4]$ and we add the number $3$ to the left, the array will first become $[3, 3, 6, 4]$, then the first two elements will be replaced by $6$, and the array will become $[6, 6, 4]$, and then -- $[12, 4]$.\n\nAfter performing the operation exactly $k$ times, he thinks he has obtained an array $a$ of length $n$, but he does not remember which operations he applied. Determine if there exists a sequence of $k$ operations that could result in the given array $a$ from an empty array, or determine that it is impossible.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) -- the number of test cases. The descriptions of the test cases follow.\n\nThe first line of each test case description contains two integers $n$ and $k$ ($1 \\le n \\le 10^5$, $n \\le k \\le 10^6$) -- the length of the resulting array and the number of operations.\n\nThe second line contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^9, a_{i - 1} \\ne a_i$) -- the elements of the resulting array.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, if there is no suitable sequence of operations of length $k$, output \"NO\". Otherwise, output \"YES\".\n\nYou may output \"YES\" and \"NO\" in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 3\n\n2 1 4\n\n3 7\n\n2 1 4\n\n2 15\n\n2 16\n\n3 10\n\n256 32 1\n\n3 289\n\n768 96 1\n\n3 290\n\n768 96 1\n\n5 7\n\n5 1 6 3 10\n\n4 6\n\n6 8 5 10\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\n```",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2114g/lcbpro-2114g.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1020,
    "total_output_tokens": 611,
    "trial_started_at": "2025-09-06T01:21:29.242030+00:00",
    "trial_ended_at": "2025-09-06T01:22:23.847027+00:00",
    "agent_started_at": "2025-09-06T01:21:50.224122+00:00",
    "agent_ended_at": "2025-09-06T01:22:00.152289+00:00",
    "test_started_at": "2025-09-06T01:22:03.884011+00:00",
    "test_ended_at": "2025-09-06T01:22:08.258150+00:00"
}