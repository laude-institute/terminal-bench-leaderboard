{
    "id": "ac1f95ec-649b-42af-aea6-1416fa38d686",
    "trial_name": "lcbpro-2109e.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2109e",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2109E)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nMouf is bored with themes, so he decided not to use any themes for this problem.\n\nYou are given a binary$^{\\text{∗}}$ string $s$ of length $n$. You are to perform the following operation exactly $k$ times:\n\n- select an index $i$ ($1 \\le i \\le n$) such that $s_i = \\mathtt{0}$;\n- then flip$^{\\text{†}}$ each $s_j$ for all indices $j$ ($1 \\le j \\le i$).\n\nYou need to count the number of possible ways to perform all $k$ operations.\n\nSince the answer could be ginormous, print it modulo $998\\,244\\,353$.\n\nTwo sequences of operations are considered different if they differ in the index selected at any step.\n\n$^{\\text{∗}}$A binary string is a string that consists only of the characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\n$^{\\text{†}}$Flipping a binary character is changing it from $\\mathtt{0}$ to $\\mathtt{1}$ or vice versa.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 500$) -- the length of the binary string $s$ and the number of times the operation must be performed, respectively.\n\nThe second line of each test case contains a binary string $s$ of length $n$ consisting of only characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\nIt is guaranteed that the sum of $n$ does not exceed $500$ over all test cases.\n\n### Output\n\nFor each test case, output a single integer -- the number of ways you can perform exactly $k$ operations, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 1\n\n010\n\n3 2\n\n000\n\n5 4\n\n01001\n\n8 8\n\n11001100\n\n20 20\n\n10010110101101010110\n\n```\n\n#### Output #1\n\n```\n2\n3\n10\n27286\n915530405\n```\n\n### Note\n\nIn the first test case, here are all the possible sequences of operations:\n\n- $\\mathtt{\\color{red}{0}10} \\xrightarrow{i = 1} \\mathtt{110}$\n- $\\mathtt{\\color{red}{010}} \\xrightarrow{i = 3} \\mathtt{101}$\n\nIn the second test case, here are all the possible sequences of operations:\n\n- $\\mathtt{\\color{red}{0}00} \\xrightarrow{i = 1} \\mathtt{\\color{red}{1}00} \\xrightarrow{i = 2} \\mathtt{010}$\n- $\\mathtt{\\color{red}{0}00} \\xrightarrow{i = 1} \\mathtt{\\color{red}{1}00} \\xrightarrow{i = 3} \\mathtt{011}$\n- $\\mathtt{\\color{red}{00}0} \\xrightarrow{i = 2} \\mathtt{\\color{red}{11}0} \\xrightarrow{i = 3} \\mathtt{001}$",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2109e/lcbpro-2109e.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1146,
    "total_output_tokens": 765,
    "trial_started_at": "2025-09-06T00:54:57.771696+00:00",
    "trial_ended_at": "2025-09-06T00:55:49.683458+00:00",
    "agent_started_at": "2025-09-06T00:55:14.033513+00:00",
    "agent_ended_at": "2025-09-06T00:55:25.437049+00:00",
    "test_started_at": "2025-09-06T00:55:29.444527+00:00",
    "test_ended_at": "2025-09-06T00:55:33.831161+00:00"
}