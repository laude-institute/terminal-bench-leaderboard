{
    "id": "dd73b317-c398-4f7e-af47-9926489ba675",
    "trial_name": "lcbpro-2049a.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2049a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2049A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nEvirir the dragon snuck into a wizard's castle and found a mysterious contraption, and their playful instincts caused them to play with (destroy) it...\n\nEvirir the dragon found an array $a_1, a_2, \\ldots, a_n$ of $n$ non-negative integers.\n\nIn one operation, they can choose a non-empty subarray$^{\\\\text{∗}}$ $b$ of $a$ and replace it with the integer $\\\\operatorname{mex}(b)$$^{\\\\text{†}}$. They want to use this operation any number of times to make $a$ only contain zeros. It can be proven that this is always possible under the problem constraints.\n\nWhat is the minimum number of operations needed?\n\n$^{\\text{∗}}$An array $c$ is a subarray of an array $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n$^{\\text{†}}$The minimum excluded (MEX) of a collection of integers $f_1, f_2, \\ldots, f_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $f$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 200$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 50$), the length of $a$.\n\nThe second line of each test case contains $n$ space-separated integers, $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 100$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, output a single integer on a line, the minimum number of operations needed to make $a$ contain only zeros.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n4\n\n0 1 2 3\n\n6\n\n0 0 0 0 0 0\n\n5\n\n1 0 1 0 1\n\n5\n\n3 1 4 1 5\n\n4\n\n3 2 1 0\n\n7\n\n9 100 0 89 12 2 3\n\n4\n\n0 3 9 0\n\n7\n\n0 7 0 2 0 7 0\n\n1\n\n0\n\n2\n\n0 1\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n1\n1\n2\n1\n2\n0\n1\n```\n\n### Note\n\nIn the first test case, Evirir can choose the subarray $b = [1, 2, 3]$ and replace it with $\\operatorname{mex}(1, 2, 3) = 0$, changing $a$ from $[0, \\underline{1, 2, 3}]$ to $[0, 0]$ (where the chosen subarray is underlined). Therefore, the answer is $1$.\n\nIn the second test case, $a$ already contains only $0$s, so no operation is needed.\n\nIn the third test case, Evirir can change $a$ as follows: $[1, \\underline{0, 1, 0, 1}] \\to [\\underline{1, 2}] \\to [0]$. Here, $\\operatorname{mex}(0, 1, 0, 1) = 2$ and $\\operatorname{mex}(1, 2) = 0$.\n\nIn the fourth test case, Evirir can choose $b$ to be the entire array $a$, changing $a$ from $[\\underline{3, 1, 4, 1, 5}]$ to $[0]$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2049a/lcbpro-2049a.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1279,
    "total_output_tokens": 593,
    "trial_started_at": "2025-09-06T01:35:31.319632+00:00",
    "trial_ended_at": "2025-09-06T01:36:25.677130+00:00",
    "agent_started_at": "2025-09-06T01:35:47.361007+00:00",
    "agent_ended_at": "2025-09-06T01:35:59.036936+00:00",
    "test_started_at": "2025-09-06T01:36:03.159031+00:00",
    "test_ended_at": "2025-09-06T01:36:07.883117+00:00"
}