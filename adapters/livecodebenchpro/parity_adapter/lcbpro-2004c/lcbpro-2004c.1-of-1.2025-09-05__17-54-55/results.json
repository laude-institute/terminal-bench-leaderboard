{
    "id": "9536d6b8-1e3e-46cd-8795-611ca0330b6a",
    "trial_name": "lcbpro-2004c.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2004c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2004C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nAlice and Bob have $n$ items they'd like to split between them, so they decided to play a game. All items have a cost, and the $i$-th item costs $a_i$. Players move in turns starting from Alice.\n\nIn each turn, the player chooses one of the remaining items and takes it. The game goes on until no items are left.\n\nLet's say that $A$ is the total cost of items taken by Alice and $B$ is the total cost of Bob's items. The resulting score of the game then will be equal to $A - B$.\n\nAlice wants to maximize the score, while Bob wants to minimize it. Both Alice and Bob will play optimally.\n\nBut the game will take place tomorrow, so today Bob can modify the costs a little. He can increase the costs $a_i$ of several (possibly none or all) items by an integer value (possibly, by the same value or by different values for each item). However, the total increase must be less than or equal to $k$. Otherwise, Alice may suspect something. Note that Bob can't decrease costs, only increase.\n\nWhat is the minimum possible score Bob can achieve?\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 5000$) -- the number of test cases. Then $t$ cases follow.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$; $0 \\le k \\le 10^9$) -- the number of items and the maximum total increase Bob can make.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) -- the initial costs of the items.\n\nIt's guaranteed that the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer -- the minimum possible score $A - B$ after Bob increases the costs of several (possibly none or all) items.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 5\n\n1 10\n\n3 0\n\n10 15 12\n\n4 6\n\n3 1 2 4\n\n2 4\n\n6 9\n\n```\n\n#### Output #1\n\n```\n4\n13\n0\n0\n```\n\n### Note\n\nIn the first test case, Bob can increase $a_1$ by $5$, making costs equal to $[6, 10]$. Tomorrow, Alice will take $10$ and Bob will take $6$. The total score will be equal to $10 - 6 = 4$, and it's the minimum possible.\n\nIn the second test case, Bob can't change costs. So the score will be equal to $(15 + 10) - 12 = 13$, since Alice will take $15$, Bob will take $12$, and Alice -- $10$.\n\nIn the third test case, Bob, for example, can increase $a_1$ by $1$, $a_2$ by $3$, and $a_3$ by $2$. The total change is equal to $1 + 3 + 2 \\le 6$ and costs will be equal to $[4, 4, 4, 4]$. Obviously, the score will be equal to $(4 + 4) - (4 + 4) = 0$.\n\nIn the fourth test case, Bob can increase $a_1$ by $3$, making costs equal to $[9, 9]$. The score will be equal to $9 - 9 = 0$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2004c/lcbpro-2004c.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1210,
    "total_output_tokens": 633,
    "trial_started_at": "2025-09-06T01:14:47.916506+00:00",
    "trial_ended_at": "2025-09-06T01:15:36.487324+00:00",
    "agent_started_at": "2025-09-06T01:15:02.037075+00:00",
    "agent_ended_at": "2025-09-06T01:15:11.659000+00:00",
    "test_started_at": "2025-09-06T01:15:14.773075+00:00",
    "test_ended_at": "2025-09-06T01:15:18.447426+00:00"
}