{
    "id": "e23f5073-d15e-4d3d-8033-29d494664ec5",
    "trial_name": "lcbpro-2053d.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2053d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2053D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nAs a tester, when my solution has a different output from the example during testing, I suspect the author first.\n\n-- Chris, [a comment](https://codeforces.com/blog/entry/133116?#comment-1190579)\n\nAlthough Iris occasionally sets a problem where the solution is possibly wrong, she still insists on creating problems with her imagination; after all, everyone has always been on the road with their stubbornness... And like ever before, Iris has set a problem to which she gave a wrong solution, but Chris is always supposed to save it! You are going to play the role of Chris now:\n\n- Chris is given two arrays $a$ and $b$, both consisting of $n$ integers.\n- Iris is interested in the largest possible value of $P = \\prod\\limits_{i=1}^n \\min(a_i, b_i)$ after an arbitrary rearrangement of $b$. Note that she only wants to know the maximum value of $P$, and no actual rearrangement is performed on $b$.\n- There will be $q$ modifications. Each modification can be denoted by two integers $o$ and $x$ ($o$ is either $1$ or $2$, $1 \\leq x \\leq n$). If $o = 1$, then Iris will increase $a_x$ by $1$; otherwise, she will increase $b_x$ by $1$.\n- Iris asks Chris the maximum value of $P$ for $q + 1$ times: once before any modification, then after every modification.\n- Since $P$ might be huge, Chris only needs to calculate it modulo $998\\,244\\,353$.\n\nChris soon worked out this problem, but he was so tired that he fell asleep. Besides saying thanks to Chris, now it is your turn to write a program to calculate the answers for given input data.\n\nNote: since the input and output are large, you may need to optimize them for this problem.\n\nFor example, in C++, it is enough to use the following lines at the start of the main() function:\n\n```\n`int main() {<br/>    std::ios::sync_with_stdio(false);<br/>    std::cin.tie(nullptr); std::cout.tie(nullptr);<br/>}<br/>````\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) -- the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n \\leq 2\\cdot 10^5$, $1 \\leq q \\leq 2\\cdot 10^5$) -- the length of the array and the number of operations.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 5\\cdot 10^8$) -- the array $a$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 5\\cdot 10^8$) -- the array $b$.\n\nThen $q$ lines follow, each line contains two integers $o$ and $x$ ($o \\in \\{1, 2\\}$, $1 \\leq x \\leq n$), representing an operation.\n\nIt's guaranteed that the sum of $n$ and the sum of $q$ over all test cases does not exceed $4\\cdot 10^5$, respectively.\n\n### Output\n\nFor each test case, output $q + 1$ integers in a line, representing the answers that Chris will calculate, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 4\n\n1 1 2\n\n3 2 1\n\n1 3\n\n2 3\n\n1 1\n\n2 1\n\n6 8\n\n1 4 2 7 3 5\n\n7 6 5 6 3 3\n\n2 5\n\n1 6\n\n1 5\n\n1 5\n\n1 5\n\n2 3\n\n2 3\n\n1 6\n\n13 8\n\n7 7 6 6 5 5 5 2 2 3 4 5 1\n\n1 4 1 9 6 6 9 1 5 1 3 8 4\n\n2 2\n\n2 11\n\n2 4\n\n2 4\n\n1 7\n\n1 1\n\n2 12\n\n1 5\n\n5 3\n\n10000000 20000000 30000000 40000000 50000000\n\n10000000 20000000 30000000 40000000 50000000\n\n1 1\n\n2 2\n\n2 1\n\n```\n\n#### Output #1\n\n```\n2 3 3 6 6\n840 840 1008 1344 1680 2016 2016 2016 2352\n2116800 2646000 3528000 3528000 3528000 4233600 4838400 4838400 4838400\n205272023 205272023 205272023 264129429\n```\n\n### Note\n\nIn the first test case:\n\n- Before the modifications, Chris can rearrange $b$ to $[1, 2, 3]$ so that $P = \\prod\\limits_{i=1}^n \\min(a_i, b_i) = 1 \\cdot 1 \\cdot 2 = 2$. We can prove that this is the maximum possible value. For example, if Chris rearranges $b = [2, 3, 1]$, $P$ will be equal $1 \\cdot 1 \\cdot 1 = 1 < 2$, which is not optimal.\n- After the first modification, Chris can rearrange $b$ to $[1, 2, 3]$ so that $P = 1 \\cdot 1 \\cdot 3 = 3$, which is maximized.\n- After the second modification, Chris can rearrange $b$ to $[2, 2, 3]$ so that $P = 1 \\cdot 1 \\cdot 3 = 3$, which is maximized.\n- After the third modification, Chris can rearrange $b$ to $[2, 2, 3]$ so that $P = 6$, which is maximized.\n- After the fourth modification, Chris can rearrange $b$ to $[2, 2, 4]$ so that $P = 6$, which is maximized.",
    "is_resolved": false,
    "failure_mode": "agent_timeout",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2053d/lcbpro-2053d.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": null,
    "total_output_tokens": null,
    "trial_started_at": "2025-09-06T01:03:51.249208+00:00",
    "trial_ended_at": "2025-09-06T01:08:23.158659+00:00",
    "agent_started_at": "2025-09-06T01:04:01.759824+00:00",
    "agent_ended_at": "2025-09-06T01:08:03.687384+00:00",
    "test_started_at": "2025-09-06T01:08:07.046947+00:00",
    "test_ended_at": "2025-09-06T01:08:08.984227+00:00"
}