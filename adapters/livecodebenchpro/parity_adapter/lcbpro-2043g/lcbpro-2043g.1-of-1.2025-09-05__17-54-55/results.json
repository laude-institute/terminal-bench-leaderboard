{
    "id": "a373b8ed-a15f-4840-85aa-46d4cf72674a",
    "trial_name": "lcbpro-2043g.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2043g",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2043G)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given an array $a$, consisting of $n$ integers. Your task is to process $q$ queries of two types:\n\n- $1~p~x$ -- set the value of the element at index $p$ equal to $x$;\n- $2~l~r$ -- count the number of pairs of indices $(i, j)$ such that $l \\le i < j \\le r$ and $a_i \\ne a_j$.\n\nNote that the queries in this task are encoded; each subsequent query can only be decoded after calculating the answer to the preceding query of the second type.\n\n### Input\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$).\n\nThe third line contains a single integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$) -- the number of queries.\n\nThe next $q$ lines describe the queries in one of the following formats:\n\n- $1~p'~x'$ ($0 \\le p', x' \\le n-1$);\n- $2~l'~r'$ ($0 \\le l', r' \\le n-1$).\n\nThe queries are encoded as follows: let $\\mathit{last}$ be the answer to the latest processed query of the second type (initially, $\\mathit{last} = 0$).\n\n- if the type of the query is $1$, then $p = ((p' + \\mathit{last}) \\bmod n) + 1$, $x = ((x' + \\mathit{last}) \\bmod n) + 1$.\n- if the type of the query is $2$, $l = ((l' + \\mathit{last}) \\bmod n) + 1$, $r = ((r' + \\mathit{last}) \\bmod n) + 1$. If $l > r$, swap their values.\n\nDon't forget to update the value of $\\mathit{last}$ after answering each query of the second type.\n\nAdditional constraint on the input: there is at least one query of the second type.\n\n### Output\n\nFor each query of the second type, print the answer -- the number of pairs of indices $(i, j)$ such that $l \\le i < j \\le r$ and $a_i \\ne a_j$.\n\n### Examples\n\n#### Input #1\n\n```\n\n3\n\n1 2 3\n\n5\n\n2 0 2\n\n1 0 2\n\n2 0 2\n\n1 2 0\n\n2 1 0\n\n```\n\n#### Output #1\n\n```\n3 2 0 ```\n\n#### Input #2\n\n```\n\n7\n\n1 3 4 4 7 1 3\n\n3\n\n2 1 6\n\n2 1 0\n\n2 5 6\n\n```\n\n#### Output #2\n\n```\n13 18 0 ```\n\n### Note\n\nIn the first example, the actual queries (after decoding) are:\n\n- 2 1 3\n- 1 1 3\n- 2 1 3\n- 1 2 3\n- 2 1 3",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2043g/lcbpro-2043g.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1132,
    "total_output_tokens": 3258,
    "trial_started_at": "2025-09-06T01:46:34.002071+00:00",
    "trial_ended_at": "2025-09-06T01:48:01.406273+00:00",
    "agent_started_at": "2025-09-06T01:46:46.067596+00:00",
    "agent_ended_at": "2025-09-06T01:47:32.185554+00:00",
    "test_started_at": "2025-09-06T01:47:38.408591+00:00",
    "test_ended_at": "2025-09-06T01:47:44.658754+00:00"
}