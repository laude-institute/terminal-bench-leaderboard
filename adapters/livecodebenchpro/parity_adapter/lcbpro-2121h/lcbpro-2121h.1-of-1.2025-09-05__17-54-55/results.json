{
    "id": "2364dc58-c593-451e-8fdb-1531e9949da7",
    "trial_name": "lcbpro-2121h.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2121h",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2121H)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThe longest non-decreasing subsequence of an array of integers $a_1, a_2, \\ldots, a_n$ is the longest sequence of indices $1 \\leq i_1 < i_2 < \\ldots < i_k \\leq n$ such that $a_{i_1} \\leq a_{i_2} \\leq \\ldots \\leq a_{i_k}$. The length of the sequence is defined as the number of elements in the sequence. For example, the length of the longest non-decreasing subsequence of the array $a = [3, 1, 4, 1, 2]$ is $3$.\n\nYou are given two arrays of integers $l_1, l_2, \\ldots, l_n$ and $r_1, r_2, \\ldots, r_n$. For each $1 \\le k \\le n$, solve the following problem:\n\n- Consider all arrays of integers $a$ of length $k$, such that for each $1 \\leq i \\leq k$, it holds that $l_i \\leq a_i \\leq r_i$. Find the maximum length of the longest non-decreasing subsequence among all such arrays.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) -- the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) -- the length of the arrays $l$ and $r$.\n\nThe next $n$ lines of each test case contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers: for each $k$ from $1$ to $n$, output the maximum length of the longest non-decreasing subsequence among all suitable arrays.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n1 1\n\n2\n\n3 4\n\n1 2\n\n4\n\n4 5\n\n3 4\n\n1 3\n\n3 3\n\n8\n\n6 8\n\n4 6\n\n3 5\n\n5 5\n\n3 4\n\n1 3\n\n2 4\n\n3 3\n\n5\n\n1 2\n\n6 8\n\n4 5\n\n2 3\n\n3 3\n\n11\n\n35 120\n\n66 229\n\n41 266\n\n98 164\n\n55 153\n\n125 174\n\n139 237\n\n30 72\n\n138 212\n\n109 123\n\n174 196\n\n```\n\n#### Output #1\n\n```\n1\n1 1\n1 2 2 3\n1 2 2 3 3 3 4 5\n1 2 2 2 3\n1 2 3 4 5 6 7 7 8 8 9\n```\n\n### Note\n\nIn the first test case, the only possible array is $a = [1]$. The length of the longest non-decreasing subsequence of this array is $1$.\n\nIn the second test case, for $k = 2$, no matter how we choose the values of $a_1$ and $a_2$, the condition $a_1 > a_2$ will always hold. Therefore, the answer for $k = 2$ will be $1$.\n\nIn the third test case, for $k = 4$, we can choose the array $a = [5, 3, 3, 3]$. The length of the longest non-decreasing subsequence of this array is $3$.\n\nIn the fourth test case, for $k = 8$, we can choose the array $a = [7, 5, 3, 5, 3, 3, 3, 3]$. The length of the longest non-decreasing subsequence of this array is $5$.\n\nIn the fifth test case, for $k = 5$, we can choose the array $a = [2, 8, 5, 3, 3]$. The length of the longest non-decreasing subsequence of this array is $3$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2121h/lcbpro-2121h.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1384,
    "total_output_tokens": 1017,
    "trial_started_at": "2025-09-06T01:42:39.099301+00:00",
    "trial_ended_at": "2025-09-06T01:45:37.805761+00:00",
    "agent_started_at": "2025-09-06T01:42:49.102710+00:00",
    "agent_ended_at": "2025-09-06T01:43:08.602158+00:00",
    "test_started_at": "2025-09-06T01:43:11.585334+00:00",
    "test_ended_at": "2025-09-06T01:45:15.753091+00:00"
}