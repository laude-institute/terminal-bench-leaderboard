{
    "id": "af5dc4ab-1234-4300-a5b1-36b768157340",
    "trial_name": "lcbpro-1988a.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-1988a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 1988A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nA multiset is a set of numbers in which there can be equal elements, and the order of the numbers does not matter. For example, $\\{2,2,4\\}$ is a multiset.\n\nYou have a multiset $S$. Initially, the multiset contains only one positive integer $n$. That is, $S=\\{n\\}$. Additionally, there is a given positive integer $k$.\n\nIn one operation, you can select any positive integer $u$ in $S$ and remove one copy of $u$ from $S$. Then, insert no more than $k$ positive integers into $S$ so that the sum of all inserted integers is equal to $u$.\n\nFind the minimum number of operations to make $S$ contain $n$ ones.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). Description of the test cases follows.\n\nThe only line of each testcase contains two integers $n,k$ ($1\\le n\\le 1000,2\\le k\\le 1000$).\n\n### Output\n\nFor each testcase, print one integer, which is the required answer.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 5\n\n5 2\n\n6 3\n\n16 4\n\n```\n\n#### Output #1\n\n```\n0\n4\n3\n5\n```\n\n### Note\n\nFor the first test case, initially $S=\\{1\\}$, already satisfying the requirement. Therefore, we need zero operations.\n\nFor the second test case, initially $S=\\{5\\}$. We can apply the following operations:\n\n- Select $u=5$, remove $u$ from $S$, and insert $2,3$ into $S$. Now, $S=\\{2,3\\}$.\n- Select $u=2$, remove $u$ from $S$, and insert $1,1$ into $S$. Now, $S=\\{1,1,3\\}$.\n- Select $u=3$, remove $u$ from $S$, and insert $1,2$ into $S$. Now, $S=\\{1,1,1,2\\}$.\n- Select $u=2$, remove $u$ from $S$, and insert $1,1$ into $S$. Now, $S=\\{1,1,1,1,1\\}$.\n\nUsing $4$ operations in total, we achieve the goal.\n\nFor the third test case, initially $S=\\{6\\}$. We can apply the following operations:\n\n- Select $u=6$, remove $u$ from $S$, and insert $1,2,3$ into $S$. Now, $S=\\{1,2,3\\}$.\n- Select $u=2$, remove $u$ from $S$, and insert $1,1$ into $S$. Now, $S=\\{1,1,1,3\\}$.\n- Select $u=3$, remove $u$ from $S$, and insert $1,1,1$ into $S$. Now, $S=\\{1,1,1,1,1,1\\}$.\n\nUsing $3$ operations in total, we achieve the goal.\n\nFor the fourth test case, initially $S=\\{16\\}$. We can apply the following operations:\n\n- Select $u=16$, remove $u$ from $S$, and insert $4,4,4,4$ into $S$. Now, $S=\\{4,4,4,4\\}$.\n- Repeat for $4$ times: select $u=4$, remove $u$ from $S$, and insert $1,1,1,1$ into $S$.\n\nUsing $5$ operations in total, we achieve the goal.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-1988a/lcbpro-1988a.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1227,
    "total_output_tokens": 893,
    "trial_started_at": "2025-09-06T01:09:35.853504+00:00",
    "trial_ended_at": "2025-09-06T01:10:27.705382+00:00",
    "agent_started_at": "2025-09-06T01:09:51.151121+00:00",
    "agent_ended_at": "2025-09-06T01:10:05.743642+00:00",
    "test_started_at": "2025-09-06T01:10:08.171111+00:00",
    "test_ended_at": "2025-09-06T01:10:12.104097+00:00"
}