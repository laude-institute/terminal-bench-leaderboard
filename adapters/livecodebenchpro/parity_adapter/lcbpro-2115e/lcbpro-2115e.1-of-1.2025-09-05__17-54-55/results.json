{
    "id": "ec54ddbf-adcc-43dd-92d3-5cfac301fd73",
    "trial_name": "lcbpro-2115e.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2115e",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2115E)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\n[Mayflower by Plum](https://www.youtube.com/watch?v=wD6_6R7dhnE/)\n\nMay, Gellyfish's friend, loves playing a game called \"Inscryption\" which is played on a directed acyclic graph with $n$ vertices and $m$ edges. All edges $ a \\rightarrow b$ satisfy $a<b$.\n\nYou start in vertex $1$ with some coins. You need to move from vertex $1$ to the vertex where the boss is located along the directed edges, and then fight with the final boss.\n\nEach of the $n$ vertices of the graph contains a Trader who will sell you a card with power $w_i$ for $c_i$ coins. You can buy as many cards as you want from each Trader. However, you can only trade with the trader on the $i$-th vertex if you are currently on the $i$-th vertex.\n\nIn order to defeat the boss, you want the sum of the power of your cards to be as large as possible.\n\nYou will have to answer the following $q$ queries:\n\n- Given integers $p$ and $r$. If the final boss is located at vertex $p$, and you have $r$ coins in the beginning, what is the maximum sum of the power of your cards when you fight the final boss? Note that you are allowed to trade cards on vertex $p$.\n\n### Input\n\nThe first line of input contains two integers $n$ and $m$ ($1 \\leq n \\leq 200$, $n - 1 \\leq m \\leq \\min(\\frac {n(n-1)} 2, 2000)$) -- the number of vertices and the number of edges.\n\nThe $i$-th of the following $n$ lines of input each contains two integers $c_i$ and $w_i$ ($1 \\leq c_i \\leq 200$, $1 \\leq w_i \\leq 10^9$) -- describing the cards of the Trader on the $i$-th vertex.\n\nIn the following $m$ lines of input, each line contains two integers $u$ and $v$ ($1 \\leq u < v \\leq n$), indicating a directed edge from vertex $u$ to vertex $v$. It is guaranteed that every edge $(u,v)$ appears at most once.\n\nThe next line of input contains one single integer $q$ ($1 \\leq q \\leq 2 \\cdot 10^5$) -- the number of queries.\n\nIn the following $q$ lines of input, each line contains two integers $p$ and $r$ ($1 \\leq p \\leq n$, $1 \\leq r \\leq 10^9$).\n\nIt is guaranteed that for all $i$, there exists a path from vertex $1$ to vertex $i$.\n\n### Output\n\nFor each query, output the answer to the query.\n\n### Examples\n\n#### Input #1\n\n```\n\n3 2\n\n3 9\n\n2 5\n\n1 2\n\n1 2\n\n2 3\n\n6\n\n1 4\n\n2 4\n\n3 4\n\n1 5\n\n2 5\n\n3 5\n\n```\n\n#### Output #1\n\n```\n9\n10\n11\n9\n14\n14\n```\n\n#### Input #2\n\n```\n\n4 4\n\n10 1000\n\n2 5\n\n1 2\n\n3 9\n\n1 2\n\n1 3\n\n2 4\n\n3 4\n\n9\n\n2 3\n\n3 3\n\n4 1\n\n4 2\n\n4 4\n\n4 5\n\n4 101\n\n4 102\n\n4 103\n\n```\n\n#### Output #2\n\n```\n5\n6\n2\n5\n11\n14\n10002\n10005\n10009\n```\n\n#### Input #3\n\n```\n\n6 8\n\n9 5\n\n4 1\n\n8 9\n\n10 4\n\n9 4\n\n8 2\n\n3 5\n\n4 6\n\n3 4\n\n2 3\n\n1 2\n\n2 5\n\n4 5\n\n1 3\n\n10\n\n3 12\n\n1 9\n\n6 47\n\n2 19\n\n1 129\n\n5 140\n\n2 148\n\n1 63\n\n2 43\n\n3 102\n\n```\n\n#### Output #3\n\n```\n10\n5\n46\n10\n70\n154\n81\n35\n21\n109\n```\n\n### Note\n\nFor the third query in the first example, we will play the game in the following order:\n\n- buy $1$ card with $9$ power from the trader on vertex $1$, and you'll still have $1$ coin after the trade.\n- move from vertex $1$ to vertex $2$.\n- move from vertex $2$ to vertex $3$.\n- buy $1$ card with $2$ power from the trader on vertex $3$, and you'll have no coins after the trade.\n\nIn the end, we will have $1$ card with $9$ power and $1$ card with $2$, so the sum of the power of the cards is $9+2=11$.\n\nFor the fifth query in the second example, we will play the game in the following order:\n\n- move from vertex $1$ to vertex $3$.\n- buy $1$ card with $2$ power from the trader on vertex $3$, and you'll still have $3$ coins after the trade.\n- move from vertex $3$ to vertex $4$.\n- buy $1$ card with $9$ power from the trader on vertex $4$, and you'll have no coins after the trade.\n\nIn the end, we will have $1$ card with $2$ power and $1$ card with $9$, so the sum of the power of the cards is $2+9=11$.\n\nFor the sixth query in the second example, we will play the game in the following order:\n\n- move from vertex $1$ to vertex $2$.\n- buy $1$ card with $5$ power from the trader on vertex $2$, and you'll still have $3$ coins after the trade.\n- move from vertex $2$ to vertex $4$.\n- buy $1$ card with $9$ power from the trader on vertex $4$, and you'll have no coins after the trade.\n\nIn the end, we will have $1$ card with $5$ power and $1$ card with $9$, so the sum of the power of the cards is $5+9=14$.\n\nFor the seventh query in the second example, we will play the game in the following order:\n\n- buy $10$ cards with $1000$ power from the trader on vertex $1$, and you'll still have $1$ coin after the trade.\n- move from vertex $1$ to vertex $3$.\n- buy $1$ card with $2$ power from the trader on vertex $3$, and you'll have no coins after the trade.\n- move from vertex $3$ to vertex $4$.\n\nIn the end, we will have $10$ cards with $1000$ power and $1$ card with $2$ power, so the sum of the power of the cards is $10 \\cdot 1000+2=10\\,002$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2115e/lcbpro-2115e.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1977,
    "total_output_tokens": 2000,
    "trial_started_at": "2025-09-06T01:49:51.989759+00:00",
    "trial_ended_at": "2025-09-06T01:53:14.895212+00:00",
    "agent_started_at": "2025-09-06T01:50:18.770810+00:00",
    "agent_ended_at": "2025-09-06T01:50:53.327806+00:00",
    "test_started_at": "2025-09-06T01:50:58.910985+00:00",
    "test_ended_at": "2025-09-06T01:53:02.074121+00:00"
}