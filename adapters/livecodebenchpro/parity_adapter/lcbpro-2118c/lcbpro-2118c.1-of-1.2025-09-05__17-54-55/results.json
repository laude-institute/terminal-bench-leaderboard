{
    "id": "4f631d1a-29bc-44bc-a683-b508f8c344d7",
    "trial_name": "lcbpro-2118c.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2118c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2118C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given an array $a$ of $n$ integers. We define the $\\text{beauty}$ of a number $x$ to be the number of $1$ bits in its binary representation. We define the beauty of an array to be the sum of beauties of the numbers it contains.\n\nIn one operation, you can select an index $i$ $(1 \\le i \\le n)$ and increase $a_i$ by $1$.\n\nFind the maximum beauty of the array after doing at most $k$ operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 5000$, $0 \\le k \\le 10^{18}$) -- the length of the array and the maximal number of operations.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots a_n$ ($0 \\le a_i \\le 10^9$) --denoting the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer, the maximum beauty after at most $k$ operations.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5 2\n\n0 1 7 2 4\n\n5 3\n\n0 1 7 2 4\n\n1 1\n\n3\n\n3 0\n\n2 0 3\n\n1 100000000000\n\n0\n\n```\n\n#### Output #1\n\n```\n8\n9\n2\n3\n36\n```\n\n### Note\n\nIn the first test case, $a = [0, 1, 7, 2, 4]$.\n\n- apply the first operation at $i = 1$, the new array is $a = [1, 1, 7, 2, 4]$\n- apply the second operation at $i = 4$, the new array is $a = [1, 1, 7, 3, 4]$\n\nThe beauty of this array is $1 + 1 + 3 + 2 + 1 = 8$. One of the other valid solutions with the same beauty is $[0, 1, 7, 3, 5]$.\n\nIn the third test case, $a = [3]$. Since you are not required to use exactly $k$ operations, it is optimal to do none.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2118c/lcbpro-2118c.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 985,
    "total_output_tokens": 776,
    "trial_started_at": "2025-09-06T01:44:43.069278+00:00",
    "trial_ended_at": "2025-09-06T01:45:44.340389+00:00",
    "agent_started_at": "2025-09-06T01:45:01.087297+00:00",
    "agent_ended_at": "2025-09-06T01:45:12.320374+00:00",
    "test_started_at": "2025-09-06T01:45:16.555568+00:00",
    "test_ended_at": "2025-09-06T01:45:23.419950+00:00"
}