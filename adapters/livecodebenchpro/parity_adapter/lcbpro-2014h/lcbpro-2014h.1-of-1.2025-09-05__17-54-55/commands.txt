['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIGNpbi50aWUobnVsbHB0cik7CiAgICBpbnQgdDsKICAgIGNpbiA+PiB0OwogICAgd2hpbGUgKHQtLSkgewogICAgICAgIGludCBuLCBxOwogICAgICAgIGNpbiA+PiBuID4+IHE7CiAgICAgICAgdmVjdG9yPGludD4gYShuICsgMSk7CiAgICAgICAgZm9yIChpbnQgaSA9IDE7IGkgPD0gbjsgKytpKSB7CiAgICAgICAgICAgIGNpbiA+PiBhW2ldOwogICAgICAgIH0KCiAgICAgICAgLy8gU29ydCB0aGUgc3ViYXJyYXkgZm9yIGVhY2ggcXVlcnkgaXMgbm90IGZlYXNpYmxlIGR1ZSB0byBjb25zdHJhaW50cy4KICAgICAgICAvLyBJbnN0ZWFkLCBwcmVjb21wdXRlIHByZWZpeCBzdW1zIG9mIHNvcnRlZCBzZWdtZW50cy4KICAgICAgICAvLyBIb3dldmVyLCBxdWVyaWVzIGFyZSBvbiBhcmJpdHJhcnkgc2VnbWVudHMuCiAgICAgICAgLy8gV2Ugd2lsbCBhbnN3ZXIgZWFjaCBxdWVyeSBpbmRlcGVuZGVudGx5IGJ5IHNvcnRpbmcgdGhlIHNlZ21lbnQgYW5kIHNpbXVsYXRpbmcgdGhlIHBpY2tzLgogICAgICAgIC8vIEJ1dCBPKHEgKiAoci1sKzEpIGxvZyAoci1sKzEpKSBpcyB0b28gYmlnLgoKICAgICAgICAvLyBPYnNlcnZhdGlvbjoKICAgICAgICAvLyBCb3RoIHBsYXllcnMgcGljayBvcHRpbWFsbHksIHRha2luZyB0aGUgbGFyZ2VzdCBhdmFpbGFibGUgdGFyZ2V0IGVhY2ggdHVybi4KICAgICAgICAvLyBTbywgdGhlIGdhbWUgc2NvcmUgZGlmZmVyZW5jZSBkZXBlbmRzIG9uIHN1bSBvZiBlbGVtZW50cyBhdCBldmVuIGFuZCBvZGQgaW5kaWNlcyBhZnRlciBzb3J0aW5nIGRlc2NlbmRpbmcuCgogICAgICAgIC8vIFRvIGhhbmRsZSBsYXJnZSBxLCB3ZSB3aWxsIHByb2Nlc3MgZWFjaCBxdWVyeSBieSBleHRyYWN0aW5nIHRoZSBzZWdtZW50LCBzb3J0aW5nIGRlc2NlbmRpbmcsCiAgICAgICAgLy8gYW5kIGNvbXB1dGluZyBzY29yZXMuIEJ1dCB0aGlzIGlzIHRvbyBzbG93IGZvciB3b3JzdCBjYXNlLgoKICAgICAgICAvLyBTaW5jZSB3ZSBoYXZlIGxhcmdlIHEgYW5kIG4sIHdlIG5lZWQgYSBmYXN0ZXIgYXBwcm9hY2guCgogICAgICAgIC8vIEFsdGVybmF0aXZlIGFwcHJvYWNoOgogICAgICAgIC8vIFByZWNvbXB1dGUgcHJlZml4IHN1bXMgb2Ygc29ydGVkIGFycmF5PwogICAgICAgIC8vIE5vLCBxdWVyaWVzIGFyZSBvbiBzdWJhcnJheXMuCgogICAgICAgIC8vIFdlIGNhbiB1c2UgYSBwZXJzaXN0ZW50IHNlZ21lbnQgdHJlZSBvciBhIGRhdGEgc3RydWN0dXJlIHRvIGdldCB0aGUgc29ydGVkIHN1YnNlcXVlbmNlIHN1bXMgZm9yIHF1ZXJpZXMuCgogICAgICAgIC8vIEJ1dCBjb25zdHJhaW50cyBhcmUgbGFyZ2UuCgogICAgICAgIC8vIFNpbmNlIGFfaSB1cCB0byAxMF42LCB3ZSBjYW4gYnVja2V0IGNvdW50cy4KCiAgICAgICAgLy8gRnJlcXVlbmN5IGFycmF5IGZvciB0aGUgc2VnbWVudD8KCiAgICAgICAgLy8gV2UgY2FuIHVzZSBhIHNlZ21lbnQgdHJlZSB3aXRoIGZyZXF1ZW5jeSBjb3VudHMgZm9yIHZhbHVlcyAxIHRvIDEwXjYuCgogICAgICAgIC8vIEZvciBlYWNoIHF1ZXJ5OgogICAgICAgIC8vIDEpIGdldCBmcmVxdWVuY3kgY291bnRzIG9mIHZhbHVlcyBpbiBbbCxyXQogICAgICAgIC8vIDIpIHNpbXVsYXRlIHBpY2tpbmcgbGFyZ2VzdCB2YWx1ZXMgYWx0ZXJuYXRlbHkKCiAgICAgICAgLy8gSW1wbGVtZW50IHNlZ21lbnQgdHJlZSB3aXRoIGZyZXF1ZW5jeSBjb3VudHMuCgogICAgICAgIGNvbnN0IGludCBNQVhBID0gMScwMDAnMDAwOwoKICAgICAgICBzdHJ1Y3QgTm9kZSB7CiAgICAgICAgICAgIHZlY3RvcjxpbnQ+IGZyZXE7CiAgICAgICAgICAgIE5vZGUoKSA6IGZyZXEoTUFYQSsxLCAwKSB7fQogICAgICAgIH07CgogICAgICAgIC8vIFRoaXMgaXMgdG9vIGJpZyBmb3IgbWVtb3J5LgoKICAgICAgICAvLyBPcHRpbWl6ZSBtZW1vcnk6CiAgICAgICAgLy8gVXNlIHNlZ21lbnQgdHJlZSB3aXRoIG1hcCBvciB2ZWN0b3IgZm9yIGZyZXF1ZW5jeSBjb3VudHMgaXMgaW1wb3NzaWJsZS4KCiAgICAgICAgLy8gQWx0ZXJuYXRpdmUgYXBwcm9hY2g6CiAgICAgICAgLy8gVXNlIGNvb3JkaW5hdGUgY29tcHJlc3Npb24gYW5kIHNlZ21lbnQgdHJlZT8KCiAgICAgICAgLy8gU2luY2UgYV9pIHVwIHRvIDFlNiwgd2UgY2FuIHVzZSBhIHNlZ21lbnQgdHJlZSB3aGVyZSBlYWNoIG5vZGUgc3RvcmVzIGNvdW50IG9mIHZhbHVlcyBpbiBpdHMgcmFuZ2UuCgogICAgICAgIC8vIEJ1aWxkIHNlZ21lbnQgdHJlZSBmb3IgZnJlcXVlbmN5IGNvdW50cy4KCiAgICAgICAgLy8gVHJlZSBzaXplIHJvdWdobHkgNCoxZTYgPSA0IG1pbGxpb24gbm9kZXMuCgogICAgICAgIC8vIFRvbyBsYXJnZS4KCiAgICAgICAgLy8gQWx0ZXJuYXRpdmUgYXBwcm9hY2g6CiAgICAgICAgLy8gVXNlIG9mZmxpbmUgcXVlcmllcyBhbmQgTU8ncyBhbGdvcml0aG0gdG8gbWFpbnRhaW4gZnJlcXVlbmN5IGNvdW50cy4KCiAgICAgICAgLy8gTU8ncyBhbGdvcml0aG06CiAgICAgICAgLy8gU29ydCBxdWVyaWVzIGJ5IGJsb2NrcyBhbmQgcHJvY2VzcyBhZGRpbmcvcmVtb3ZpbmcgZWxlbWVudHMuCgogICAgICAgIC8vIEZvciBlYWNoIHF1ZXJ5LCB3ZSBoYXZlIGZyZXF1ZW5jeSBjb3VudHMuCiAgICAgICAgLy8gVGhlbiB3ZSBjYW4gc2ltdWxhdGUgcGlja2luZyBsYXJnZXN0IHZhbHVlcyBhbHRlcm5hdGVseS4KCiAgICAgICAgLy8gSW1wbGVtZW50IE1PJ3MgYWxnb3JpdGhtLgoKICAgICAgICBpbnQgYmxvY2tfc2l6ZSA9IHN0YXRpY19jYXN0PGludD4oc3FydChuKSk7CgogICAgICAgIHN0cnVjdCBRdWVyeSB7CiAgICAgICAgICAgIGludCBsLCByLCBpZHg7CiAgICAgICAgfTsKCiAgICAgICAgdmVjdG9yPFF1ZXJ5PiBxdWVyaWVzKHEpOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgcTsgKytpKSB7CiAgICAgICAgICAgIGNpbiA+PiBxdWVyaWVzW2ldLmwgPj4gcXVlcmllc1tpXS5yOwogICAgICAgICAgICBxdWVyaWVzW2ldLmlkeCA9IGk7CiAgICAgICAgfQoKICAgICAgICAvLyBTb3J0IHF1ZXJpZXMgYWNjb3JkaW5nIHRvIE1PJ3Mgb3JkZXIKICAgICAgICBzb3J0KHF1ZXJpZXMuYmVnaW4oKSwgcXVlcmllcy5lbmQoKSwgWyZdKGNvbnN0IFF1ZXJ5ICZhLCBjb25zdCBRdWVyeSAmYikgewogICAgICAgICAgICBpbnQgYmxvY2tfYSA9IGEubCAvIGJsb2NrX3NpemU7CiAgICAgICAgICAgIGludCBibG9ja19iID0gYi5sIC8gYmxvY2tfc2l6ZTsKICAgICAgICAgICAgaWYgKGJsb2NrX2EgIT0gYmxvY2tfYikgcmV0dXJuIGJsb2NrX2EgPCBibG9ja19iOwogICAgICAgICAgICByZXR1cm4gKGJsb2NrX2EgJiAxKSA/IChhLnIgPiBiLnIpIDogKGEuciA8IGIucik7CiAgICAgICAgfSk7CgogICAgICAgIHZlY3RvcjxpbnQ+IGZyZXEoTUFYQSArIDEsIDApOwogICAgICAgIGludCBjdXJfbCA9IDEsIGN1cl9yID0gMDsKCiAgICAgICAgLy8gV2UgbmVlZCBhIGRhdGEgc3RydWN0dXJlIHRvIHN0b3JlIGZyZXF1ZW5jaWVzIGFuZCBnZXQgdGhlIHNlcXVlbmNlIG9mIHZhbHVlcyBzb3J0ZWQgZGVzY2VuZGluZyBieSB2YWx1ZSBhbmQgdGhlaXIgY291bnRzLgoKICAgICAgICAvLyBTaW5jZSB2YWx1ZXMgY2FuIGJlIHVwIHRvIDFlNiwgd2UgY2FuIG1haW50YWluIGEgRmVud2ljayB0cmVlIG9yIEJJVCBmb3IgY291bnRpbmcgZnJlcXVlbmNpZXMuCgogICAgICAgIC8vIFdlJ2xsIG1haW50YWluIGEgQklUIG92ZXIgdmFsdWUgZnJlcXVlbmN5IGNvdW50cy4KCiAgICAgICAgLy8gQnV0IHdlIGFsc28gbmVlZCB0byByZWNvbnN0cnVjdCB0aGUgc2VxdWVuY2Ugb2YgdmFsdWVzIHdpdGggdGhlaXIgZnJlcXVlbmNpZXMuCgogICAgICAgIC8vIEZvciBzaW11bGF0aW9uOgogICAgICAgIC8vIFRoZSBwaWNraW5nIG9yZGVyIGlzIHNvcnRlZCBkZXNjZW5kaW5nIG9mIHZhbHVlcy4KICAgICAgICAvLyBTbyB3ZSBuZWVkIHRvIGl0ZXJhdGUgZnJvbSBsYXJnZXN0IHZhbHVlIGRvd24uCgogICAgICAgIC8vIFRvIG9wdGltaXplLCBrZWVwIHRyYWNrIG9mIGFsbCB2YWx1ZXMgY3VycmVudGx5IHByZXNlbnQgaW4gdGhlIGZyZXF1ZW5jeSBzdHJ1Y3R1cmUuCgogICAgICAgIC8vIFdlJ2xsIGtlZXAgdHJhY2sgb2YgbWF4IHZhbHVlIGN1cnJlbnRseSBpbiB0aGUgZnJlcXVlbmN5LgoKICAgICAgICBpbnQgbWF4X3ZhbCA9IDA7CgogICAgICAgIC8vIEFuc3dlcnMKICAgICAgICB2ZWN0b3I8c3RyaW5nPiBhbnMocSk7CgogICAgICAgIGF1dG8gYWRkID0gWyZdKGludCBwb3MpIHsKICAgICAgICAgICAgaW50IHZhbCA9IGFbcG9zXTsKICAgICAgICAgICAgZnJlcVt2YWxdKys7CiAgICAgICAgICAgIGlmICh2YWwgPiBtYXhfdmFsKSBtYXhfdmFsID0gdmFsOwogICAgICAgIH07CgogICAgICAgIGF1dG8gcmVtb3ZlID0gWyZdKGludCBwb3MpIHsKICAgICAgICAgICAgaW50IHZhbCA9IGFbcG9zXTsKICAgICAgICAgICAgZnJlcVt2YWxdLS07CiAgICAgICAgICAgIGlmICh2YWwgPT0gbWF4X3ZhbCAmJiBmcmVxW3ZhbF0gPT0gMCkgewogICAgICAgICAgICAgICAgd2hpbGUgKG1heF92YWwgPiAwICYmIGZyZXFbbWF4X3ZhbF0gPT0gMCkgLS1tYXhfdmFsOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgLy8gRm9yIGVhY2ggcXVlcnksIHNpbXVsYXRlIHBpY2tpbmc6CiAgICAgICAgLy8gU2luY2UgdG90YWwgc3VtIG9mIHEgYW5kIG4gaXMgMmU1LCBhbmQgdmFsdWVzIHVwIHRvIDFlNiwgaXRlcmF0aW5nIG92ZXIgYWxsIHZhbHVlcyBwZXIgcXVlcnkgaXMgdG9vIHNsb3cuCgogICAgICAgIC8vIE9wdGltaXphdGlvbjoKICAgICAgICAvLyBLZWVwIGEgc2V0IG9mIHZhbHVlcyB3aXRoIGZyZXEgPiAwLgoKICAgICAgICAvLyBJbnN0ZWFkIG9mIHNldCwgd2UgY2FuIGtlZXAgYSBzZWdtZW50IHRyZWUgZm9yIGZyZXF1ZW5jaWVzIG92ZXIgWzEuLjFlNl0uCgogICAgICAgIC8vIEltcGxlbWVudCBzZWdtZW50IHRyZWUgdG8gZ2V0IG1heCB2YWx1ZSB3aXRoIGZyZXEgPiAwLgoKICAgICAgICBzdHJ1Y3QgU2VnVHJlZSB7CiAgICAgICAgICAgIGludCBzaXplOwogICAgICAgICAgICB2ZWN0b3I8aW50PiB0cmVlOwogICAgICAgICAgICB2b2lkIGluaXQoaW50IG4pIHsKICAgICAgICAgICAgICAgIHNpemUgPSAxOwogICAgICAgICAgICAgICAgd2hpbGUgKHNpemUgPCBuKSBzaXplIDw8PSAxOwogICAgICAgICAgICAgICAgdHJlZS5hc3NpZ24oMiAqIHNpemUsIDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZvaWQgdXBkYXRlKGludCBwb3MsIGludCB2YWwpIHsKICAgICAgICAgICAgICAgIHBvcyArPSBzaXplOwogICAgICAgICAgICAgICAgdHJlZVtwb3NdID0gdmFsOwogICAgICAgICAgICAgICAgd2hpbGUgKHBvcyA+IDEpIHsKICAgICAgICAgICAgICAgICAgICBwb3MgPj49IDE7CiAgICAgICAgICAgICAgICAgICAgdHJlZVtwb3NdID0gdHJlZVtwb3M8PDFdICsgdHJlZVsocG9zPDwxKXwxXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpbnQgcXVlcnlfbWF4KCkgewogICAgICAgICAgICAgICAgaWYgKHRyZWVbMV0gPT0gMCkgcmV0dXJuIDA7CiAgICAgICAgICAgICAgICBpbnQgcG9zID0gMTsKICAgICAgICAgICAgICAgIHdoaWxlIChwb3MgPCBzaXplKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRyZWVbKHBvczw8MSl8MV0gPiAwKSBwb3MgPSAocG9zPDwxKXwxOwogICAgICAgICAgICAgICAgICAgIGVsc2UgcG9zIDw8PSAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHBvcyAtIHNpemU7CiAgICAgICAgICAgIH0KICAgICAgICB9IHNlZzsKCiAgICAgICAgc2VnLmluaXQoTUFYQSArIDEpOwoKICAgICAgICBhdXRvIHNlZ19hZGQgPSBbJl0oaW50IHZhbCkgewogICAgICAgICAgICBmcmVxW3ZhbF0rKzsKICAgICAgICAgICAgc2VnLnVwZGF0ZSh2YWwsIDEpOwogICAgICAgIH07CgogICAgICAgIGF1dG8gc2VnX3JlbW92ZSA9IFsmXShpbnQgdmFsKSB7CiAgICAgICAgICAgIGZyZXFbdmFsXS0tOwogICAgICAgICAgICBpZiAoZnJlcVt2YWxdID09IDApIHNlZy51cGRhdGUodmFsLCAwKTsKICAgICAgICB9OwoKICAgICAgICBjdXJfbCA9IDE7IGN1cl9yID0gMDsKCiAgICAgICAgZm9yIChhdXRvICZxcnkgOiBxdWVyaWVzKSB7CiAgICAgICAgICAgIGludCBMID0gcXJ5LmwsIFIgPSBxcnkucjsKICAgICAgICAgICAgd2hpbGUgKGN1cl9yIDwgUikgewogICAgICAgICAgICAgICAgY3VyX3IrKzsKICAgICAgICAgICAgICAgIHNlZ19hZGQoYVtjdXJfcl0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHdoaWxlIChjdXJfciA+IFIpIHsKICAgICAgICAgICAgICAgIHNlZ19yZW1vdmUoYVtjdXJfcl0pOwogICAgICAgICAgICAgICAgY3VyX3ItLTsKICAgICAgICAgICAgfQogICAgICAgICAgICB3aGlsZSAoY3VyX2wgPCBMKSB7CiAgICAgICAgICAgICAgICBzZWdfcmVtb3ZlKGFbY3VyX2xdKTsKICAgICAgICAgICAgICAgIGN1cl9sKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hpbGUgKGN1cl9sID4gTCkgewogICAgICAgICAgICAgICAgY3VyX2wtLTsKICAgICAgICAgICAgICAgIHNlZ19hZGQoYVtjdXJfbF0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBOb3cgc2ltdWxhdGUgdGhlIGdhbWUKICAgICAgICAgICAgLy8gQ29weSBmcmVxIGFycmF5IHRvIGxvY2FsIGZyZXEyCiAgICAgICAgICAgIHZlY3RvcjxpbnQ+IGZyZXEyOwogICAgICAgICAgICBmcmVxMi5zd2FwKGZyZXEyKTsKICAgICAgICAgICAgZnJlcTIucmVzaXplKE1BWEEgKyAxLCAwKTsKICAgICAgICAgICAgZm9yIChpbnQgaSA9IEw7IGkgPD0gUjsgKytpKSBmcmVxMlthW2ldXSsrOwoKICAgICAgICAgICAgaW50IHRvdGFsX2xlbiA9IFIgLSBMICsgMTsKICAgICAgICAgICAgbG9uZyBsb25nIHNjb3JlX3JvYmluID0gMCwgc2NvcmVfc2hlcmlmZiA9IDA7CgogICAgICAgICAgICAvLyBwaWNrIGFsdGVybmF0ZWx5IGZyb20gbGFyZ2VzdCB2YWx1ZXMuCiAgICAgICAgICAgIC8vIHdlIGNhbiBpdGVyYXRlIGZyb20gbGFyZ2VzdCB0byBzbWFsbGVzdAogICAgICAgICAgICBpbnQgdHVybiA9IDA7IC8vIDAgZm9yIFJvYmluLCAxIGZvciBTaGVyaWZmCiAgICAgICAgICAgIGZvciAoaW50IHZhbCA9IE1BWEE7IHZhbCA+PSAxOyAtLXZhbCkgewogICAgICAgICAgICAgICAgd2hpbGUgKGZyZXEyW3ZhbF0gPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR1cm4gPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBzY29yZV9yb2JpbiArPSB2YWw7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVfc2hlcmlmZiArPSB2YWw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGZyZXEyW3ZhbF0tLTsKICAgICAgICAgICAgICAgICAgICB0dXJuIF49IDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzY29yZV9zaGVyaWZmID49IHNjb3JlX3JvYmluKSBhbnNbcXJ5LmlkeF0gPSAiWUVTIjsKICAgICAgICAgICAgZWxzZSBhbnNbcXJ5LmlkeF0gPSAiTk8iOwogICAgICAgIH0KCiAgICAgICAgZm9yIChhdXRvICZyZXMgOiBhbnMpIHsKICAgICAgICAgICAgY291dCA8PCByZXMgPDwgIlxuIjsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
