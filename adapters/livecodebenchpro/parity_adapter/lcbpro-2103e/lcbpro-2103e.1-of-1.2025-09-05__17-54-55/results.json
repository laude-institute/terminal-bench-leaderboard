{
    "id": "8ab53139-6f5a-4396-8900-c03c84a2ffcf",
    "trial_name": "lcbpro-2103e.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2103e",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2103E)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given an integer $k$ and an array $a$ of length $n$, where each element satisfies $0 \\le a_i \\le k$ for all $1 \\le i \\le n$. You can perform the following operation on the array:\n\n- Choose two distinct indices $i$ and $j$ ($1 \\le i,j \\le n$ and $i \\neq j$) such that $a_i + a_j = k$.\n- Select an integer $x$ satisfying $-a_j \\le x \\le a_i$.\n- Decrease $a_i$ by $x$ and increase $a_j$ by $x$. In other words, update $a_i := a_i - x$ and $a_j := a_j + x$.\n\nNote that the constraints on $x$ ensure that all elements of array $a$ remain between $0$ and $k$ throughout the operations.\n\nYour task is to determine whether it is possible to make the array $a$ non-decreasing$^{\\text{∗}}$ using the above operation. If it is possible, find a sequence of at most $3n$ operations that transforms the array into a non-decreasing one.\n\nIt can be proven that if it is possible to make the array non-decreasing using the above operation, there exists a solution that uses at most $3n$ operations.\n\n$^{\\text{∗}}$ An array $a_1, a_2, \\ldots, a_n$ is said to be non-decreasing if for all $1 \\le i \\le n - 1$, it holds that $a_i \\le a_{i+1}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers, $n$ and $k$ ($4 \\le n \\le 2 \\cdot 10^5$, $1 \\le k \\le 10^9$) -- the length of the array $a$ and the required sum for the operation.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le k$) -- the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $-1$ if it is not possible to make the array non-decreasing using the operation.\n\nOtherwise, output the number of operations $m$ ($0 \\le m \\le 3n$). On each of the next $m$ lines, output three integers $i$, $j$, and $x$ representing an operation where $a_i$ is decreased by $x$ and $a_j$ is increased by $x$.\n\nNote that you are not required to minimize the number of operations. If there are multiple solutions requiring at most $3n$ operations, you may output any.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 100\n\n1 2 3 4 5\n\n5 6\n\n1 2 3 5 4\n\n5 7\n\n7 1 5 3 1\n\n10 10\n\n2 5 3 2 7 3 1 8 4 0\n\n```\n\n#### Output #1\n\n```\n0\n1\n4 1 1\n-1\n6\n1 8 2\n3 5 2\n5 7 3\n5 9 3\n8 10 5\n2 10 4```\n\n### Note\n\nIn the first test case, the array is already non-decreasing, so we do not need to perform any operations.\n\nIn the second test case, we can perform an operation with $i=4$, $j=1$, and $x=1$. $a_4$ decreases by $1$ to become $5 - 1 = 4$ while $a_1$ increases by $1$ to become $1 + 1 = 2$. After the operation, the array becomes $[2, 2, 3, 4, 4]$, which is non-decreasing.\n\nNote that there are other ways to make the array non-decreasing, all of which would be considered correct as long as they do not use more than $3 \\cdot n = 15$ operations.\n\nIn the third test case, it is not possible to make the array non-decreasing. This is because there are no distinct pairs of indices $i$ and $j$ where $a_i + a_j = 7$, so no operation can be done on the array.\n\nIn the fourth test case, the array is transformed as follows:\n\n1. $[\\textbf{0}, 5, 3, 2, 7, 3, 1, \\textbf{10}, 4, 0]$\n2. $[0, 5, \\textbf{1}, 2, \\textbf{9}, 3, 1, 10, 4, 0]$\n3. $[0, 5, 1, 2, \\textbf{6}, 3, \\textbf{4}, 10, 4, 0]$\n4. $[0, 5, 1, 2, \\textbf{3}, 3, 4, 10, \\textbf{7}, 0]$\n5. $[0, 5, 1, 2, 3, 3, 4, \\textbf{5}, 7, \\textbf{5}]$\n6. $[0, \\textbf{1}, 1, 2, 3, 3, 4, 5, 7, \\textbf{9}]$",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2103e/lcbpro-2103e.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1697,
    "total_output_tokens": 2286,
    "trial_started_at": "2025-09-06T01:40:54.679230+00:00",
    "trial_ended_at": "2025-09-06T01:42:06.248574+00:00",
    "agent_started_at": "2025-09-06T01:41:07.603643+00:00",
    "agent_ended_at": "2025-09-06T01:41:41.783898+00:00",
    "test_started_at": "2025-09-06T01:41:46.532168+00:00",
    "test_ended_at": "2025-09-06T01:41:50.926283+00:00"
}