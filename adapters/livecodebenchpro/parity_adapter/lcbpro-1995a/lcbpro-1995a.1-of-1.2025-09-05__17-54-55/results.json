{
    "id": "65ad062d-cf57-4d35-9302-af9c31bec4fb",
    "trial_name": "lcbpro-1995a.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-1995a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 1995A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nVitaly503 is given a checkered board with a side of $n$ and $k$ chips. He realized that all these $k$ chips need to be placed on the cells of the board (no more than one chip can be placed on a single cell).\n\nLet's denote the cell in the $i$-th row and $j$-th column as $(i ,j)$. A diagonal is the set of cells for which the value $i + j$ is the same. For example, cells $(3, 1)$, $(2, 2)$, and $(1, 3)$ lie on the same diagonal, but $(1, 2)$ and $(2, 3)$ do not. A diagonal is called occupied if it contains at least one chip.\n\nDetermine what is the minimum possible number of occupied diagonals among all placements of $k$ chips.\n\n### Input\n\nEach test consists of several sets of input data. The first line contains a single integer $t$ ($1 \\le t \\le 500$) -- the number of sets of input data. Then follow the descriptions of the sets of input data.\n\nThe only line of each set of input data contains two integers $n$, $k$ ($1 \\le n \\le 100, 0 \\le k \\le n^2$) -- the side of the checkered board and the number of available chips, respectively.\n\n### Output\n\nFor each set of input data, output a single integer -- the minimum number of occupied diagonals with at least one chip that he can get after placing all $k$ chips.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n1 0\n\n2 2\n\n2 3\n\n2 4\n\n10 50\n\n100 239\n\n3 9\n\n```\n\n#### Output #1\n\n```\n0\n1\n2\n3\n6\n3\n5\n```\n\n### Note\n\nIn the first test case, there are no chips, so 0 diagonals will be occupied. In the second test case, both chips can be placed on diagonal $(2, 1), (1, 2)$, so the answer is 1. In the third test case, 3 chips can't be placed on one diagonal, but placing them on $(1, 2), (2, 1), (1, 1)$ makes 2 diagonals occupied. In the 7th test case, chips will occupy all 5 diagonals in any valid placing.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-1995a/lcbpro-1995a.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 931,
    "total_output_tokens": 525,
    "trial_started_at": "2025-09-06T01:08:18.852659+00:00",
    "trial_ended_at": "2025-09-06T01:11:00.906299+00:00",
    "agent_started_at": "2025-09-06T01:08:30.510800+00:00",
    "agent_ended_at": "2025-09-06T01:08:38.563375+00:00",
    "test_started_at": "2025-09-06T01:08:40.360558+00:00",
    "test_ended_at": "2025-09-06T01:10:44.042725+00:00"
}