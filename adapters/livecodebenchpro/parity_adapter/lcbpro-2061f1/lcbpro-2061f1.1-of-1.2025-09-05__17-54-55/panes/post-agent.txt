root@02301fe3e4a1:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIG
Npbi50aWUobnVsbHB0cik7CiAgICBpbnQgVDsgY2luID4+IFQ7CiAgICB3aGlsZSAoVC0tKSB7CiAgICAgICAgc3RyaW5nIHMsIHQ7CiAgICAgICAgY2luID4+IHMgPj4gdDsKICAgICAgICBpbnQgbiA9IChpbn
Qpcy5zaXplKCk7CiAgICAgICAgLy8gQ291bnQgdG90YWwgemVybyBhbmQgb25lIGluIHMKICAgICAgICBpbnQgY250MF9zID0gY291bnQocy5iZWdpbigpLCBzLmVuZCgpLCAnMCcpOwogICAgICAgIGludCBjbn
QxX3MgPSBuIC0gY250MF9zOwogICAgICAgIC8vIENvdW50IHRvdGFsIHplcm8gYW5kIG9uZSBpbiB0CiAgICAgICAgaW50IGNudDBfdCA9IDAsIGNudDFfdCA9IDA7CiAgICAgICAgZm9yIChjaGFyIGMgOiB0KS
B7CiAgICAgICAgICAgIGlmIChjID09ICcwJykgY250MF90Kys7CiAgICAgICAgICAgIGVsc2UgaWYgKGMgPT0gJzEnKSBjbnQxX3QrKzsKICAgICAgICB9CiAgICAgICAgLy8gSWYgdCByZXF1aXJlcyBtb3JlIH
plcm9zIG9yIG9uZXMgdGhhbiBzIGhhcywgaW1wb3NzaWJsZQogICAgICAgIGlmIChjbnQwX3QgPiBjbnQwX3MgfHwgY250MV90ID4gY250MV9zKSB7CiAgICAgICAgICAgIGNvdXQgPDwgLTEgPDwgJ1xuJzsKIC
AgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIC8vIFJlcGxhY2UgJz8nIGluIHQgd2l0aCBzJ3MgcmVtYWluaW5nIGNoYXJzIHRvIG1ha2UgdCBmdWxseSBzcGVjaWZpZWQKICAgICAgICAvLy
BBY3R1YWxseSwgd2UgZG9uJ3QgbmVlZCB0byBidWlsZCBmaW5hbCB0LCBqdXN0IGNvbnNpZGVyIHRfaSAhPSAnPycgcG9zaXRpb25zCiAgICAgICAgLy8gQnVpbGQgdmVjdG9yIG9mIGJsb2NrcyBmb3IgcwogIC
AgICAgIHZlY3RvcjxwYWlyPGNoYXIsaW50Pj4gc19ibG9ja3M7CiAgICAgICAgewogICAgICAgICAgICBjaGFyIGxhc3QgPSBzWzBdOwogICAgICAgICAgICBpbnQgbGVuID0gMTsKICAgICAgICAgICAgZm9yIC
hpbnQgaSA9IDE7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChzW2ldID09IGxhc3QpIGxlbisrOwogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc19ibG9ja3MuZW
1wbGFjZV9iYWNrKGxhc3QsbGVuKTsKICAgICAgICAgICAgICAgICAgICBsYXN0ID0gc1tpXTsKICAgICAgICAgICAgICAgICAgICBsZW4gPSAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgIC
AgICAgICAgIHNfYmxvY2tzLmVtcGxhY2VfYmFjayhsYXN0LGxlbik7CiAgICAgICAgfQogICAgICAgIC8vIEJ1aWxkIHZlY3RvciBvZiBibG9ja3MgZm9yIHQKICAgICAgICB2ZWN0b3I8cGFpcjxjaGFyLGludD
4+IHRfYmxvY2tzOwogICAgICAgIHsKICAgICAgICAgICAgY2hhciBsYXN0ID0gdFswXTsKICAgICAgICAgICAgaW50IGxlbiA9IDE7CiAgICAgICAgICAgIGZvciAoaW50IGkgPSAxOyBpIDwgbjsgaSsrKSB7Ci
AgICAgICAgICAgICAgICBpZiAodFtpXSA9PSBsYXN0KSBsZW4rKzsKICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRfYmxvY2tzLmVtcGxhY2VfYmFjayhsYXN0LGxlbik7CiAgIC
AgICAgICAgICAgICAgICAgbGFzdCA9IHRbaV07CiAgICAgICAgICAgICAgICAgICAgbGVuID0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB0X2Jsb2Nrcy5lbXBsYWNlX2
JhY2sobGFzdCxsZW4pOwogICAgICAgIH0KICAgICAgICAvLyBGb3IgdCBibG9ja3MsICc/JyBjYW5ub3QgYXBwZWFyIC0gcHJvYmxlbSBzdGF0ZXMgdCBvbmx5IDAgYW5kIDEgaW4gdGhpcyBlYXN5IHZlcnNpb2
4KICAgICAgICAvLyBBY3R1YWxseSBwcm9ibGVtIHN0YXRlcyB0IGNhbiBjb250YWluICc/JywgYnV0IGluIGVhc3kgdmVyc2lvbiB0IGNvbnNpc3RzIG9mIG9ubHkgMCBhbmQgMQogICAgICAgIC8vIFNvIG5vIC
c/JyBoZXJlIChwcm9ibGVtIHN0YXRlbWVudCBzYXlzIGRpZmZlcmVuY2UgaXMgdCBpbiB0aGlzIHZlcnNpb24gb25seSAwIGFuZCAxKQogICAgICAgIC8vIENoZWNrIGlmIG51bWJlciBvZiBibG9ja3MgaW4gcy
BhbmQgdCBkaWZmZXIKICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIGlmIG51bWJlciBvZiBibG9ja3MgaW4gdCBpcyBub3QgZXF1YWwgdG8gbnVtYmVyIG9mIGJsb2NrcyBpbiBzCiAgICAgICAgaWYgKChpbn
Qpc19ibG9ja3Muc2l6ZSgpICE9IChpbnQpdF9ibG9ja3Muc2l6ZSgpKSB7CiAgICAgICAgICAgIGNvdXQgPDwgLTEgPDwgJ1xuJzsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGludC
BtID0gKGludClzX2Jsb2Nrcy5zaXplKCk7CiAgICAgICAgLy8gQ2hlY2sgdGhhdCBudW1iZXIgb2YgemVyb3MgYW5kIG9uZXMgaW4gZWFjaCBibG9jayBtYXRjaAogICAgICAgIC8vIEJlY2F1c2Ugd2UgY2FuIG
9ubHkgc3dhcCBhZGphY2VudCBibG9ja3MsIHRoZSBtdWx0aXNldCBvZiBibG9jayBsZW5ndGhzIGZvciBlYWNoIGNoYXIgbXVzdCBiZSB0aGUgc2FtZQogICAgICAgIC8vIEFjdHVhbGx5LCBwcm9ibGVtIHN0YX
RlcyBtaW5pbWFsIG51bWJlciBvZiBzd2FwcyBvZiBhZGphY2VudCBibG9ja3MgdG8gZ2V0IGZyb20gcyB0byB0CiAgICAgICAgLy8gQmxvY2tzIGNvbnRhaW4gc2FtZSBjaGFycyBidXQgcG9zc2libHkgZGlmZm
VyZW50IG9yZGVyCgogICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIG11bHRpc2V0IG9mIGJsb2NrcyBieSBjaGFyIGFuZCBsZW5ndGggaXMgdGhlIHNhbWUgaW4gcyBhbmQgdAogICAgICAgIC8vIEFjdHVhbGx5LC
BsZW5ndGggb2YgYmxvY2tzIGNhbiBkaWZmZXIgKHQgY2FuIGhhdmUgZGlmZmVyZW50IGJsb2NrIGxlbmd0aHMpLCBidXQgdG90YWwgY291bnQgb2YgemVyb3MgYW5kIG9uZXMgbWF0Y2gKICAgICAgICAvLyBXZS
B3YW50IG1pbmltYWwgbnVtYmVyIG9mIGFkamFjZW50IHN3YXBzIHRvIHBlcm11dGUgc19ibG9ja3MgdG8gdF9ibG9ja3MKCiAgICAgICAgLy8gU2luY2UgYmxvY2tzIGFyZSBtYXhpbWFsIHN1YnN0cmluZ3Mgb2
YgaWRlbnRpY2FsIGNoYXJzLCB0aGUgbnVtYmVyIG9mIGJsb2NrcyBpcyBtaW5pbWFsCiAgICAgICAgLy8gSWYgbnVtYmVyIG9mIGJsb2NrcyBkaWZmZXIsIGltcG9zc2libGUKCiAgICAgICAgLy8gTm93IHdlIH
dhbnQgdG8gZmluZCBtaW5pbWFsIG51bWJlciBvZiBhZGphY2VudCBzd2FwcyB0byB0cmFuc2Zvcm0gc19ibG9ja3Mgc2VxdWVuY2UgaW50byB0X2Jsb2NrcyBzZXF1ZW5jZQogICAgICAgIC8vIEJ1dCBibG9ja3
MgaGF2ZSBjaGFyYWN0ZXJzIGFuZCBsZW5ndGhzLiBMZW5ndGhzIGNhbiBkaWZmZXI/IE5vLCBiZWNhdXNlIHMgYW5kIHQgaGF2ZSBzYW1lIGxlbmd0aCBhbmQgYm90aCBoYXZlIGJsb2NrcyBjb3ZlcmluZyBmdW
xsIHN0cmluZwoKICAgICAgICAvLyBTbyB0aGUgcHJvYmxlbSByZWR1Y2VzIHRvIGNoZWNrIGlmIGNoYXJhY3RlcnMgb2Ygc19ibG9ja3MgYW5kIHRfYmxvY2tzIG1hdGNoIG11bHRpc2V0cyBhbmQgaWYgc3VtIG
9mIGxlbmd0aHMgYXJlIHNhbWUKCiAgICAgICAgLy8gQ2hlY2sgaWYgZm9yIGVhY2ggYmxvY2sgaSwgdGhlIGNoYXJhY3RlciBpcyB0aGUgc2FtZSBpbiBzX2Jsb2NrcyBhbmQgdF9ibG9ja3MKICAgICAgICAvLy
BJZiBub3QsIGFuc3dlciBpcyAtMQoKICAgICAgICBib29sIHBvc3NpYmxlID0gdHJ1ZTsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG07IGkrKykgewogICAgICAgICAgICBpZiAoc19ibG9ja3NbaV0uZm
lyc3QgIT0gdF9ibG9ja3NbaV0uZmlyc3QpIHsKICAgICAgICAgICAgICAgIHBvc3NpYmxlID0gZmFsc2U7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZi
AocG9zc2libGUpIHsKICAgICAgICAgICAgLy8gSWYgYmxvY2tzIGNoYXJzIGFyZSBhbHJlYWR5IGluIHNhbWUgb3JkZXIsIG5vIHN3YXBzIG5lZWRlZAogICAgICAgICAgICBjb3V0IDw8IDAgPDwgJ1xuJzsKIC
AgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBPdGhlcndpc2UsIHdlIHdhbnQgdG8gZmluZCBtaW5pbWFsIG51bWJlciBvZiBhZGphY2VudCBzd2FwcyB0byB0cmFuc2Zvcm0gc19ibG
9ja3MgY2hhcnMgaW50byB0X2Jsb2NrcyBjaGFycwogICAgICAgIC8vIFdlIHdhbnQgdG8gcmVvcmRlciBzX2Jsb2NrcyB0byB0X2Jsb2NrcyBieSBzd2FwcGluZyBhZGphY2VudCBibG9ja3MKCiAgICAgICAgLy
8gQmVjYXVzZSBibG9ja3MgbGVuZ3RocyBhcmUgZml4ZWQsIGJ1dCBjaGFyYWN0ZXJzIGRpZmZlciwgd2UgY2FuJ3QganVzdCByZW9yZGVyIGNoYXJhY3RlcnMKICAgICAgICAvLyBUaGUgcHJvYmxlbSBzdGF0ZX
MgS2V2aW4gY2FuIHN3YXAgYWRqYWNlbnQgYmxvY2tzCgogICAgICAgIC8vIEJ1dCB0aGUgcHJvYmxlbSBzdGF0ZXMgdGhhdCB0aGUgb3BlcmF0aW9uIGlzIHN3YXBwaW5nIHR3byBhZGphY2VudCBibG9ja3MKIC
AgICAgICAvLyBTbyBlYWNoIHN3YXAgbW92ZXMgb25lIGJsb2NrIG9uZSBwb3NpdGlvbgoKICAgICAgICAvLyBUaGUgbWluaW1hbCBudW1iZXIgb2Ygc3dhcHMgdG8gcmVvcmRlciBzX2Jsb2NrcyBjaGFycyB0by
B0X2Jsb2NrcyBjaGFycyBlcXVhbHMgdG8gdGhlIG51bWJlciBvZiBpbnZlcnNpb25zIGJldHdlZW4gc19ibG9ja3MgYW5kIHRfYmxvY2tzCgogICAgICAgIC8vIEJ1dCBzX2Jsb2NrcyBhbmQgdF9ibG9ja3MgbW
F5IGhhdmUgZGlmZmVyZW50IGNoYXJzIG9yZGVyLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIHNfYmxvY2tzIGNoYXJzIGlzIGEgcGVybXV0YXRpb24gb2YgdF9ibG9ja3MgY2hhcnMKCiAgICAgICAgdmVjdG9yPG
NoYXI+IHNfY2hhcnMobSksIHRfY2hhcnMobSk7CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBtOyBpKyspIHsKICAgICAgICAgICAgc19jaGFyc1tpXSA9IHNfYmxvY2tzW2ldLmZpcnN0OwogICAgICAgIC
AgICB0X2NoYXJzW2ldID0gdF9ibG9ja3NbaV0uZmlyc3Q7CiAgICAgICAgfQogICAgICAgIHZlY3RvcjxpbnQ+IHBvc18wX3MsIHBvc18xX3MsIHBvc18wX3QsIHBvc18xX3Q7CiAgICAgICAgZm9yIChpbnQgaS
A9IDA7IGkgPCBtOyBpKyspIHsKICAgICAgICAgICAgaWYgKHNfY2hhcnNbaV0gPT0gJzAnKSBwb3NfMF9zLnB1c2hfYmFjayhpKTsKICAgICAgICAgICAgZWxzZSBwb3NfMV9zLnB1c2hfYmFjayhpKTsKICAgIC
AgICB9CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBtOyBpKyspIHsKICAgICAgICAgICAgaWYgKHRfY2hhcnNbaV0gPT0gJzAnKSBwb3NfMF90LnB1c2hfYmFjayhpKTsKICAgICAgICAgICAgZWxzZSBwb3
NfMV90LnB1c2hfYmFjayhpKTsKICAgICAgICB9CiAgICAgICAgLy8gRm9yIHRoZSBwcm9ibGVtIHRvIGJlIHBvc3NpYmxlLCB0aGUgbXVsdGlzZXRzIG9mIGNoYXJhY3RlcnMgbXVzdCBiZSB0aGUgc2FtZQogIC
AgICAgIC8vIFNvIG51bWJlciBvZiB6ZXJvcyBhbmQgb25lcyBpbiBibG9ja3MgbXVzdCBiZSBzYW1lCiAgICAgICAgaWYgKChpbnQpcG9zXzBfcy5zaXplKCkgIT0gKGludClwb3NfMF90LnNpemUoKSkgewogIC
AgICAgICAgICBjb3V0IDw8IC0xIDw8ICdcbic7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICAvLyBOb3cgd2Ugd2FudCBtaW5pbWFsIG51bWJlciBvZiBhZGphY2VudCBzd2FwcyB0by
ByZW9yZGVyIHNfY2hhcnMgdG8gdF9jaGFycwogICAgICAgIC8vIEJlY2F1c2Ugc3dhcHBpbmcgdHdvIGFkamFjZW50IGJsb2NrcyBzd2FwcyB0aGVpciBwb3NpdGlvbnMKICAgICAgICAvLyBUaGUgbWluaW1hbC
BudW1iZXIgb2Ygc3dhcHMgaXMgc3VtIG9mIGRpc3RhbmNlcyBlYWNoIGJsb2NrIG11c3QgbW92ZQogICAgICAgIC8vIE1vcmUgZm9ybWFsbHksIHN1bSBvZiBhYnNvbHV0ZSBkaWZmZXJlbmNlcyBvZiBwb3NpdG
lvbnMgb2YgemVyb3MgcGx1cyBzYW1lIGZvciBvbmVzCgogICAgICAgIGxvbmcgbG9uZyBhbnMgPSAwOwogICAgICAgIGZvciAoc2l6ZV90IGkgPSAwOyBpIDwgcG9zXzBfcy5zaXplKCk7IGkrKykgewogICAgIC
AgICAgICBhbnMgKz0gYWJzKHBvc18wX3NbaV0gLSBwb3NfMF90W2ldKTsKICAgICAgICB9CiAgICAgICAgZm9yIChzaXplX3QgaSA9IDA7IGkgPCBwb3NfMV9zLnNpemUoKTsgaSsrKSB7CiAgICAgICAgICAgIG
FucyArPSBhYnMocG9zXzFfc1tpXSAtIHBvc18xX3RbaV0pOwogICAgICAgIH0KICAgICAgICAvLyBFYWNoIHN3YXAgbW92ZXMgb25lIGJsb2NrIG9uZSBwb3NpdGlvbiwgc28gZWFjaCB1bml0IGRpZmZlcmVuY2
UgY291bnRzIGFzIDEgc3dhcAogICAgICAgIC8vIEJ1dCBlYWNoIHN3YXAgc3dhcHMgdHdvIGJsb2NrcywgcmVkdWNpbmcgdHdvIGFkamFjZW50IHBvc2l0aW9ucwogICAgICAgIC8vIEFjdHVhbGx5LCBtaW5pbW
FsIG51bWJlciBvZiBzd2FwcyBpcyBoYWxmIHRoZSBzdW0gb2YgYWJzb2x1dGUgZGlmZmVyZW5jZXMKCiAgICAgICAgY291dCA8PCBhbnMgLyAyIDw8ICdcbic7CiAgICB9CiAgICByZXR1cm4gMDsKfQo=' | ba
se64 -d > /app/main.cpp; tmux wait -S done
root@02301fe3e4a1:/app#
