{
    "id": "8ae0e733-14f2-40a0-abc1-9597d58812e3",
    "trial_name": "lcbpro-2057a.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2057a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2057A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nOne day, the schoolboy Mark misbehaved, so the teacher Sasha called him to the whiteboard.\n\nSasha gave Mark a table with $n$ rows and $m$ columns. His task is to arrange the numbers $0, 1, \\\\ldots, n \\\\cdot m - 1$ in the table (each number must be used exactly once) in such a way as to maximize the sum of MEX$^{\\\\text{∗}}$ across all rows and columns. More formally, he needs to maximize\n\n$$\\sum\\limits_{i = 1}^{n} \\operatorname{mex}(\\{a_{i,1}, a_{i,2}, \\ldots, a_{i,m}\\}) + \\sum\\limits_{j = 1}^{m} \\operatorname{mex}(\\{a_{1,j}, a_{2,j}, \\ldots, a_{n,j}\\}),$$\n\nwhere $a_{i,j}$ is the number in the $i$-th row and $j$-th column.\n\nSasha is not interested in how Mark arranges the numbers, so he only asks him to state one number -- the maximum sum of MEX across all rows and columns that can be achieved.\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $c$.\n\nFor example:\n\n- $\\operatorname{mex}([2,2,1])= 0$, since $0$ does not belong to the array.\n- $\\operatorname{mex}([3,1,0,1]) = 2$, since $0$ and $1$ belong to the array, but $2$ does not.\n- $\\operatorname{mex}([0,3,1,2]) = 4$, since $0$, $1$, $2$, and $3$ belong to the array, but $4$ does not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) -- the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 10^9$) -- the number of rows and columns in the table, respectively.\n\n### Output\n\nFor each test case, output the maximum possible sum of $\\operatorname{mex}$ across all rows and columns.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 1\n\n2 2\n\n3 5\n\n```\n\n#### Output #1\n\n```\n2\n3\n6\n```\n\n### Note\n\nIn the first test case, the only element is $0$, and the sum of the $\\operatorname{mex}$ of the numbers in the first row and the $\\operatorname{mex}$ of the numbers in the first column is $\\operatorname{mex}(\\{0\\}) + \\operatorname{mex}(\\{0\\}) = 1 + 1 = 2$.\n\nIn the second test case, the optimal table may look as follows:\n\n$3\n\n$$0$$\n\n2$$1$\n\nThen $\\sum\\limits_{i = 1}^{n} \\operatorname{mex}(\\{a_{i,1}, a_{i,2}, \\ldots, a_{i,m}\\}) + \\sum\\limits_{j = 1}^{m} \\operatorname{mex}(\\{a_{1,j}, a_{2,j}, \\ldots, a_{n,j}\\}) = \\operatorname{mex}(\\{3, 0\\}) + \\operatorname{mex}(\\{2, 1\\})$ $+ \\operatorname{mex}(\\{3, 2\\}) + \\operatorname{mex}(\\{0, 1\\}) = 1 + 0 + 0 + 2 = 3$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2057a/lcbpro-2057a.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1283,
    "total_output_tokens": 179,
    "trial_started_at": "2025-09-06T01:12:29.332147+00:00",
    "trial_ended_at": "2025-09-06T01:13:07.253563+00:00",
    "agent_started_at": "2025-09-06T01:12:42.396126+00:00",
    "agent_ended_at": "2025-09-06T01:12:45.979563+00:00",
    "test_started_at": "2025-09-06T01:12:48.638419+00:00",
    "test_ended_at": "2025-09-06T01:12:53.204141+00:00"
}