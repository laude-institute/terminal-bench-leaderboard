{
    "id": "b4913737-eb74-4227-a6eb-0759652b17c8",
    "trial_name": "lcbpro-2001e2.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2001e2",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2001E2)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nThis is the hard version of the problem. The difference between the two versions is the definition of deterministic max-heap, time limit, and constraints on $n$ and $t$. You can make hacks only if both versions of the problem are solved.\n\nConsider a perfect binary tree with size $2^n - 1$, with nodes numbered from $1$ to $2^n-1$ and rooted at $1$. For each vertex $v$ ($1 \\le v \\le 2^{n - 1} - 1$), vertex $2v$ is its left child and vertex $2v + 1$ is its right child. Each node $v$ also has a value $a_v$ assigned to it.\n\nDefine the operation $\\mathrm{pop}$ as follows:\n\n1. initialize variable $v$ as $1$;\n2. repeat the following process until vertex $v$ is a leaf (i.e. until $2^{n - 1} \\le v \\le 2^n - 1$);\n1. among the children of $v$, choose the one with the larger value on it and denote such vertex as $x$; if the values on them are equal (i.e. $a_{2v} = a_{2v + 1}$), you can choose any of them;\n2. assign $a_x$ to $a_v$ (i.e. $a_v := a_x$);\n3. assign $x$ to $v$ (i.e. $v := x$);\n3. assign $-1$ to $a_v$ (i.e. $a_v := -1$).\n\nThen we say the $\\mathrm{pop}$ operation is deterministic if there is a unique way to do such operation. In other words, $a_{2v} \\neq a_{2v + 1}$ would hold whenever choosing between them.\n\nA binary tree is called a max-heap if for every vertex $v$ ($1 \\le v \\le 2^{n - 1} - 1$), both $a_v \\ge a_{2v}$ and $a_v \\ge a_{2v + 1}$ hold.\n\nA max-heap is deterministic if the $\\mathrm{pop}$ operation is deterministic to the heap when we do it for the first and the second time.\n\nInitially, $a_v := 0$ for every vertex $v$ ($1 \\le v \\le 2^n - 1$), and your goal is to count the number of different deterministic max-heaps produced by applying the following operation $\\mathrm{add}$ exactly $k$ times:\n\n- Choose an integer $v$ ($1 \\le v \\le 2^n - 1$) and, for every vertex $x$ on the path between $1$ and $v$, add $1$ to $a_x$.\n\nTwo heaps are considered different if there is a node which has different values in the heaps.\n\nSince the answer might be large, print it modulo $p$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 50$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, k, p$ ($2 \\le n \\le 100$, $1 \\le k \\le 500$, $10^8 \\le p \\le 10^9$, $p$ is a prime).\n\nIt is guaranteed that the sum of $n$ does not exceed $100$ and the sum of $k$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the number of different deterministic max-heaps produced by applying the aforementioned operation $\\mathrm{add}$ exactly $k$ times, modulo $p$.\n\n### Examples\n\n#### Input #1\n\n```\n\n6\n\n2 1 998244353\n\n3 2 998244853\n\n3 3 998244353\n\n3 4 100000037\n\n4 2 100000039\n\n4 3 100000037\n\n```\n\n#### Output #1\n\n```\n2\n12\n40\n100\n32\n224\n```\n\n#### Input #2\n\n```\n\n1\n\n100 500 100000037\n\n```\n\n#### Output #2\n\n```\n66681128\n```\n\n#### Input #3\n\n```\n\n2\n\n87 63 100000037\n\n13 437 100000039\n\n```\n\n#### Output #3\n\n```\n83566569\n54517140\n```\n\n### Note\n\nFor the first testcase, if we choose $v = 1$ and do the operation, we would have $a = [1, 0, 0]$, and since $a_2 = a_3$, we can choose either of them when doing the first $\\mathrm{pop}$ operation, so such heap is not a deterministic max-heap.\n\nAnd if we choose $v = 2$, we would have $a = [1, 1, 0]$, during the first $\\mathrm{pop}$, the following would happen:\n\n- initialize $v$ as $1$\n- since $a_{2v} > a_{2v + 1}$, choose $2v$ as $x$, then $x = 2$\n- assign $a_x$ to $a_v$, then $a = [1, 1, 0]$\n- assign $x$ to $v$, then $v = 2$\n- since $v$ is a leaf, assign $-1$ to $a_v$, then $a = [1, -1, 0]$\n\nAnd during the second $\\mathrm{pop}$, the following would happen:\n\n- initialize $v$ as $1$\n- since $a_{2v} < a_{2v + 1}$, choose $2v + 1$ as $x$, then $x = 3$\n- assign $a_x$ to $a_v$, then $a = [0, -1, 0]$\n- assign $x$ to $v$, then $v = 3$\n- since $v$ is a leaf, assign $-1$ to $a_v$, then $a = [0, -1, -1]$\n\nSince both the first and the second $\\mathrm{pop}$ operation are deterministic, this is a deterministic max-heap. Also, if we choose $v = 3$, $a$ would be a deterministic max-heap, so the answer is $2$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2001e2/lcbpro-2001e2.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1807,
    "total_output_tokens": 2344,
    "trial_started_at": "2025-09-06T00:54:57.772846+00:00",
    "trial_ended_at": "2025-09-06T00:58:07.726665+00:00",
    "agent_started_at": "2025-09-06T00:55:11.486090+00:00",
    "agent_ended_at": "2025-09-06T00:55:44.853197+00:00",
    "test_started_at": "2025-09-06T00:55:48.613900+00:00",
    "test_ended_at": "2025-09-06T00:57:51.996216+00:00"
}