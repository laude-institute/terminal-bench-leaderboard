root@791e3c302736:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgovLyBFYWNoIHRhYmxlIG9jY3VwaWVzIGNlbGxzOgovLyAoM3grMSwgM3krMSksICgzeC
sxLCAzeSsyKSwgKDN4KzIsIDN5KzEpLCAoM3grMiwgM3krMikKLy8gRGlzdGFuY2UgZnJvbSAoMCwwKSB0byBjZWxsIChYLFkpIGlzIGRlZmluZWQgYXMgc3RlcHMgbW92aW5nIHRocm91Z2ggY29ycmlkb3IgY2
VsbHMsCi8vIGNvcnJpZG9ycyBhcmUgYWxsIGNlbGxzIG5vdCBwYXJ0IG9mIGFueSB0YWJsZS4KLy8gRm9yIG1vdmVtZW50LCBndWVzdHMgY2FuIG1vdmUgb25seSB0aHJvdWdoIGNvcnJpZG9yIGNlbGxzLCBsYX
N0IHN0ZXAgdG8gbmVpZ2hib3JpbmcgZnJlZSB0YWJsZSBjZWxsLgoKLy8gT2JzZXJ2YXRpb25zOgovLyBUYWJsZXMgYXJlIHNwYWNlZCB3aXRoIDN4MyBibG9ja3MuCi8vIFRoZSBjb3JyaWRvciBjZWxscyBhcm
UgdGhvc2Ugd2hlcmUgKHglMz09MCBvciB5JTM9PTApLgovLyBNb3ZlbWVudCBpcyByZXN0cmljdGVkIHRvIGNvcnJpZG9yIGNlbGxzIHVudGlsIGxhc3Qgc3RlcCB0byB0YWJsZSBjZWxsLgovLyBEaXN0YW5jZS
BjYW4gYmUgY29tcHV0ZWQgYXMgbWluaW1hbCBzdGVwcyBvbiBjb3JyaWRvciBncmlkIHBsdXMgbGFzdCBzdGVwLgoKLy8gV2Ugd2FudCB0byBhc3NpZ24gc2VhdHMgZm9yIGd1ZXN0cyBpbiBvcmRlci4KLy8gRm
9yIHRfaT0xOiBndWVzdCBjaG9vc2VzIG5lYXJlc3QgdmFjYW50IHRhYmxlIGNlbGwuCi8vIEZvciB0X2k9MDogZ3Vlc3QgY2hvb3NlcyBuZWFyZXN0IHZhY2FudCB0YWJsZSBjZWxsIG9uIGEgdGFibGUgY29tcG
xldGVseSB1bm9jY3VwaWVkIHlldC4KLy8gSWYgbXVsdGlwbGUgYXQgc2FtZSBkaXN0YW5jZSwgbWluaW1hbCB4IHRoZW4gbWluaW1hbCB5LgoKLy8gQXBwcm9hY2g6Ci8vIFByZWNvbXB1dGUgYSBsYXJnZSBlbm
91Z2ggc2V0IG9mIHRhYmxlcyBhbmQgdGhlaXIgY2VsbHMgd2l0aCBkaXN0YW5jZXMuCi8vIERpc3RhbmNlIHRvIHRhYmxlIGNlbGwgaXMgY29tcHV0ZWQgYXM6Ci8vIERpc3RhbmNlIHRvIHRoZSBjb3JyaWRvci
BjZWxsIGFkamFjZW50IHRvIHRhYmxlIGNlbGwgKyAxIChsYXN0IHN0ZXApCi8vIEZvciBlYWNoIHRhYmxlIGNlbGwsIGZpbmQgbWluaW1hbCBkaXN0YW5jZSBmcm9tICgwLDApLgoKLy8gU2luY2UgdGFibGVzIG
FyZSBpbmZpbml0ZSwgd2UgY2FuIGdlbmVyYXRlIHRhYmxlcyBpbiBvcmRlciBvZiBkaXN0YW5jZSBhbmQgc2VsZWN0IHNlYXRzIGFzIG5lZWRlZC4KCi8vIERpc3RhbmNlIHRvIGNvcnJpZG9yIGNlbGwgYWRqYW
NlbnQgdG8gdGFibGUgYXQgKDN4KzEsIDN5KzEpIGV0YyBjYW4gYmUgY29tcHV0ZWQuCi8vIFRoZSBjb3JyaWRvciBjZWxscyBhcmUgYXQgbXVsdGlwbGVzIG9mIDMsIHNvIGNsb3Nlc3QgY29ycmlkb3IgY2VsbH
MgdG8gdGFibGUgY2VsbHMgYXJlIGZpeGVkLgoKLy8gV2UgY2FuIGdlbmVyYXRlIGEgcHJpb3JpdHkgcXVldWUgb2YgYWxsIHRhYmxlIGNlbGxzIG9yZGVyZWQgYnkgZGlzdGFuY2UsIHgsIHkuCi8vIEZvciB0X2
k9MCwgc2VsZWN0IGEgZnJlZSB0YWJsZSBub3Qgb2NjdXBpZWQgeWV0LgovLyBGb3IgdF9pPTEsIHNlbGVjdCBhbnkgZnJlZSB0YWJsZSBjZWxsLgoKLy8gVG8gaGFuZGxlIGxhcmdlIHF1ZXJpZXMsIHdlIHdpbG
wgZ2VuZXJhdGUgdGFibGVzIGluIG9yZGVyIG9mIGluY3JlYXNpbmcgZGlzdGFuY2UgZnJvbSAoMCwwKS4KLy8gV2Uga2VlcCB0cmFjayBvZiB3aGljaCB0YWJsZXMgaGF2ZSBiZWVuIG9jY3VwaWVkLgoKLy8gSW
1wbGVtZW50YXRpb24gZGV0YWlsczoKLy8gV2Ugd2lsbCBnZW5lcmF0ZSB0YWJsZXMgaW4gb3JkZXIgb2YgZGlzdGFuY2UuCi8vIERpc3RhbmNlIGZyb20gKDAsMCkgdG8gdGhlIGNvcnJpZG9yIGNlbGxzIGlzIG
1hbmhhdHRhbiBkaXN0YW5jZS4KLy8gVGhlIGNvcnJpZG9yIGNlbGxzIGFyZSBhdCBwb3NpdGlvbnMgd2hlcmUgeCUzPT0wIG9yIHklMz09MC4KLy8gRm9yIGVhY2ggdGFibGUgY2VsbCwgZGlzdGFuY2UgPSBkaX
N0YW5jZSB0byBpdHMgYWRqYWNlbnQgY29ycmlkb3IgY2VsbCArIDEuCgovLyBGb3IgcGVyZm9ybWFuY2UsIHdlIGdlbmVyYXRlIHRhYmxlcyBpbiBCRlMgbWFubmVyIGJ5IGluY3JlYXNpbmcgZGlzdGFuY2UuCi
8vIFdlIHN0b3JlIHRoZSB0YWJsZSBjZWxscyBpbiBhIG1pbi1oZWFwIGJ5IChkaXN0YW5jZSwgeCwgeSkuCgovLyBEdWUgdG8gY29uc3RyYWludHMsIHdlIGdlbmVyYXRlIHJvdWdobHkgdXAgdG8gc3VtIG4gPS
A1MDAwMCBzZWF0cy4KCi8vIENvZGUgYmVsb3cgaW1wbGVtZW50cyB0aGlzIGxvZ2ljLgoKaW50IG1haW4oKSB7CiAgICBpb3M6OnN5bmNfd2l0aF9zdGRpbyhmYWxzZSk7CiAgICBjaW4udGllKG51bGxwdHIpOw
oKICAgIGludCBxOyBjaW4gPj4gcTsKCiAgICAvLyBXZSB3aWxsIGdlbmVyYXRlIGNhbmRpZGF0ZSB0YWJsZSBjZWxscyBvbiBkZW1hbmQuCgogICAgLy8gRGF0YSBzdHJ1Y3R1cmVzOgogICAgLy8gRm9yIHQ9MC
BndWVzdHM6IG5lZWQgdG8gcGljayBhIGZyZWUgY2VsbCBmcm9tIGEgY29tcGxldGVseSBmcmVlIHRhYmxlLgogICAgLy8gRm9yIHQ9MSBndWVzdHM6IHBpY2sgYW55IGZyZWUgY2VsbC4KCiAgICAvLyBXZSBrZW
VwIHR3byBwcmlvcml0eSBxdWV1ZXM6CiAgICAvLyBwcTA6IHRhYmxlIGNlbGxzIGZyb20gdGFibGVzIG5vdCBvY2N1cGllZCB5ZXQKICAgIC8vIHBxMTogYWxsIGZyZWUgdGFibGUgY2VsbHMKCiAgICAvLyBXZS
BnZW5lcmF0ZSB0YWJsZXMgaW4gb3JkZXIgb2YgZGlzdGFuY2UuCgogICAgLy8gVG8gZ2VuZXJhdGUgdGFibGVzOgogICAgLy8gV2Ugd2lsbCBnZW5lcmF0ZSB0YWJsZXMgYnkgaW5jcmVhc2luZyBkaXN0YW5jZS
4KICAgIC8vIERpc3RhbmNlIHRvIHRhYmxlIGNlbGwgaXMgbWluIGRpc3RhbmNlIHRvIGFkamFjZW50IGNvcnJpZG9yIGNlbGwgKyAxLgogICAgLy8gQWRqYWNlbnQgY29ycmlkb3IgY2VsbHMgdG8gdGFibGUgY2
VsbHM6CiAgICAvLyBGb3IgY2VsbCAoM3grMSwzeSsxKTogY29ycmlkb3IgY2VsbHMgKDN4LDN5KzEpIG9yICgzeCsxLDN5KQogICAgLy8gRm9yIGNlbGwgKDN4KzEsM3krMik6IGNvcnJpZG9yIGNlbGxzICgzeC
wzeSsyKSBvciAoM3grMSwzeSszKQogICAgLy8gRm9yIGNlbGwgKDN4KzIsM3krMSk6IGNvcnJpZG9yIGNlbGxzICgzeCsyLDN5KSBvciAoM3grMywzeSsxKQogICAgLy8gRm9yIGNlbGwgKDN4KzIsM3krMik6IG
NvcnJpZG9yIGNlbGxzICgzeCsyLDN5KzMpIG9yICgzeCszLDN5KzIpCgogICAgLy8gRGlzdGFuY2UgZnJvbSAoMCwwKSB0byBjb3JyaWRvciBjZWxsIChjeCxjeSkgaXMgY3grY3kgYXMgY29ycmlkb3IgY2VsbH
MgaGF2ZSB4JTM9PTAgb3IgeSUzPT0wLgoKICAgIC8vIFdlJ2xsIHByZWNvbXB1dGUgZGlzdGFuY2UgZm9yIGVhY2ggdGFibGUgY2VsbCBhcyBtaW5pbWFsIG9mIGRpc3RhbmNlcyB0byBhZGphY2VudCBjb3JyaW
RvciBjZWxscyArMS4KCiAgICAvLyBXZSdsbCBnZW5lcmF0ZSB0YWJsZXMgaW4gaW5jcmVhc2luZyBvcmRlciBvZiBtaW5pbWFsIGRpc3RhbmNlIG9mIHRoZWlyIGNlbGxzLgoKICAgIC8vIFdlIGtlZXAgdHJhY2
sgb2Ygb2NjdXBpZWQgdGFibGVzIGJ5IHRoZWlyICh4LHkpIGluZGljZXMuCgogICAgLy8gV2UgZ2VuZXJhdGUgdGFibGUgY2VsbHMgaW4gYSBwcmlvcml0eSBxdWV1ZSBieSAoZGlzdGFuY2UsIHgsIHkpIGFuZC
B0YWJsZSBpbmRleC4KCiAgICAvLyBJbXBsZW1lbnRhdGlvbjoKCiAgICAvLyBXZSdsbCBnZW5lcmF0ZSB1cCB0byBtYXhpbXVtIG5lZWRlZCBzZWF0cyAoc3VtIG9mIG4pLgoKICAgIC8vIFJlYWQgYWxsIGlucH
V0cyBmaXJzdAogICAgdmVjdG9yPHZlY3RvcjxpbnQ+PiB0czsKICAgIHZlY3RvcjxpbnQ+IG5zOwogICAgaW50IHRvdGFsX24gPSAwOwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCBxOyBpKyspIHsKICAgICAgIC
BpbnQgbjsgY2luID4+IG47CiAgICAgICAgbnMucHVzaF9iYWNrKG4pOwogICAgICAgIHZlY3RvcjxpbnQ+IHQobik7CiAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBuOyBqKyspIGNpbiA+PiB0W2pdOwogIC
AgICAgIHRzLnB1c2hfYmFjayh0KTsKICAgICAgICB0b3RhbF9uICs9IG47CiAgICB9CgogICAgLy8gRGF0YSBzdHJ1Y3R1cmVzCiAgICAvLyBXZSB3aWxsIGdlbmVyYXRlIHRhYmxlcyBieSBpbmNyZWFzaW5nIG
Rpc3RhbmNlIG9mIHRoZWlyIG1pbmltYWwgY2VsbC4KCiAgICAvLyBUbyBnZW5lcmF0ZSB0YWJsZSBjZWxscyBlZmZpY2llbnRseSwgd2UgZ2VuZXJhdGUgdGFibGVzIGluIG9yZGVyIG9mIG1pbmltYWwgZGlzdG
FuY2Ugb2YgdGhlaXIgY2VsbHMuCgogICAgLy8gRm9yIGVhY2ggdGFibGUgKHR4LCB0eSksIGdlbmVyYXRlIGl0cyA0IGNlbGxzIGFuZCBjb21wdXRlIHRoZWlyIGRpc3RhbmNlcy4KCiAgICAvLyBEaXN0YW5jZS
B0byBlYWNoIHRhYmxlIGNlbGwgaXMgbWluIGRpc3RhbmNlIHRvIGFkamFjZW50IGNvcnJpZG9yIGNlbGwgKzEKCiAgICAvLyBBZGphY2VudCBjb3JyaWRvciBjZWxscyBmb3IgZWFjaCB0YWJsZSBjZWxsIChzZW
UgYWJvdmUpCgogICAgLy8gV2UnbGwgZ2VuZXJhdGUgdGFibGVzIGluIG9yZGVyIG9mIG1pbiBkaXN0YW5jZSBhbW9uZyBpdHMgY2VsbHMuCgogICAgLy8gV2UnbGwga2VlcCBhIHByaW9yaXR5IHF1ZXVlIG9mIH
RhYmxlIGNhbmRpZGF0ZXMgYnkgbWluaW1hbCBkaXN0YW5jZSBmb3IgdGhlIHRhYmxlLgoKICAgIC8vIFRoZW4gZnJvbSBlYWNoIHRhYmxlLCBnZW5lcmF0ZSBpdHMgY2VsbHMgYW5kIHB1c2ggdGhlbSB0byBwcT
AgYW5kIHBxMSBhY2NvcmRpbmdseS4KCiAgICAvLyBXZSBuZWVkIHRvIGdlbmVyYXRlIGVub3VnaCB0YWJsZXMgdG8gY292ZXIgdG90YWxfbiBzZWF0cy4KCiAgICAvLyBPY2N1cGFuY3kgdHJhY2tpbmcKICAgIH
Vub3JkZXJlZF9tYXA8aW50NjRfdCxib29sPiB0YWJsZV9vY2N1cGllZDsgLy8ga2V5ID0gdHgqMTAwMDAwMCt0eQogICAgdW5vcmRlcmVkX3NldDxpbnQ2NF90PiBvY2N1cGllZF9jZWxsczsgLy8ga2V5ID0gY2
VsbF94KjEwMDAwMDAgKyBjZWxsX3kKCiAgICAvLyBQcmlvcml0eSBxdWV1ZXMKICAgIC8vIEZvciB0PTA6IGNlbGxzIGZyb20gdGFibGVzIG5vdCBvY2N1cGllZCB5ZXQKICAgIC8vIEZvciB0PTE6IGFsbCBmcm
VlIGNlbGxzCgogICAgdXNpbmcgQ2VsbCA9IHR1cGxlPGludCxpbnQsaW50LGludDY0X3Q+OyAvLyAoZGlzdGFuY2UsIHgsIHksIHRhYmxlX2tleSkKICAgIGF1dG8gY21wID0gW10oY29uc3QgQ2VsbCAmYSwgY2
9uc3QgQ2VsbCAmYikgewogICAgICAgIGlmIChnZXQ8MD4oYSkgIT0gZ2V0PDA+KGIpKSByZXR1cm4gZ2V0PDA+KGEpID4gZ2V0PDA+KGIpOwogICAgICAgIGlmIChnZXQ8MT4oYSkgIT0gZ2V0PDE+KGIpKSByZX
R1cm4gZ2V0PDE+KGEpID4gZ2V0PDE+KGIpOwogICAgICAgIHJldHVybiBnZXQ8Mj4oYSkgPiBnZXQ8Mj4oYik7CiAgICB9OwoKICAgIHByaW9yaXR5X3F1ZXVlPENlbGwsIHZlY3RvcjxDZWxsPiwgZGVjbHR5cG
UoY21wKT4gcHEwKGNtcCk7IC8vIGZvciB0PTAKICAgIHByaW9yaXR5X3F1ZXVlPENlbGwsIHZlY3RvcjxDZWxsPiwgZGVjbHR5cGUoY21wKT4gcHExKGNtcCk7IC8vIGZvciB0PTEKCiAgICAvLyBUbyBnZW5lcm
F0ZSB0YWJsZXMgaW4gb3JkZXIsIHdlIGdlbmVyYXRlIGNhbmRpZGF0ZSB0YWJsZXMgYnkgdGhlaXIgbWluaW1hbCBkaXN0YW5jZSBjZWxsLgogICAgdXNpbmcgVGFibGUgPSB0dXBsZTxpbnQsaW50LGludCxpbn
Q+OyAvLyAobWluX2Rpc3QseCx5LHN0ZXApCiAgICBhdXRvIGNtcF90YWJsZSA9IFtdKGNvbnN0IFRhYmxlICZhLCBjb25zdCBUYWJsZSAmYikgewogICAgICAgIGlmIChnZXQ8MD4oYSkgIT0gZ2V0PDA+KGIpKS
ByZXR1cm4gZ2V0PDA+KGEpID4gZ2V0PDA+KGIpOwogICAgICAgIGlmIChnZXQ8MT4oYSkgIT0gZ2V0PDE+KGIpKSByZXR1cm4gZ2V0PDE+KGEpID4gZ2V0PDE+KGIpOwogICAgICAgIHJldHVybiBnZXQ8Mj4oYS
kgPiBnZXQ8Mj4oYik7CiAgICB9OwoKICAgIHByaW9yaXR5X3F1ZXVlPFRhYmxlLCB2ZWN0b3I8VGFibGU+LCBkZWNsdHlwZShjbXBfdGFibGUpPiB0YWJsZV9wcShjbXBfdGFibGUpOwoKICAgIC8vIFdlJ2xsIG
dlbmVyYXRlIHRhYmxlcyBieSBpbmNyZWFzaW5nICh4K3kpLCBzaW5jZSBkaXN0YW5jZSBncm93cyB3aXRoIGNvb3JkaW5hdGVzLgoKICAgIC8vIFdlJ2xsIGdlbmVyYXRlIHRhYmxlcyBpbiBCRlMgbWFubmVyIG
Zyb20gKDAsMCkKCiAgICAvLyBEaXN0YW5jZSBvZiB0YWJsZSBjZWxsIGRlcGVuZHMgb24gY29ycmlkb3IgYWRqYWNlbmN5CgogICAgLy8gV2Ugc3RhcnQgYnkgcHVzaGluZyB0YWJsZSAoMCwwKSBpbnRvIHRhYm
xlX3BxCgogICAgc2V0PHBhaXI8aW50LGludD4+IHZpc2l0ZWRfdGFibGVzOwoKICAgIGF1dG8gdGFibGVfa2V5ID0gW10oaW50IHgsIGludCB5KSAtPiBpbnQ2NF90IHsKICAgICAgICByZXR1cm4gKGludDY0X3
QpeCAqIDEwMDAwMDBMTCArIHk7CiAgICB9OwoKICAgIC8vIEZ1bmN0aW9uIHRvIGNvbXB1dGUgZGlzdGFuY2UgdG8gYSB0YWJsZSBjZWxsCiAgICBhdXRvIGRpc3RfdG9fY2VsbCA9IFtdKGludCB0eCwgaW50IH
R5LCBpbnQgY3gsIGludCBjeSkgLT4gaW50IHsKICAgICAgICAvLyBBZGphY2VudCBjb3JyaWRvciBjZWxscwogICAgICAgIC8vIGNvcnJpZG9yIGNlbGxzIGhhdmUgeCUzPT0wIG9yIHklMz09MAogICAgICAgIC
8vIEZvciBlYWNoIGNlbGwsIGFkamFjZW50IGNvcnJpZG9yIGNlbGxzIGFyZToKICAgICAgICAvLyAoM3R4LCBjeSksICgzdHgrMSwgM3R5KSwgKDN0eCszLCBjeSksIChjeCwgM3R5KSwgZXRjLgogICAgICAgIC
8vIEFjdHVhbGx5IHdlIGNoZWNrIHRoZSB0d28gYWRqYWNlbnQgY29ycmlkb3IgY2VsbHMgZm9yIGVhY2ggY2VsbCBhcyBwcm9ibGVtIHN0YXRlcwoKICAgICAgICB2ZWN0b3I8cGFpcjxpbnQsaW50Pj4gYWRqX2
NvcnJpZG9yczsKCiAgICAgICAgLy8gY2VsbCBjb29yZHMKICAgICAgICBpbnQgeCA9IGN4LCB5ID0gY3k7CgogICAgICAgIC8vIGFkamFjZW50cyBieSBzaWRlIGNvcnJpZG9yIGNlbGxzCiAgICAgICAgLy8gQ2
hlY2sgbmVpZ2hib3JzIGluIDQgZGlyZWN0aW9ucyBpZiB0aGV5IGFyZSBjb3JyaWRvciBjZWxscwogICAgICAgIGlmICh4LTEgPj0wICYmICgoeC0xKSUzPT0wIHx8ICh5KSUzPT0wKSkgYWRqX2NvcnJpZG9ycy
5lbXBsYWNlX2JhY2soeC0xLHkpOwogICAgICAgIGlmICgoeCsxKSUzPT0wIHx8ICh5KSUzPT0wKSBhZGpfY29ycmlkb3JzLmVtcGxhY2VfYmFjayh4KzEseSk7CiAgICAgICAgaWYgKHktMSA+PTAgJiYgKCh4KS
UzPT0wIHx8ICh5LTEpJTM9PTApKSBhZGpfY29ycmlkb3JzLmVtcGxhY2VfYmFjayh4LHktMSk7CiAgICAgICAgaWYgKCh4KSUzPT0wIHx8ICh5KzEpJTM9PTApIGFkal9jb3JyaWRvcnMuZW1wbGFjZV9iYWNrKH
gseSsxKTsKCiAgICAgICAgaW50IGJlc3QgPSBJTlRfTUFYOwogICAgICAgIGZvciAoYXV0byAmYyA6IGFkal9jb3JyaWRvcnMpIHsKICAgICAgICAgICAgaW50IGN4MiA9IGMuZmlyc3QsIGN5MiA9IGMuc2Vjb2
5kOwogICAgICAgICAgICBpZiAoY3gyIDwgMCB8fCBjeTIgPCAwKSBjb250aW51ZTsKICAgICAgICAgICAgaW50IGQgPSBjeDIgKyBjeTI7CiAgICAgICAgICAgIGlmIChkIDwgYmVzdCkgYmVzdCA9IGQ7CiAgIC
AgICAgfQogICAgICAgIHJldHVybiBiZXN0ICsgMTsgLy8gbGFzdCBzdGVwIGZyb20gY29ycmlkb3IgdG8gdGFibGUgY2VsbAogICAgfTsKCiAgICAvLyBGb3IgdGFibGUgKHR4LHR5KSwgZ2VuZXJhdGUgaXRzID
QgY2VsbHMgYW5kIGNvbXB1dGUgdGhlaXIgZGlzdGFuY2VzCiAgICBhdXRvIGdlbmVyYXRlX3RhYmxlX2NlbGxzID0gWyZdKGludCB0eCwgaW50IHR5KSAtPiB2ZWN0b3I8dHVwbGU8aW50LGludCxpbnQsaW50Nj
RfdD4+IHsKICAgICAgICB2ZWN0b3I8dHVwbGU8aW50LGludCxpbnQsaW50NjRfdD4+IHJlczsKICAgICAgICAvLyBjZWxsczoKICAgICAgICAvLyAoM3R4KzEsIDN0eSsxKSwgKDN0eCsxLCAzdHkrMiksICgzdH
grMiwgM3R5KzEpLCAoM3R4KzIsIDN0eSsyKQogICAgICAgIHZlY3RvcjxwYWlyPGludCxpbnQ+PiBjZWxscyA9IHsKICAgICAgICAgICAgezMqdHgrMSwgMyp0eSsxfSwKICAgICAgICAgICAgezMqdHgrMSwgMy
p0eSsyfSwKICAgICAgICAgICAgezMqdHgrMiwgMyp0eSsxfSwKICAgICAgICAgICAgezMqdHgrMiwgMyp0eSsyfQogICAgICAgIH07CiAgICAgICAgaW50NjRfdCBrZXkgPSB0YWJsZV9rZXkodHgsIHR5KTsKIC
AgICAgICBmb3IgKGF1dG8gJmMgOiBjZWxscykgewogICAgICAgICAgICBpbnQgZCA9IGRpc3RfdG9fY2VsbCh0eCwgdHksIGMuZmlyc3QsIGMuc2Vjb25kKTsKICAgICAgICAgICAgcmVzLmVtcGxhY2VfYmFjay
hkLCBjLmZpcnN0LCBjLnNlY29uZCwga2V5KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlczsKICAgIH07CgogICAgLy8gV2Ugd2lsbCBnZW5lcmF0ZSB0YWJsZXMgaW4gaW5jcmVhc2luZyBvcmRlciBvZi
BtaW5pbWFsIGNlbGwgZGlzdGFuY2UKICAgIC8vIFN0YXJ0IHdpdGggdGFibGUgKDAsMCkKCiAgICB0YWJsZV9wcS5lbXBsYWNlKDIsIDAsIDAsIDApOyAvLyBtaW5pbWFsIGRpc3RhbmNlIGZvciAoMCwwKSBpcy
AyIChjZWxsICgxLDEpIGRpc3RhbmNlIDIpCiAgICB2aXNpdGVkX3RhYmxlcy5lbXBsYWNlKDAsMCk7CgogICAgLy8gV2Ugd2lsbCBnZW5lcmF0ZSB0YWJsZXMgdW50aWwgd2UgaGF2ZSBnZW5lcmF0ZWQgZW5vdW
doIGNlbGxzIGZvciB0b3RhbF9uCgogICAgaW50IGdlbmVyYXRlZF9jZWxscyA9IDA7CgogICAgLy8gV2UnbGwgc3RvcmUgZ2VuZXJhdGVkIHRhYmxlIGNlbGxzIHRvIGFkZCB0byBwcTAgYW5kIHBxMQoKICAgIH
doaWxlIChnZW5lcmF0ZWRfY2VsbHMgPCB0b3RhbF9uICsgNTAwMCkgeyAvLyBnZW5lcmF0ZSBzb21lIGV4dHJhCiAgICAgICAgaWYgKHRhYmxlX3BxLmVtcHR5KCkpIGJyZWFrOwogICAgICAgIGF1dG8gW21pbl
9kaXN0LCB0eCwgdHksIHN0ZXBdID0gdGFibGVfcHEudG9wKCk7IHRhYmxlX3BxLnBvcCgpOwoKICAgICAgICAvLyBHZW5lcmF0ZSBjZWxscyBvZiB0aGlzIHRhYmxlCiAgICAgICAgYXV0byBjZWxscyA9IGdlbm
VyYXRlX3RhYmxlX2NlbGxzKHR4LCB0eSk7CgogICAgICAgIC8vIFB1c2ggYWxsIGNlbGxzIHRvIGJvdGggcHEwIGFuZCBwcTEgYXMgaW5pdGlhbGx5IHRhYmxlIGlzIHVub2NjdXBpZWQKICAgICAgICBmb3IgKG
F1dG8gJmNlbGw6IGNlbGxzKSB7CiAgICAgICAgICAgIGludCBkLHgseTsKICAgICAgICAgICAgaW50NjRfdCB0a2V5OwogICAgICAgICAgICB0aWUoZCx4LHksdGtleSkgPSBjZWxsOwogICAgICAgICAgICBwcT
EuZW1wbGFjZShkLHgseSx0a2V5KTsKICAgICAgICAgICAgcHEwLmVtcGxhY2UoZCx4LHksdGtleSk7CiAgICAgICAgfQoKICAgICAgICBnZW5lcmF0ZWRfY2VsbHMgKz0gNDsKCiAgICAgICAgLy8gQWRkIGFkam
FjZW50IHRhYmxlcyB0byBxdWV1ZQogICAgICAgIHZlY3RvcjxwYWlyPGludCxpbnQ+PiBuZWlnaGJvcnMgPSB7e3R4KzEsIHR5fSwge3R4LCB0eSsxfX07CiAgICAgICAgZm9yIChhdXRvICZueHQgOiBuZWlnaG
JvcnMpIHsKICAgICAgICAgICAgaWYgKHZpc2l0ZWRfdGFibGVzLmNvdW50KG54dCk9PTApIHsKICAgICAgICAgICAgICAgIC8vIENvbXB1dGUgbWluaW1hbCBkaXN0YW5jZSBmb3IgdGFibGUgbnh0CiAgICAgIC
AgICAgICAgICAvLyBtaW5pbWFsIGRpc3RhbmNlIGlzIG1pbiBkaXN0YW5jZSBvZiBpdHMgY2VsbHMKICAgICAgICAgICAgICAgIGF1dG8gYzIgPSBnZW5lcmF0ZV90YWJsZV9jZWxscyhueHQuZmlyc3QsIG54dC
5zZWNvbmQpOwogICAgICAgICAgICAgICAgaW50IG1pbl9kID0gSU5UX01BWDsKICAgICAgICAgICAgICAgIGZvciAoYXV0byAmY2MgOiBjMikgewogICAgICAgICAgICAgICAgICAgIG1pbl9kID0gbWluKG1pbl
9kLCBnZXQ8MD4oY2MpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRhYmxlX3BxLmVtcGxhY2UobWluX2QsIG54dC5maXJzdCwgbnh0LnNlY29uZCwgc3RlcCsxKTsKICAgICAgICAgICAgIC
AgIHZpc2l0ZWRfdGFibGVzLmVtcGxhY2Uobnh0KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLyBOb3cgcHJvY2VzcyB0ZXN0IGNhc2VzCiAgICBpbnQgaWR4ID0gMDsKICAgIGZvciAoaW
50IGkgPSAwOyBpIDwgcTsgaSsrKSB7CiAgICAgICAgaW50IG4gPSBuc1tpXTsKICAgICAgICBhdXRvICZ0ID0gdHNbaV07CiAgICAgICAgdGFibGVfb2NjdXBpZWQuY2xlYXIoKTsKICAgICAgICBvY2N1cGllZF
9jZWxscy5jbGVhcigpOwoKICAgICAgICBmb3IgKGludCBqID0gMDsgaiA8IG47IGorKykgewogICAgICAgICAgICBpZiAodFtqXSA9PSAwKSB7CiAgICAgICAgICAgICAgICAvLyBwaWNrIGZyb20gcHEwOiBmcm
VlIGNlbGxzIGZyb20gdW5vY2N1cGllZCB0YWJsZXMKICAgICAgICAgICAgICAgIHdoaWxlICghcHEwLmVtcHR5KCkpIHsKICAgICAgICAgICAgICAgICAgICBhdXRvIFtkLHgseSx0a2V5XSA9IHBxMC50b3AoKT
sKICAgICAgICAgICAgICAgICAgICBwcTAucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9jY3VwaWVkX2NlbGxzLmNvdW50KChpbnQ2NF90KXggKiAxMDAwMDAwTEwgKyB5KSA9PSAwICYmICF0YWJsZV
9vY2N1cGllZFt0a2V5XSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBhc3NpZ24gc2VhdAogICAgICAgICAgICAgICAgICAgICAgICBvY2N1cGllZF9jZWxscy5pbnNlcnQoKGludDY0X3QpeCAqIDEwMD
AwMDBMTCArIHkpOwogICAgICAgICAgICAgICAgICAgICAgICB0YWJsZV9vY2N1cGllZFt0a2V5XSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgY2VsbHMgb2YgdGhpcyB0YW
JsZSBmcm9tIHBxMCBieSBpZ25vcmluZyB0aGVtIG5leHQgdGltZQogICAgICAgICAgICAgICAgICAgICAgICAvLyBwcTAgd2lsbCBiZSBmaWx0ZXJlZCBieSB0YWJsZV9vY2N1cGllZAogICAgICAgICAgICAgIC
AgICAgICAgICAvLyBwcTEgcmVtYWlucyBmb3IgdD0xCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdXQgPDwgeCA8PCAnICcgPDwgeSA8PCAnXG4nOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKIC
AgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyB0W2pdID09IDEKICAgICAgICAgICAgICAgIC8vIHBpY2sgZnJvbSBwcT
E6IGFueSBmcmVlIGNlbGwKICAgICAgICAgICAgICAgIHdoaWxlICghcHExLmVtcHR5KCkpIHsKICAgICAgICAgICAgICAgICAgICBhdXRvIFtkLHgseSx0a2V5XSA9IHBxMS50b3AoKTsKICAgICAgICAgICAgIC
AgICAgICBwcTEucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9jY3VwaWVkX2NlbGxzLmNvdW50KChpbnQ2NF90KXggKiAxMDAwMDAwTEwgKyB5KSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgIC
AgIC8vIGFzc2lnbiBzZWF0CiAgICAgICAgICAgICAgICAgICAgICAgIG9jY3VwaWVkX2NlbGxzLmluc2VydCgoaW50NjRfdCl4ICogMTAwMDAwMExMICsgeSk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG
lmIHRhYmxlIG5vdCBvY2N1cGllZCwgbWFyayBpdCB0byBlbnN1cmUgcHEwIGNvcnJlY3RuZXNzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFibGVfb2NjdXBpZWRbdGtleV0pIHsKICAgICAgICAgIC
AgICAgICAgICAgICAgICAgIHRhYmxlX29jY3VwaWVkW3RrZXldID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgY2VsbHMgb2YgdGhpcyB0YWJsZSBmcm9tIHBxMCBieS
BpZ25vcmluZyB0aGVtCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY291dCA8PCB4IDw8ICcgJyA8PCB5IDw8ICdcbic7CiAgICAgICAgICAgICAgICAgICAgICAgIG
JyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp; tmu
x wait -S done
root@791e3c302736:/app#
