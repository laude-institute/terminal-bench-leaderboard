root@665a51f1b422:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7Cgpjb25zdCBpbnQgTU9EID0gMTAwMDAwMDAwNzsKCi8vIGRwW2ldW2pdOiBudW1iZXIgb2
Ygd2F5cyBhZnRlciBpLXRoIGFpcnBsYW5lIGxhdW5jaGVkLCB3aXRoIGogZmxvb3JzIGhhdmluZyByZWFjaGVkIGMgbGF1bmNoZXMgc2VlbgovLyBCZWNhdXNlIGFsbCBhX2k9MCwgd2UgbmVlZCB0byBjb3VudC
B0aGUgbnVtYmVyIG9mIHdheXMgdG8gYXNzaWduIGZsb29ycyB0byBlYWNoIGxhdW5jaAovLyBzbyB0aGF0IGZvciBlYWNoIGZsb29yLCBhdCB0aGUgZW5kLCB0aGUgdG90YWwgbGF1bmNoZXMgc2VlbiA+PSBjCg
ppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIGNpbi50aWUobnVsbHB0cik7CiAgICBpbnQgdDsKICAgIGNpbiA+PiB0OwogICAgd2hpbGUgKHQtLSkgewogICAgICAgIG
ludCBuLCBjLCBtOwogICAgICAgIGNpbiA+PiBuID4+IGMgPj4gbTsKICAgICAgICB2ZWN0b3I8aW50PiBhKG0pOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbTsgaSsrKSBjaW4gPj4gYVtpXTsKICAgIC
AgICAvLyBhbGwgYVtpXSA9IDAgZ3VhcmFudGVlZAoKICAgICAgICAvLyBXZSBjYW4gbW9kZWwgdGhlIHByb2JsZW0gYXMgY291bnRpbmcgc2VxdWVuY2VzIGFfMS4uYV9tIHdoZXJlIGVhY2ggYV9pIGluIFsxLi
5uXQogICAgICAgIC8vIHN1Y2ggdGhhdDoKICAgICAgICAvLyBGb3IgZWFjaCBmbG9vciBpLCB0aGUgbnVtYmVyIG9mIGFpcnBsYW5lcyBsYXVuY2hlZCBmcm9tIGZsb29yIDw9IGkgaXMgPj0gYwoKICAgICAgIC
AvLyBGb3IgZWFjaCBwcmVmaXggaSwgYW5kIGZvciBlYWNoIGZsb29yIGosIHRoZSBudW1iZXIgb2YgbGF1bmNoZXMgZnJvbSBmbG9vcnMgPD0gaiB1cCB0byBpCiAgICAgICAgLy8gbXVzdCBiZSB0cmFja2VkIH
RvIHZlcmlmeSBjb25zdHJhaW50cy4KCiAgICAgICAgLy8gTGV0J3MgZGVmaW5lIGRwW2ldW2pdOiBudW1iZXIgb2Ygd2F5cyB0aGF0IGFmdGVyIGkgbGF1bmNoZXMsIGV4YWN0bHkgaiBmbG9vcnMgaGF2ZSByZW
FjaGVkIGMgbGF1bmNoZXMgc2VlbiAoaS5lLiwgdGhlaXIgcHJlZml4IHN1bXMgPj0gYykKCiAgICAgICAgLy8gSW5pdGlhbGx5IGRwWzBdWzBdID0gMQogICAgICAgIC8vIEF0IGVhY2ggc3RlcCwgd2UgcGljay
BmbG9vciBmIGluIFsxLi5uXQogICAgICAgIC8vIFdoZW4gd2UgcGljayBmbG9vciBmLCBmbG9vcnMgMS4uZiBzZWUgb25lIG1vcmUgbGF1bmNoLgogICAgICAgIC8vIFNvbWUgZmxvb3JzIG1heSByZWFjaCBjIG
xhdW5jaGVzIHNlZW4gYXQgdGhpcyBzdGVwLgoKICAgICAgICAvLyBXZSB0cmFjayBob3cgbWFueSBmbG9vcnMgaGF2ZSByZWFjaGVkIGMgbGF1bmNoZXMgc2Vlbi4KCiAgICAgICAgLy8gV2UnbGwga2VlcCB0cm
FjayBvZiBob3cgbWFueSBmbG9vcnMgaGF2ZSBjdXJyZW50IGNvdW50cyA8IGMuCgogICAgICAgIHZlY3Rvcjx2ZWN0b3I8bG9uZyBsb25nPj4gZHAobSsxLCB2ZWN0b3I8bG9uZyBsb25nPihuKzEsMCkpOwogIC
AgICAgIGRwWzBdWzBdID0gMTsKCiAgICAgICAgLy8gY250X2xlc3M6IG51bWJlciBvZiBmbG9vcnMgd2l0aCBjb3VudHMgPCBjCiAgICAgICAgLy8gQXQgc3RhcnQsIGFsbCBmbG9vcnMgaGF2ZSAwIGxhdW5jaG
VzIHNlZW4sIHNvIGNudF9sZXNzID0gbgogICAgICAgIC8vIFdoZW4gd2UgbGF1bmNoIGZyb20gZmxvb3IgZiwgZmxvb3JzIDEuLmYgaW5jcmVhc2UgdGhlaXIgY291bnRzIGJ5IDEKICAgICAgICAvLyBTb21lIG
Zsb29ycyBtYXkgcmVhY2ggYyBmcm9tIGMtMQoKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG07IGkrKykgewogICAgICAgICAgICB2ZWN0b3I8dmVjdG9yPGxvbmcgbG9uZz4+IG5kcChtKzEsIHZlY3Rvcj
xsb25nIGxvbmc+KG4rMSwwKSk7CiAgICAgICAgICAgIGZvciAoaW50IHJlYWNoZWQgPSAwOyByZWFjaGVkIDw9IG47IHJlYWNoZWQrKykgewogICAgICAgICAgICAgICAgaWYgKGRwW2ldW3JlYWNoZWRdID09ID
ApIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgaW50IGxlc3MgPSBuIC0gcmVhY2hlZDsgLy8gZmxvb3JzIG5vdCByZWFjaGVkIGMgeWV0CiAgICAgICAgICAgICAgICBsb25nIGxvbmcgd2F5cyA9IGRwW2ldW3
JlYWNoZWRdOwogICAgICAgICAgICAgICAgLy8gV2UgdHJ5IHRvIHBpY2sgZmxvb3IgZiBmcm9tIDEgdG8gbgogICAgICAgICAgICAgICAgLy8gRm9yIGZsb29ycyAxLi5mLCB0aGVpciBjb3VudHMgaW5jcmVhc2
UgYnkgMQogICAgICAgICAgICAgICAgLy8gQW1vbmcgbGVzcyBmbG9vcnMsIHNvbWUgbnVtYmVyIGJlY29tZSByZWFjaGVkCgogICAgICAgICAgICAgICAgLy8gTnVtYmVyIG9mIGZsb29ycyBjdXJyZW50bHkgbG
VzczogbGVzcwogICAgICAgICAgICAgICAgLy8gQW1vbmcgdGhlc2UgbGVzcyBmbG9vcnMsIHNvbWUgYXJlIGluIHRoZSBmaXJzdCBmIGZsb29ycywgc29tZSBhcmUgbm90CiAgICAgICAgICAgICAgICAvLyBXZS
BzZWxlY3QgZiwgdGhlbiB0aGUgbnVtYmVyIG9mIGZsb29ycyByZWFjaGluZyBjIGlzIHRoZSBudW1iZXIgb2YgZmxvb3JzIGluIFsxLi5mXSB0aGF0IGhhZCBjb3VudCA9PSBjLTEKCiAgICAgICAgICAgICAgIC
AvLyBCdXQgd2UgZG9uJ3Qga25vdyB3aGljaCBmbG9vcnMgaGF2ZSBjb3VudCBjLTEgZXhhY3RseSwgb25seSBob3cgbWFueSBmbG9vcnMgaGF2ZSBjb3VudHMgPCBjCiAgICAgICAgICAgICAgICAvLyBTaW5jZS
BhbGwgZmxvb3JzIHN0YXJ0IGF0IDAsIGFuZCBpbmNyZWFzZXMgYnkgMSB3aGVuIHNlbGVjdGVkIGluIHByZWZpeAogICAgICAgICAgICAgICAgLy8gV2UgY2FuIHRoaW5rIGluIHRlcm1zIG9mIGhvdyBtYW55IG
Zsb29ycyBoYXZlIGNvdW50ID09IGMtMSBiZWZvcmUgdGhpcyBzdGVwCgogICAgICAgICAgICAgICAgLy8gTGV0J3Mga2VlcCB0cmFjayBvZiBob3cgbWFueSBmbG9vcnMgaGF2ZSBjb3VudHMgPT0gYy0xIChjYW
xsIHgpLCBjb3VudHMgPCBjLTEgKHkpLCBjb3VudHMgPT0gYyAocmVhY2hlZCkKICAgICAgICAgICAgICAgIC8vIEJ1dCB3ZSBvbmx5IHRyYWNrIHJlYWNoZWQsIHNvIHdlIGNhbid0IGtub3cgZXhhY3QgZGlzdH
JpYnV0aW9uCgogICAgICAgICAgICAgICAgLy8gSW5zdGVhZCwgd2Ugd2lsbCBjb25zaWRlciB0aGF0IGFtb25nIGxlc3MgZmxvb3JzLCBzb21lIG51bWJlciBrIGFyZSBpbiB0aGUgZmlyc3QgZiBmbG9vcnMgKH
doaWNoIHdpbGwgaW5jcmVhc2UgY291bnRzIGJ5IDEpCiAgICAgICAgICAgICAgICAvLyBhbmQgYW1vbmcgdGhvc2Ugaywgc29tZSBjYW4gcmVhY2ggYyBub3cgKHRob3NlIHRoYXQgaGFkIGNvdW50ID09IGMtMS
kKCiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIGFsbCBmbG9vcnMgYXJlIHN5bW1ldHJpY2FsIGFuZCBpbml0aWFsIGNvdW50cyBhcmUgemVybywgYXQgc3RlcCBpLAogICAgICAgICAgICAgICAgLy8gdGhlIG
51bWJlciBvZiBsYXVuY2hlcyBhZmZlY3RpbmcgZmxvb3JzIGRlcGVuZHMgb24gaG93IG1hbnkgdGltZXMgZmxvb3JzIHdlcmUgc2VsZWN0ZWQgcHJldmlvdXNseS4KCiAgICAgICAgICAgICAgICAvLyBJdCdzIG
NvbXBsaWNhdGVkIHRvIHRyYWNrIGV4YWN0IGNvdW50cyBwZXIgZmxvb3IsIGJ1dCBzaW5jZSBhbGwgYV9pPTAsCiAgICAgICAgICAgICAgICAvLyB3ZSBjYW4gdXNlIGFub3RoZXIgYXBwcm9hY2g6CgogICAgIC
AgICAgICAgICAgLy8gTGV04oCZcyByZXByZXNlbnQgdGhlIGZsb29ycyBieSB0aGVpciBjb3VudHM6IGVhY2ggZmxvb3IgaGFzIGNvdW50IG9mIGhvdyBtYW55IHRpbWVzIGl0IHdhcyBjb3ZlcmVkIGJ5IGxhdW
5jaGVzIChwcmVmaXggc3VtcykuCiAgICAgICAgICAgICAgICAvLyBBdCBlYWNoIHN0ZXAsIHdlIHBpY2sgZmxvb3IgZiwgd2hpY2ggaW5jcmVhc2VzIGNvdmVyYWdlIGZvciBmbG9vcnMgMS4uZiBieSAxLgoKIC
AgICAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gY291bnQgdGhlIG51bWJlciBvZiBzZXF1ZW5jZXMgb2YgbGVuZ3RoIG0gb2YgZmxvb3JzIGZfaSBpbiBbMS4ubl0KICAgICAgICAgICAgICAgIC8vIHN1Y2ggdG
hhdCBhZnRlciBzZXF1ZW5jZSBpcyBkb25lLCBhbGwgZmxvb3JzIGhhdmUgY292ZXJhZ2UgPj0gYy4KCiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIGNvdmVyYWdlIGluY3JlYXNlcyBieSAxIGZvciBmbG9vcn
MgMS4uZl9pIGF0IHN0ZXAgaSwKICAgICAgICAgICAgICAgIC8vIHRoZSBjb3ZlcmFnZSBvZiBmbG9vciBqIGlzIG51bWJlciBvZiBpIHdpdGggZl9pID49IGouCgogICAgICAgICAgICAgICAgLy8gU28gY292ZX
JhZ2Vbal0gPSBjb3VudCBvZiBsYXVuY2hlcyB3aXRoIGZfaSA+PSBqCgogICAgICAgICAgICAgICAgLy8gU28gY292ZXJhZ2UgaXMgYSBub24taW5jcmVhc2luZyBzZXF1ZW5jZSBjb3ZlcmFnZVsxXSA+PSBjb3
ZlcmFnZVsyXSA+PSAuLi4gPj0gY292ZXJhZ2Vbbl0KCiAgICAgICAgICAgICAgICAvLyBFYWNoIGNvdmVyYWdlW2pdIGluIFswLi5tXSwgYW5kIGNvdmVyYWdlW2pdID49IGMgZm9yIGFsbCBqCgogICAgICAgIC
AgICAgICAgLy8gQWxzbywgc3VtIG9mIGNvdmVyYWdlIGRpZmZlcmVuY2VzID0gbQoKICAgICAgICAgICAgICAgIC8vIFRoZSBwcm9ibGVtIHJlZHVjZXMgdG8gY291bnRpbmcgbnVtYmVyIG9mIHNlcXVlbmNlcy
BmX2kgaW4gWzEuLm5dIHN1Y2ggdGhhdCB0aGUgY292ZXJhZ2Ugc2VxdWVuY2Ugc2F0aXNmaWVzIGNvdmVyYWdlW2pdID49IGMKCiAgICAgICAgICAgICAgICAvLyBOdW1iZXIgb2Ygc2VxdWVuY2VzIGVxdWFscy
BudW1iZXIgb2Ygc2VxdWVuY2VzIGZfaSBpbiBbMS4ubl0gb2YgbGVuZ3RoIG0gc3VjaCB0aGF0IGZvciBhbGwgaiwgY292ZXJhZ2Vbal0gPj0gYyBhbmQgY292ZXJhZ2UgaXMgbm9uLWluY3JlYXNpbmcuCgogIC
AgICAgICAgICAgICAgLy8gVGhlIGNvdmVyYWdlIHNlcXVlbmNlIGlzOgogICAgICAgICAgICAgICAgLy8gY292ZXJhZ2VbMV0gPSBjb3VudCBvZiBmX2kgPj0xID0gbQogICAgICAgICAgICAgICAgLy8gY292ZX
JhZ2Vbbl0gPSBjb3VudCBvZiBmX2kgPj0gbgoKICAgICAgICAgICAgICAgIC8vIGNvdmVyYWdlIGlzIGEgbm9uLWluY3JlYXNpbmcgc2VxdWVuY2Ugb2YgaW50ZWdlcnMgZnJvbSBtIGRvd24gdG8gMC4KCiAgIC
AgICAgICAgICAgICAvLyBUbyBoYXZlIGNvdmVyYWdlW2pdID49IGMsIGNvdmVyYWdlIG11c3QgYmUgYXQgbGVhc3QgYyBmb3IgYWxsIGouCgogICAgICAgICAgICAgICAgLy8gRGVmaW5lIGNvdmVyYWdlJ1tqXS
A9IGNvdmVyYWdlW2pdIC0gYyA+PSAwCiAgICAgICAgICAgICAgICAvLyBjb3ZlcmFnZScgaXMgYSBub24taW5jcmVhc2luZyBzZXF1ZW5jZSBvZiBsZW5ndGggbiB3aXRoIHZhbHVlcyBpbiBbMC4ubS1jXQoKIC
AgICAgICAgICAgICAgIC8vIHN1bSBvdmVyIGogb2YgKGNvdmVyYWdlW2pdIC0gY292ZXJhZ2VbaisxXSkgPSBjb3ZlcmFnZVsxXSAtIGNvdmVyYWdlW24rMV0gPSBtIC0gMCA9IG0KICAgICAgICAgICAgICAgIC
8vIFNpbWlsYXJseSBzdW0gb2YgY292ZXJhZ2UnIGRpZmZlcmVuY2VzID0gbSAtIG4qYwoKICAgICAgICAgICAgICAgIC8vIFNpbmNlIGNvdmVyYWdlJ1tqXSA+PSAwIGFuZCBub24taW5jcmVhc2luZywgdGhlIG
RpZmZlcmVuY2VzIChjb3ZlcmFnZSdbal0gLSBjb3ZlcmFnZSdbaisxXSkgYXJlIG5vbi1uZWdhdGl2ZSBhbmQgc3VtIHRvIG0gLSBuKmMuCgogICAgICAgICAgICAgICAgLy8gVGhlIG51bWJlciBvZiBzZXF1ZW
5jZXMgZl9pIHByb2R1Y2luZyBjb3ZlcmFnZSBpczoKICAgICAgICAgICAgICAgIC8vIHByb2R1Y3Qgb3ZlciBqIG9mIChjb3ZlcmFnZSdbal0gLSBjb3ZlcmFnZSdbaisxXSkgY2hvb3NlIChudW1iZXIgb2YgbG
F1bmNoZXMgd2l0aCBmbG9vciA9IGopCiAgICAgICAgICAgICAgICAvLyBidXQgdGhpcyBpcyBjb21wbGljYXRlZC4KCiAgICAgICAgICAgICAgICAvLyBBbHRlcm5hdGl2ZSBzb2x1dGlvbiBpcyB0byB1c2UgYS
Brbm93biBEUCBzb2x1dGlvbiBmcm9tIGVkaXRvcmlhbDoKCiAgICAgICAgICAgICAgICAvLyBEZWZpbmUgZHBbaV1bal06IG51bWJlciBvZiB3YXlzIHRvIGFzc2lnbiBmaXJzdCBpIGxhdW5jaGVzIHNvIHRoYX
QgZXhhY3RseSBqIGZsb29ycyBoYXZlIGNvdmVyYWdlID49IGMKCiAgICAgICAgICAgICAgICAvLyBJbml0aWFsbHkgZHBbMF1bMF0gPSAxCgogICAgICAgICAgICAgICAgLy8gRm9yIGVhY2ggbGF1bmNoLCB3ZS
BjaG9vc2UgZmxvb3IgZiBpbiBbMS4ubl0KICAgICAgICAgICAgICAgIC8vIFRoaXMgaW5jcmVhc2VzIGNvdmVyYWdlIG9mIGZsb29ycyAxLi5mIGJ5IDEKCiAgICAgICAgICAgICAgICAvLyBTb21lIGZsb29ycy
BtYXkgcmVhY2ggY292ZXJhZ2UgYyBhZnRlciB0aGlzIGxhdW5jaAoKICAgICAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgZmxvb3JzIHRoYXQgcmVhY2ggY292ZXJhZ2UgYyBhdCB0aGlzIHN0ZXAgaXMgay
BpbiBbMC4ubWluKGYsIG4gLSBqKV0KCiAgICAgICAgICAgICAgICAvLyBXZSBjYW4gcHJlY29tcHV0ZSBob3cgbWFueSBmbG9vcnMgY2FuIHJlYWNoIGNvdmVyYWdlIGMgZnJvbSBjb3ZlcmFnZSBjLTEKCiAgIC
AgICAgICAgICAgICAvLyBJbXBsZW1lbnRpbmcgdGhlIERQIGFzIHBlciBlZGl0b3JpYWw6CgogICAgICAgICAgICAgICAgaW50IG1heF9mbG9vciA9IG47CgogICAgICAgICAgICAgICAgLy8gZHBbaV1bal06IH
dheXMgYWZ0ZXIgaSBsYXVuY2hlcywgaiBmbG9vcnMgaGF2ZSBjb3ZlcmFnZSA+PSBjCiAgICAgICAgICAgICAgICB2ZWN0b3I8dmVjdG9yPGxvbmcgbG9uZz4+IGRwKG0rMSwgdmVjdG9yPGxvbmcgbG9uZz4obi
sxLDApKTsKICAgICAgICAgICAgICAgIGRwWzBdWzBdID0gMTsKCiAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG07IGkrKykgewogICAgICAgICAgICAgICAgICAgIGZvciAoaW50IGogPSAwOy
BqIDw9IG47IGorKykgewogICAgICAgICAgICAgICAgICAgICAgICBsb25nIGxvbmcgdmFsID0gZHBbaV1bal07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPT0gMCkgY29udGludWU7CiAgICAgIC
AgICAgICAgICAgICAgICAgIC8vIFdlIHBpY2sgZmxvb3IgZiBmcm9tIDEgdG8gbgogICAgICAgICAgICAgICAgICAgICAgICAvLyBmbG9vcnMgMS4uZiBjb3ZlcmFnZSBpbmNyZWFzZXMgYnkgMQogICAgICAgIC
AgICAgICAgICAgICAgICAvLyBhbW9uZyBmbG9vcnMgbm90IHJlYWNoZWQgYyB5ZXQsIHNvbWUgZmxvb3JzIGluIDEuLmYgd2lsbCByZWFjaCBjCgogICAgICAgICAgICAgICAgICAgICAgICAvLyBudW1iZXIgb2
YgZmxvb3JzIG5vdCByZWFjaGVkIGM6IG4gLSBqCgogICAgICAgICAgICAgICAgICAgICAgICAvLyBudW1iZXIgb2YgZmxvb3JzIGluIDEuLmYgbm90IHJlYWNoZWQgYzogeCA9IG1pbihmLCBuIC0gaikKCiAgIC
AgICAgICAgICAgICAgICAgICAgIC8vIEZvciBrIGluIFswLi54XSwgbnVtYmVyIG9mIGZsb29ycyByZWFjaGluZyBjIGF0IHRoaXMgc3RlcCBpcyBrCgogICAgICAgICAgICAgICAgICAgICAgICAvLyBTbyBuZX
h0IHN0YXRlIGlzIGRwW2krMV1baiArIGtdCgogICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIHdheXMgdG8gY2hvb3NlIHdoaWNoIGsgZmxvb3JzIHJlYWNoIGMgaXMgQyh4LCBrKSwgYn
V0IHNpbmNlIGZsb29ycyBhcmUgaW5kaXN0aW5ndWlzaGFibGUsIHN1bSBvdmVyIGsgb2Ygd2F5cwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGFsbCBmbG9vcnMgaW4gMS4uZiwgdGhlIGZsb29ycy
B0aGF0IGhhdmUgY292ZXJhZ2UgYy0xIGFuZCBiZWNvbWUgYyBub3cgYXJlIGV4YWN0bHkgdGhvc2UgdGhhdCB3ZXJlIGNvdmVyYWdlIGMtMSBiZWZvcmUuCgogICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW
5jZSB3ZSBkb24ndCB0cmFjayBleGFjdCBkaXN0cmlidXRpb24sIGFzc3VtZSBhbGwgZmxvb3JzIGluIDEuLmYgbm90IHJlYWNoZWQgYyB5ZXQgY2FuIHJlYWNoIGMgbm93LgoKICAgICAgICAgICAgICAgICAgIC
AgICAgaW50IHggPSBtaW4oZmxvb3IobiksIG4gLSBqKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIGZsb29ycyBhcmUgaW5kaXN0aW5ndWlzaGFibGUsIHN1bSBvdmVyIGsgZnJvbSAwIHRvIH
ggb2YgQyh4LGspID0gMl54CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBCdXQgd2UgbXVzdCBjb25zaWRlciB0aGUgd2F5cyB0byBjaG9vc2UgayBmbG9vcnMgdG8gcmVhY2ggYyBhbmQgdXBkYXRlIGRwIG
FjY29yZGluZ2x5CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBBY3R1YWxseSwgZWRpdG9yaWFsIHNvbHV0aW9uIGlzOgogICAgICAgICAgICAgICAgICAgICAgICAvLyBkcFtpKzFdW2pdICs9IGRwW2ldW2
pdICogZgogICAgICAgICAgICAgICAgICAgICAgICAvLyBkcFtpKzFdW2orMV0gKz0gZHBbaV1bal0gKiAobiAtIGopICogKG51bWJlciBvZiBmbG9vcnMgaW4gMS4uZiB0aGF0IGNhbiByZWFjaCBjKQoKICAgIC
AgICAgICAgICAgICAgICAgICAgLy8gVGhlIGVkaXRvcmlhbCBzb2x1dGlvbidzIERQIGlzIGNvbXBsZXgsIHNvIGhlcmUgd2UgaW1wbGVtZW50IGEgc2ltcGxlciBPKG4qbSkgc29sdXRpb246CgogICAgICAgIC
AgICAgICAgICAgICAgICAvLyBUaGUgcHJvYmxlbSBpcyBlcXVpdmFsZW50IHRvIGNvdW50aW5nIHNlcXVlbmNlcyBmX2kgaW4gWzEuLm5dIHN1Y2ggdGhhdCBjb3ZlcmFnZVtqXSA+PSBjIGZvciBhbGwgai4KCi
AgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbiB1c2UgYSBjb21iaW5hdG9yaWFsIGZvcm11bGE6CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBOdW1iZXIgb2Ygc2VxdWVuY2VzID0gbnVtYmVyIG
9mIHdheXMgdG8gZGlzdHJpYnV0ZSBtIGxhdW5jaGVzIHdpdGggZWFjaCBsYXVuY2ggZmxvb3IgZiBpbiBbMS4ubl0sCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHRoYXQgZm9yIGVhY2ggZmxvb3Igai
wgY291bnQgb2YgbGF1bmNoZXMgd2l0aCBmbG9vciA+PSBqID49IGMuCgogICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gY291bnRpbmcgbm9uLWluY3JlYXNpbmcgc2VxdW
VuY2VzIGNvdmVyYWdlWzFdID49IGNvdmVyYWdlWzJdID49IC4uLiA+PSBjb3ZlcmFnZVtuXSA+PSBjIHdpdGggc3VtIGNvdmVyYWdlW2pdID0gbSArIG4qYwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVG
hlIG51bWJlciBvZiBzdWNoIHNlcXVlbmNlcyBpcyBDKG0gLSAxLCBuIC0gMSkgaWYgbSA+PSBuKmMgZWxzZSAwCgogICAgICAgICAgICAgICAgICAgICAgICAvLyBCdXQgd2UgbmVlZCB0byBwcm9kdWNlIHRoZS
BleGFjdCBudW1iZXIgZm9yIHRoZSBwcm9ibGVtLgoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIHRoaXMgcHJvYmxlbSwgYSBrbm93biBmb3JtdWxhIGlzOgogICAgICAgICAgICAgICAgICAgICAgIC
AvLyBUaGUgYW5zd2VyIGlzIG51bWJlciBvZiBzZXF1ZW5jZXMgZl8xLi5mX20gd2l0aCBmX2kgaW4gWzEuLm5dLCBzdWNoIHRoYXQgY292ZXJhZ2Vbal0gPj0gYyBmb3IgYWxsIGouCgogICAgICAgICAgICAgIC
AgICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIHN1Y2ggc2VxdWVuY2VzIGlzIGVxdWFsIHRvIG51bWJlciBvZiBjb21wb3NpdGlvbnMgb2YgbSBpbnRvIG4gcGFydHMgZWFjaCBhdCBsZWFzdCBjLAogICAgICAgIC
AgICAgICAgICAgICAgICAvLyB3aGljaCBpcyBDKG0gLSBuKmMgKyBuIC0gMSwgbiAtIDEpLgoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnV0IHNpbmNlIG0gPj0gbipjIGlzIG5vdCBndWFyYW50ZWVkLC
B3ZSBtdXN0IGNoZWNrIGZlYXNpYmlsaXR5LgoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHByb2JsZW0gc3RhdGVzIGMgPD0gbSA8PSBuKmMsIHNvIGZlYXNpYmxlIGlmIG0gPj0gbipjCgogICAgIC
AgICAgICAgICAgICAgICAgICAvLyBXYWl0LCBjb25zdHJhaW50cyBzYXkgYyA8PSBtIDw9IG4qYywgc28gbSBjYW4gYmUgbGVzcyB0aGFuIG4qYy4KCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvIGl0J3
MgcG9zc2libGUgbm8gc2VxdWVuY2VzIGV4aXN0LgoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgbSA8IG4qYywgYW5zd2VyIGlzIDAuCgogICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBtID49IG
4qYywgYW5zd2VyIGlzIEMobSAtIG4qYyArIG4gLSAxLCBuIC0gMSkuCgogICAgICAgICAgICAgICAgICAgICAgICAvLyBMZXQncyBpbXBsZW1lbnQgdGhpcyBmb3JtdWxhLgoKICAgICAgICAgICAgICAgICAgIC
AgICAgLy8gTW9kdWxhciBjb21iaW5hdG9yaWNzOgogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWMgdmVjdG9yPGxvbmcgbG9uZz4gZmFjdCgxMDAwMCArIDEwMCksIGludmZhY3QoMTAwMDAgKyAxMDApOw
ogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWMgYm9vbCBpbml0aWFsaXplZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWluaXRpYWxpemVkKSB7CiAgICAgICAgICAgICAgICAgIC
AgICAgICAgICBpbnQgbWF4diA9IDEwMDAwICsgMTAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjdFswXSA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMTsgaS
A8PSBtYXh2OyBpKyspIGZhY3RbaV0gPSBmYWN0W2ktMV0gKiBpICUgTU9EOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZmFjdFttYXh2XSA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIC
Bsb25nIGxvbmcgYmFzZSA9IGZhY3RbbWF4dl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGZXJtYXQgaW52ZXJzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZyBsb25nIHAgPSBNT0
QgLSAyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZyBsb25nIHJlcyA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nIGxvbmcgY3VyID0gYmFzZTsKICAgICAgICAgICAgICAgIC
AgICAgICAgICAgIHdoaWxlIChwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAgJjEpIHJlcyA9IHJlcyAqIGN1ciAlIE1PRDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
BjdXIgPSBjdXIgKiBjdXIgJSBNT0Q7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA+Pj0xOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIC
AgaW52ZmFjdFttYXh2XSA9IHJlczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSBtYXh2IC0gMTsgaSA+PTA7IGktLSkgaW52ZmFjdFtpXSA9IGludmZhY3RbaSsxXSAqIChpKzEpIC
UgTU9EOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBhdXRvIGNvbWIgPSBbJl
0oaW50IG5fLCBpbnQgcl8pIC0+IGxvbmcgbG9uZyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocl8gPCAwIHx8IHJfID4gbl8pIHJldHVybiAwOwogICAgICAgICAgICAgICAgICAgICAgICAgIC
AgcmV0dXJuIGZhY3Rbbl9dICogaW52ZmFjdFtyX10gJSBNT0QgKiBpbnZmYWN0W25fLXJfXSAlIE1PRDsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmcgbG
9uZyBhbnMgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobSA+PSBuICogYykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zID0gY29tYihtIC0gbiAqIGMgKyBuIC0gMSwgbiAtIDEpOw
ogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIC
AgY291dCA8PCBhbnMgJSBNT0QgPDwgJ1xuJzsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIHNpbmNlIHdlIGhhdmUgdGhlIGFuc3dlciwgYnJlYWsgdGhlIGxvb3AKICAgICAgICAgICAgICAgIC
AgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp; tmux wa
it -S done
root@665a51f1b422:/app#
