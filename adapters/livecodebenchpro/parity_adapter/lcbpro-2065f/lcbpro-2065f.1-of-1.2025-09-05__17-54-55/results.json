{
    "id": "4fd16442-80ee-4b57-9dbb-ebc5b5e4da04",
    "trial_name": "lcbpro-2065f.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2065f",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2065F)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nLet's define the majority of a sequence of $k$ elements as the unique value that appears strictly more than $\\left \\lfloor {\\frac{k}{2}} \\right \\rfloor$ times. If such a value does not exist, then the sequence does not have a majority. For example, the sequence $[1,3,2,3,3]$ has a majority $3$ because it appears $3 > \\left \\lfloor {\\frac{5}{2}} \\right \\rfloor = 2$ times, but $[1,2,3,4,5]$ and $[1,3,2,3,4]$ do not have a majority.\n\nSkibidus found a tree$^{\\text{∗}}$ of $n$ vertices and an array $a$ of length $n$. Vertex $i$ has the value $a_i$ written on it, where $a_i$ is an integer in the range $[1, n]$.\n\nFor each $i$ from $1$ to $n$, please determine if there exists a non-trivial simple path$^{\\text{†}}$ such that $i$ is the majority of the sequence of integers written on the vertices that form the path.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$A sequence of vertices $v_1, v_2, ..., v_m$ ($m \\geq 2$) forms a non-trivial simple path if $v_i$ and $v_{i+1}$ are connected by an edge for all $1 \\leq i \\leq m - 1$ and all $v_i$ are pairwise distinct. Note that the path must consist of at least $2$ vertices.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 5 \\cdot 10^5$)  -- the number of vertices.\n\nThe second line of each test case contains $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$)  -- the integers written on the vertices.\n\nEach of the next $n-1$ lines contains two integers $u_i$ and $v_i$, denoting the two vertices connected by an edge ($1 \\le u_i,v_i \\le n$, $u_i \\neq v_i$).\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a binary string $s$ of length $n$ on a separate line. $s_i$ should be computed as follows:\n\n- If there is a non-trivial path containing $i$ as the majority, $s_i$ is '1';\n- Otherwise, $s_i$ is '0'.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n1 2 3\n\n1 3\n\n2 3\n\n4\n\n3 1 1 3\n\n1 2\n\n2 3\n\n4 2\n\n4\n\n2 4 4 2\n\n1 2\n\n2 3\n\n3 4\n\n13\n\n1 4 4 7 4 7 1 1 7 11 11 11 11\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n4 6\n\n2 7\n\n7 8\n\n2 9\n\n6 10\n\n5 11\n\n11 12\n\n10 13\n\n```\n\n#### Output #1\n\n```\n000\n1010\n0001\n1001001000100\n```\n\n### Note\n\nIn the first test case, there is no non-trivial path with $1$, $2$, or $3$ as a majority, so the binary string outputted is \"000\".\n\nIn the second test case, $1\\rightarrow 2\\rightarrow 4$ is a non-trivial path with $3$ as a majority.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2065f/lcbpro-2065f.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1322,
    "total_output_tokens": 1041,
    "trial_started_at": "2025-09-06T01:33:56.275443+00:00",
    "trial_ended_at": "2025-09-06T01:35:09.384415+00:00",
    "agent_started_at": "2025-09-06T01:34:27.814129+00:00",
    "agent_ended_at": "2025-09-06T01:34:42.355190+00:00",
    "test_started_at": "2025-09-06T01:34:44.968395+00:00",
    "test_ended_at": "2025-09-06T01:34:47.907559+00:00"
}