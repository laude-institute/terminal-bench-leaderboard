{
    "id": "bdbf3260-53ca-4d69-8360-e53ed7dbd73b",
    "trial_name": "lcbpro-2056b.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2056b",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2056B)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given an undirected graph with $n$ vertices, labeled from $1$ to $n$. This graph encodes a hidden permutation$^{\\text{∗}}$ $p$ of size $n$. The graph is constructed as follows:\n\n- For every pair of integers $1 \\le i < j \\le n$, an undirected edge is added between vertex $p_i$ and vertex $p_j$ if and only if $p_i < p_j$. Note that the edge is not added between vertices $i$ and $j$, but between the vertices of their respective elements. Refer to the notes section for better understanding.\n\nYour task is to reconstruct and output the permutation $p$. It can be proven that permutation $p$ can be uniquely determined.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 1000$).\n\nThe $i$-th of the next $n$ lines contains a string of $n$ characters $g_{i, 1}g_{i, 2}\\ldots g_{i, n}$ ($g_{i, j} = \\mathtt{0}$ or $g_{i, j} = \\mathtt{1}$) -- the adjacency matrix. $g_{i, j} = \\mathtt{1}$ if and only if there is an edge between vertex $i$ and vertex $j$.\n\nIt is guaranteed that there exists a permutation $p$ which generates the given graph. It is also guaranteed that the graph is undirected and has no self-loops, meaning $g_{i, j} = g_{j, i}$ and $g_{i, i} = \\mathtt{0}$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output $n$ integers $p_1, p_2, \\ldots, p_n$ representing the reconstructed permutation.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n0\n\n5\n\n00101\n\n00101\n\n11001\n\n00001\n\n11110\n\n6\n\n000000\n\n000000\n\n000000\n\n000000\n\n000000\n\n000000\n\n```\n\n#### Output #1\n\n```\n1\n4 2 1 3 5\n6 5 4 3 2 1\n```\n\n### Note\n\nIn the first case $p = [1]$. Since there are no pairs $1 \\le i < j \\le n$, there are no edges in the graph.\n\nThe graph in the second case is shown below. For example, when we choose $i = 3$ and $j = 4$, we add an edge between vertices $p_i = 1$ and $p_j = 3$, because $p_i < p_j$. However, when we choose $i = 2$ and $j = 3$, $p_i = 2$ and $p_j = 1$, so $p_i < p_j$ doesn't hold. Therefore, we don't add an edge between $2$ and $1$.\n\n![](https://espresso.codeforces.com/73c807a602602d5ad6dd697dfea7a886d23aec16.png)\n\nIn the third case, there are no edges in the graph, so there are no pairs of integers $1 \\le i < j \\le n$ such that $p_i < p_j$. Therefore, $p = [6, 5, 4, 3, 2, 1]$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2056b/lcbpro-2056b.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1337,
    "total_output_tokens": 530,
    "trial_started_at": "2025-09-06T01:35:26.405816+00:00",
    "trial_ended_at": "2025-09-06T01:36:21.672220+00:00",
    "agent_started_at": "2025-09-06T01:35:45.791148+00:00",
    "agent_ended_at": "2025-09-06T01:35:54.890257+00:00",
    "test_started_at": "2025-09-06T01:36:00.430575+00:00",
    "test_ended_at": "2025-09-06T01:36:04.859581+00:00"
}