{
    "id": "259a2dc2-8a48-46eb-89d1-43efdbed7a3b",
    "trial_name": "lcbpro-2070d.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2070d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2070D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given a rooted tree, consisting of $n$ vertices. The vertices in the tree are numbered from $1$ to $n$, and the root is the vertex $1$. Let $d_x$ be the distance (the number of edges on the shortest path) from the root to the vertex $x$.\n\nThere is a chip that is initially placed at the root. You can perform the following operation as many times as you want (possibly zero):\n\n- move the chip from the current vertex $v$ to a vertex $u$ such that $d_u = d_v + 1$. If $v$ is the root, you can choose any vertex $u$ meeting this constraint; however, if $v$ is not the root, $u$ should not be a neighbor of $v$ (there should be no edge connecting $v$ and $u$).\n\n![](https://espresso.codeforces.com/769463352aac7806978d82f0bd49238491821303.png)\n\nFor example, in the tree above, the following chip moves are possible: $1 \\rightarrow 2$, $1 \\rightarrow 5$, $2 \\rightarrow 7$, $5 \\rightarrow 3$, $5 \\rightarrow 4$, $3 \\rightarrow 6$, $7 \\rightarrow 6$.\n\nA sequence of vertices is valid if you can move the chip in such a way that it visits all vertices from the sequence (and only them), in the order they are given in the sequence.\n\nYour task is to calculate the number of valid vertex sequences. Since the answer might be large, print it modulo $998244353$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) -- the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$).\n\nThe second line contains $n-1$ integers $p_2, p_3, \\dots, p_n$ ($1 \\le p_i < i$), where $p_i$ is the parent of the $i$-th vertex in the tree. Vertex $1$ is the root.\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer -- the number of valid vertex sequences, taken modulo $998244353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n1 2 1\n\n3\n\n1 2\n\n7\n\n1 2 2 1 4 5\n\n```\n\n#### Output #1\n\n```\n4\n2\n8\n```\n\n### Note\n\nIn the first example, the following sequences are valid: $[1]$, $[1, 2]$, $[1, 4]$, $[1, 4, 3]$.\n\nIn the second example, the following sequences are valid: $[1]$, $[1, 2]$.\n\nIn the third example, the following sequences are valid: $[1]$, $[1, 2]$, $[1, 2, 7]$, $[1, 2, 7, 6]$, $[1, 5]$, $[1, 5, 3]$, $[1, 5, 3, 6]$, $[1, 5, 4]$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2070d/lcbpro-2070d.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1160,
    "total_output_tokens": 731,
    "trial_started_at": "2025-09-06T01:07:14.457636+00:00",
    "trial_ended_at": "2025-09-06T01:07:59.427416+00:00",
    "agent_started_at": "2025-09-06T01:07:24.544142+00:00",
    "agent_ended_at": "2025-09-06T01:07:35.308435+00:00",
    "test_started_at": "2025-09-06T01:07:38.651611+00:00",
    "test_ended_at": "2025-09-06T01:07:42.631971+00:00"
}