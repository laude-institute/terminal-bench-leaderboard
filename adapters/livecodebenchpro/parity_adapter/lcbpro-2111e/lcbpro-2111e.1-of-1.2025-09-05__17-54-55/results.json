{
    "id": "d9318c7b-393f-4d8a-815e-ef7d9ec46e86",
    "trial_name": "lcbpro-2111e.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2111e",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2111E)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nGiven a string $s$ that consists only of the first three letters of the Latin alphabet, meaning each character of the string is either a, b, or c.\n\nAlso given are $q$ operations that need to be performed on the string. In each operation, two letters $x$ and $y$ from the set of the first three letters of the Latin alphabet are provided, and for each operation, one of the following two actions must be taken:\n\n- change any (one) occurrence of the letter $x$ in the string $s$ to the letter $y$ (if at least one occurrence of the letter $x$ exists);\n- do nothing.\n\nThe goal is to perform all operations in the given order in such a way that the string $s$ becomes lexicographically minimal.\n\nRecall that a string $a$ is lexicographically less than a string $b$ if and only if one of the following conditions holds:\n\n- $a$ is a prefix of $b$, but $a \\neq b$;\n- at the first position where $a$ and $b$ differ, the string $a$ has a letter that comes earlier in the alphabet than the corresponding letter in $b$.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{3}$) -- the number of test cases. The description of the test cases follows.\n\nIn the first line of each test case, there are two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^{5}$) -- the length of the string $s$ and the number of operations.\n\nIn the second line of each test case, the string $s$ is given -- a string of exactly $n$ characters, each of which is a, b, or c.\n\nThe next $q$ lines of each test case contain the description of the operations. Each line contains two characters $x$ and $y$, each of which is a, b, or c.\n\nAdditional constraints on the input:\n\n- the sum of $n$ across all test cases does not exceed $2 \\cdot 10^{5}$;\n- the sum of $q$ across all test cases does not exceed $2 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, output the lexicographically minimal string that can be obtained from $s$ using the given operations.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\ncb\n\nc b\n\nb a\n\n10 10\n\nbbbbbbbbbb\n\nb a\n\nb c\n\nc b\n\nb a\n\nc a\n\nb c\n\nb c\n\nb a\n\na b\n\nc a\n\n30 20\n\nabcaababcbbcabcbbcabcbabbbbabc\n\nb c\n\nb c\n\nc a\n\nb c\n\nb c\n\nb a\n\nb c\n\nb c\n\nb a\n\nb a\n\nb a\n\nb a\n\nc a\n\nb c\n\nc a\n\nb c\n\nc a\n\nc a\n\nb c\n\nc b\n\n```\n\n#### Output #1\n\n```\nab\naaaaabbbbb\naaaaaaaaaaaaaaabbbabcbabbbbabc\n```\n\n### Note\n\nIn the first test case, both operations need to be applied to the first letter:\n\n1. after the first operation, $s = $ \"bb\"\n2. after the second operation, $s = $ \"ab\"\n\nIn the second test case, the string could change as follows:\n\n01. \"bbbbabbbbb\" (changed the $5$-th letter)\n02. \"cbbbabbbbb\" (changed the $1$-st letter)\n03. \"cbbbabbbbb\" (did nothing)\n04. \"cbbaabbbbb\" (changed the $4$-th letter)\n05. \"abbaabbbbb\" (changed the $1$-st letter)\n06. \"abcaabbbbb\" (changed the $3$-rd letter)\n07. \"abcaabbbbb\" (did nothing)\n08. \"aacaabbbbb\" (changed the $2$-nd letter)\n09. \"aacaabbbbb\" (did nothing)\n10. \"aaaaabbbbb\" (changed the $3$-rd letter)",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2111e/lcbpro-2111e.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1313,
    "total_output_tokens": 606,
    "trial_started_at": "2025-09-06T01:36:21.723968+00:00",
    "trial_ended_at": "2025-09-06T01:37:11.599148+00:00",
    "agent_started_at": "2025-09-06T01:36:36.733475+00:00",
    "agent_ended_at": "2025-09-06T01:36:47.531808+00:00",
    "test_started_at": "2025-09-06T01:36:50.537548+00:00",
    "test_ended_at": "2025-09-06T01:36:53.422248+00:00"
}