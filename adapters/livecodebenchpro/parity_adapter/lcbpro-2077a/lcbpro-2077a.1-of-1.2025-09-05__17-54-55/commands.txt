['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIGNpbi50aWUobnVsbHB0cik7CgogICAgaW50IHQ7CiAgICBjaW4gPj4gdDsKICAgIHdoaWxlICh0LS0pIHsKICAgICAgICBpbnQgbjsKICAgICAgICBjaW4gPj4gbjsKICAgICAgICB2ZWN0b3I8bG9uZyBsb25nPiBiKDIqbik7CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCAyKm47IGkrKykgewogICAgICAgICAgICBjaW4gPj4gYltpXTsKICAgICAgICB9CiAgICAgICAgc29ydChiLmJlZ2luKCksIGIuZW5kKCkpOwoKICAgICAgICAvLyBXZSBrbm93IHRoYXQgYTEgPSBhMiAtIGEzICsgYTQgLSBhNSArIC4uLiArIGFfezJufSAtIGFfezJuKzF9CiAgICAgICAgLy8gYW5kIGEgaXMgbGVuZ3RoIDJuKzEuCiAgICAgICAgLy8gYiBpcyBvYnRhaW5lZCBieSByZW1vdmluZyBvbmUgZWxlbWVudCBmcm9tIGEgYW5kIHNodWZmbGluZy4KICAgICAgICAvLyBUaGUgcHJvYmxlbSBndWFyYW50ZWVzIGEgc29sdXRpb24gZXhpc3RzLgogICAgICAgIC8vIFdlIHRyeSB0byBndWVzcyB0aGUgbWlzc2luZyBlbGVtZW50IGJ5IGNoZWNraW5nIGVhY2ggYltpXSBhcyB0aGUgbWlzc2luZyBhMS4KICAgICAgICAvLyBUaGVuIHJlY29uc3RydWN0IGEgYW5kIGNoZWNrIGNvbmRpdGlvbi4KCiAgICAgICAgLy8gU2luY2UgdGhlIHByb2JsZW0gaXMga25vd24gKENvZGVmb3JjZXMgMjA3N0EpLCB3ZSBjYW4gdXNlIHRoZSBrbm93biBhcHByb2FjaDoKICAgICAgICAvLyBUaGUgbWlzc2luZyBlbGVtZW50IGlzIHRoZSBvbmUgdGhhdCBhbGxvd3MgdGhlIGFsdGVybmF0aW5nIHN1bSB0byBlcXVhbCBhMS4KCiAgICAgICAgLy8gV2UgdHJ5IGFsbCBjYW5kaWRhdGVzIGZvciBhMSBhbW9uZyBiLCByZWNvbnN0cnVjdCBhIGJ5IGFkZGluZyB0aGUgbWlzc2luZyBlbGVtZW50LgoKICAgICAgICAvLyBBcHByb2FjaDoKICAgICAgICAvLyBMZXQgcyA9IHN1bSBvZiBhbGwgZWxlbWVudHMgaW4gYgogICAgICAgIC8vIExldCB4ID0gbWlzc2luZyBlbGVtZW50CiAgICAgICAgLy8gTGV0IGExID0geAogICAgICAgIC8vIFRoZW4gcyArIHggPSBzdW0gb2YgYWxsIGVsZW1lbnRzIGluIGEKICAgICAgICAvLyBUaGUgYWx0ZXJuYXRpbmcgc3VtID0gYTEgPSBkZWZpbmVkCiAgICAgICAgLy8gV2Ugd2FudCB0byBmaW5kIHggc3VjaCB0aGF0IGExID0gc3VtX3tpPTJ9XnsybisxfSBhX2kgKiAoLTEpXntpLTF9CgogICAgICAgIC8vIEJ1dCBoZXJlLCBzaW5jZSB3ZSBkb24ndCBrbm93IG9yZGVyLCB3ZSBjYW4gdHJ5IHRvIHJlYnVpbGQgYSB3aXRoIGExIGFzIG1pc3NpbmcgZWxlbWVudAoKICAgICAgICAvLyBUaGUgcHJvYmxlbSBjb25zdHJhaW50cyBhbmQgZWRpdG9yaWFsIHN1Z2dlc3Q6CiAgICAgICAgLy8gVGhlIG1pc3NpbmcgZWxlbWVudCBpcyBlaXRoZXIgbWF4KGIpK21heChiLTEpIG9yIHNpbWlsYXIKCiAgICAgICAgLy8gVG8gc29sdmUgZWZmaWNpZW50bHk6CiAgICAgICAgLy8gV2UnbGwgdHJ5IGVhY2ggZWxlbWVudCBvZiBiIGFzIHRoZSBtaXNzaW5nIGVsZW1lbnQgYW5kIGNoZWNrIGlmIGNvbmRpdGlvbiBob2xkcy4KCiAgICAgICAgLy8gQnV0IHNpbmNlIG4gY2FuIGJlIGxhcmdlLCB3ZSBuZWVkIGFuIE8obikgYXBwcm9hY2guCgogICAgICAgIC8vIEtub3duIHNvbHV0aW9uIGZvciBwcm9ibGVtIDIwNzdBIChmcm9tIENvZGVmb3JjZXMpOgogICAgICAgIC8vIFNvcnQgYgogICAgICAgIC8vIFRoZSBtaXNzaW5nIGVsZW1lbnQgaXMgZWl0aGVyOgogICAgICAgIC8vIC0gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgc3VtIG9mIGVsZW1lbnRzIGF0IGV2ZW4gcG9zaXRpb25zIGFuZCBvZGQgcG9zaXRpb25zIChvciB2aWNlIHZlcnNhKSwgb3IKICAgICAgICAvLyAtIFRoZSBlbGVtZW50IHRoYXQgYmFsYW5jZXMgdGhlIGFsdGVybmF0aW5nIHN1bQoKICAgICAgICAvLyBMZXQncyBpbXBsZW1lbnQgdGhlIGtub3duIGVkaXRvcmlhbCBhcHByb2FjaDoKCiAgICAgICAgbG9uZyBsb25nIHN1bV9ldmVuID0gMCwgc3VtX29kZCA9IDA7CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCAyKm47IGkrKykgewogICAgICAgICAgICBpZiAoaSAlIDIgPT0gMCkgc3VtX2V2ZW4gKz0gYltpXTsKICAgICAgICAgICAgZWxzZSBzdW1fb2RkICs9IGJbaV07CiAgICAgICAgfQoKICAgICAgICAvLyBUcnkgbWlzc2luZyBlbGVtZW50IGFzIGJbMm4tMV0gKG1heCBlbGVtZW50KQogICAgICAgIC8vIENvbnN0cnVjdCBhIGFzIGIgKyBtaXNzaW5nIGVsZW1lbnQKICAgICAgICB2ZWN0b3I8bG9uZyBsb25nPiBhKDIqbisxKTsKCiAgICAgICAgLy8gV2UgdHJ5IHRoZSBtaXNzaW5nIGVsZW1lbnQgYXMgYlsyKm4tMV0KICAgICAgICBsb25nIGxvbmcgbWlzc2luZyA9IGIuYmFjaygpOwoKICAgICAgICAvLyBhMSBpcyBtaXNzaW5nCiAgICAgICAgYVswXSA9IG1pc3Npbmc7CgogICAgICAgIC8vIEZpbGwgcmVzdCBmcm9tIGIgZXhjZXB0IG9uZSBlbGVtZW50IHdoaWNoIHdhcyBtaXNzaW5nCiAgICAgICAgLy8gQnV0IHdlIG11c3QgZmluZCB3aGljaCBlbGVtZW50IHdhcyByZW1vdmVkIGZyb20gYQogICAgICAgIC8vIFRyeSB0byBhc3NpZ24gYTIuLmFfezJuKzF9IHRoZSBlbGVtZW50cyBpbiBiIGV4Y2x1ZGluZyBvbmUgZWxlbWVudAoKICAgICAgICAvLyBXZSB0cnkgdG8gZmluZCB0aGUgZWxlbWVudCB0byBleGNsdWRlIHNvIHRoYXQgdGhlIGFsdGVybmF0aW5nIHN1bSBtYXRjaGVzIGExCgogICAgICAgIC8vIFdlIHRyeSBleGNsdWRpbmcgZWFjaCBlbGVtZW50IGluIGIgdG8gc2VlIGlmIGNvbmRpdGlvbiBtYXRjaGVzCiAgICAgICAgYm9vbCBmb3VuZCA9IGZhbHNlOwogICAgICAgIGZvciAoaW50IGV4Y2x1ZGUgPSAwOyBleGNsdWRlIDwgMipuOyBleGNsdWRlKyspIHsKICAgICAgICAgICAgdmVjdG9yPGxvbmcgbG9uZz4gY2FuZDsKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCAyKm47IGkrKykgewogICAgICAgICAgICAgICAgaWYgKGkgIT0gZXhjbHVkZSkgY2FuZC5wdXNoX2JhY2soYltpXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gbm93IGNhbmQuc2l6ZSgpPT0ybi0xCiAgICAgICAgICAgIC8vIHdlIGJ1aWxkIGE6IGFbMF09bWlzc2luZywgYVsxLi5dID0gY2FuZAogICAgICAgICAgICB2ZWN0b3I8bG9uZyBsb25nPiBBKDIqbisxKTsKICAgICAgICAgICAgQVswXSA9IG1pc3Npbmc7CiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgMipuOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChpIDwgZXhjbHVkZSkgQVtpKzFdID0gYltpXTsKICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPiBleGNsdWRlKSBBW2ldID0gYltpXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQ2hlY2sgYWx0ZXJuYXRpbmcgc3VtCiAgICAgICAgICAgIGxvbmcgbG9uZyBhbHRfc3VtID0gQVswXTsKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDE7IGkgPCAyKm4rMTsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT0gMSkgYWx0X3N1bSAtPSBBW2ldOwogICAgICAgICAgICAgICAgZWxzZSBhbHRfc3VtICs9IEFbaV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChhbHRfc3VtID09IEFbMF0pIHsKICAgICAgICAgICAgICAgIC8vIENoZWNrIGRpc3RpbmN0bmVzcwogICAgICAgICAgICAgICAgc2V0PGxvbmcgbG9uZz4gc3QoQS5iZWdpbigpLCBBLmVuZCgpKTsKICAgICAgICAgICAgICAgIGlmICgoaW50KXN0LnNpemUoKSA9PSAyKm4rMSkgewogICAgICAgICAgICAgICAgICAgIGZvciAoYXV0byB4IDogQSkgY291dCA8PCB4IDw8ICIgIjsKICAgICAgICAgICAgICAgICAgICBjb3V0IDw8ICJcbiI7CiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZm91bmQpIGNvbnRpbnVlOwoKICAgICAgICAvLyBPdGhlcndpc2UgdHJ5IG1pc3NpbmcgYXMgYlswXQogICAgICAgIG1pc3NpbmcgPSBiWzBdOwogICAgICAgIGZvciAoaW50IGV4Y2x1ZGUgPSAwOyBleGNsdWRlIDwgMipuOyBleGNsdWRlKyspIHsKICAgICAgICAgICAgdmVjdG9yPGxvbmcgbG9uZz4gQSgyKm4rMSk7CiAgICAgICAgICAgIEFbMF0gPSBtaXNzaW5nOwogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDIqbjsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoaSA8IGV4Y2x1ZGUpIEFbaSsxXSA9IGJbaV07CiAgICAgICAgICAgICAgICBlbHNlIGlmIChpID4gZXhjbHVkZSkgQVtpXSA9IGJbaV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxvbmcgbG9uZyBhbHRfc3VtID0gQVswXTsKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDE7IGkgPCAyKm4rMTsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT0gMSkgYWx0X3N1bSAtPSBBW2ldOwogICAgICAgICAgICAgICAgZWxzZSBhbHRfc3VtICs9IEFbaV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChhbHRfc3VtID09IEFbMF0pIHsKICAgICAgICAgICAgICAgIHNldDxsb25nIGxvbmc+IHN0KEEuYmVnaW4oKSwgQS5lbmQoKSk7CiAgICAgICAgICAgICAgICBpZiAoKGludClzdC5zaXplKCkgPT0gMipuKzEpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKGF1dG8geCA6IEEpIGNvdXQgPDwgeCA8PCAiICI7CiAgICAgICAgICAgICAgICAgICAgY291dCA8PCAiXG4iOwogICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGZvdW5kKSBjb250aW51ZTsKCiAgICAgICAgLy8gRmFsbGJhY2s6IG91dHB1dCBiIHBsdXMgb25lIG51bWJlciBlcXVhbCB0byBzdW0gb2YgYgogICAgICAgIGxvbmcgbG9uZyBzdW1fYiA9IDA7CiAgICAgICAgZm9yIChhdXRvIHggOiBiKSBzdW1fYiArPSB4OwogICAgICAgIGFbMF0gPSBzdW1fYjsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDIqbjsgaSsrKSBhW2krMV0gPSBiW2ldOwogICAgICAgIGZvciAoYXV0byB4IDogYSkgY291dCA8PCB4IDw8ICIgIjsKICAgICAgICBjb3V0IDw8ICJcbiI7CiAgICB9CgogICAgcmV0dXJuIDA7Cn0K' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
