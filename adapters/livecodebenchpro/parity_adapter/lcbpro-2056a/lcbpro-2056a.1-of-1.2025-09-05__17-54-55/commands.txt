['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo 'I2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8dmVjdG9yPgojaW5jbHVkZSA8c2V0PgojaW5jbHVkZSA8YWxnb3JpdGhtPgp1c2luZyBuYW1lc3BhY2Ugc3RkOwoKc3RydWN0IFBvaW50IHsKICAgIGxvbmcgbG9uZyB4LCB5OwogICAgUG9pbnQobG9uZyBsb25nIHgsIGxvbmcgbG9uZyB5KSA6IHgoeCksIHkoeSkge30KICAgIGJvb2wgb3BlcmF0b3I8KGNvbnN0IFBvaW50JiBvdGhlcikgY29uc3QgewogICAgICAgIHJldHVybiB4IDwgb3RoZXIueCB8fCAoeCA9PSBvdGhlci54ICYmIHkgPCBvdGhlci55KTsKICAgIH0KICAgIGJvb2wgb3BlcmF0b3I9PShjb25zdCBQb2ludCYgb3RoZXIpIGNvbnN0IHsKICAgICAgICByZXR1cm4geCA9PSBvdGhlci54ICYmIHkgPT0gb3RoZXIueTsKICAgIH0KfTsKCmludCBtYWluKCkgewogICAgaW9zOjpzeW5jX3dpdGhfc3RkaW8oZmFsc2UpOwogICAgY2luLnRpZShudWxscHRyKTsKICAgIGludCB0OwogICAgY2luID4+IHQ7CiAgICB3aGlsZSAodC0tKSB7CiAgICAgICAgaW50IG4sIG07CiAgICAgICAgY2luID4+IG4gPj4gbTsKICAgICAgICB2ZWN0b3I8bG9uZyBsb25nPiB4cyhuKSwgeXMobik7CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgY2luID4+IHhzW2ldID4+IHlzW2ldOwogICAgICAgIH0KCiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgYWJzb2x1dGUgcG9zaXRpb25zIG9mIGVhY2ggc3RhbXAgcHJlc3NpbmcKICAgICAgICAvLyBJbml0aWFsbHkgYm90dG9tLWxlZnQgY29ybmVyIGF0ICgwLDApLCBidXQgbm8gc3RhbXAgcHJlc3NlZCB0aGVyZQogICAgICAgIC8vIFNvIGZpcnN0IHN0YW1wIGlzIHByZXNzZWQgYXQgKHgxLHkxKSwgdGhlbiAoeDEreDIseTEreTIpLCAuLi4KICAgICAgICB2ZWN0b3I8UG9pbnQ+IHN0YW1wczsKICAgICAgICBsb25nIGxvbmcgY3VyWCA9IDAsIGN1clkgPSAwOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKSB7CiAgICAgICAgICAgIGN1clggKz0geHNbaV07CiAgICAgICAgICAgIGN1clkgKz0geXNbaV07CiAgICAgICAgICAgIHN0YW1wcy5lbXBsYWNlX2JhY2soY3VyWCwgY3VyWSk7CiAgICAgICAgfQoKICAgICAgICAvLyBUaGUgZmluYWwgc2hhcGUgaXMgdGhlIHVuaW9uIG9mIG4gc3F1YXJlcyBvZiBzaXplIG0sIGVhY2ggYXQgc3RhbXBzW2ldCiAgICAgICAgLy8gRWFjaCBzcXVhcmUgY292ZXJzIGZyb20gKHgseSkgdG8gKHgrbSx5K20pCiAgICAgICAgLy8gV2Ugd2lsbCBjb25zaWRlciBhbGwgZWRnZXMgb2YgYWxsIHNxdWFyZXMgYW5kIHN1YnRyYWN0IGVkZ2VzIHRoYXQgYXJlIGludGVybmFsCgogICAgICAgIC8vIFN0b3JlIGFsbCBlZGdlcyBhcyBwYWlycyBvZiBwb2ludHMgKHN0YXJ0LCBlbmQpIHdpdGggc3RhcnQgPCBlbmQKICAgICAgICAvLyBIb3Jpem9udGFsIGVkZ2VzIGFuZCB2ZXJ0aWNhbCBlZGdlcwogICAgICAgIC8vIEVhY2ggZWRnZSBpcyByZXByZXNlbnRlZCBhcyAoUG9pbnQsIFBvaW50KSB3aXRoIG9yZGVyaW5nCgogICAgICAgIHNldDxwYWlyPFBvaW50LFBvaW50Pj4gZWRnZXM7CgogICAgICAgIGZvciAoYXV0byYgcCA6IHN0YW1wcykgewogICAgICAgICAgICBsb25nIGxvbmcgeCA9IHAueDsKICAgICAgICAgICAgbG9uZyBsb25nIHkgPSBwLnk7CiAgICAgICAgICAgIC8vIEZvdXIgZWRnZXMgb2YgdGhlIHNxdWFyZToKICAgICAgICAgICAgLy8gQm90dG9tIGVkZ2U6ICh4LHkpLT4oeCttLHkpCiAgICAgICAgICAgIFBvaW50IGIxKHgsIHkpLCBiMih4ICsgbSwgeSk7CiAgICAgICAgICAgIGlmIChiMiA8IGIxKSBzd2FwKGIxLGIyKTsKICAgICAgICAgICAgYXV0byBpdCA9IGVkZ2VzLmZpbmQoe2IxLGIyfSk7CiAgICAgICAgICAgIGlmIChpdCAhPSBlZGdlcy5lbmQoKSkgZWRnZXMuZXJhc2UoaXQpOwogICAgICAgICAgICBlbHNlIGVkZ2VzLmluc2VydCh7YjEsYjJ9KTsKCiAgICAgICAgICAgIC8vIFRvcCBlZGdlOiAoeCx5K20pLT4oeCttLHkrbSkKICAgICAgICAgICAgUG9pbnQgdDEoeCwgeSArIG0pLCB0Mih4ICsgbSwgeSArIG0pOwogICAgICAgICAgICBpZiAodDIgPCB0MSkgc3dhcCh0MSx0Mik7CiAgICAgICAgICAgIGl0ID0gZWRnZXMuZmluZCh7dDEsdDJ9KTsKICAgICAgICAgICAgaWYgKGl0ICE9IGVkZ2VzLmVuZCgpKSBlZGdlcy5lcmFzZShpdCk7CiAgICAgICAgICAgIGVsc2UgZWRnZXMuaW5zZXJ0KHt0MSx0Mn0pOwoKICAgICAgICAgICAgLy8gTGVmdCBlZGdlOiAoeCx5KS0+KHgseSttKQogICAgICAgICAgICBQb2ludCBsMSh4LCB5KSwgbDIoeCwgeSArIG0pOwogICAgICAgICAgICBpZiAobDIgPCBsMSkgc3dhcChsMSxsMik7CiAgICAgICAgICAgIGl0ID0gZWRnZXMuZmluZCh7bDEsbDJ9KTsKICAgICAgICAgICAgaWYgKGl0ICE9IGVkZ2VzLmVuZCgpKSBlZGdlcy5lcmFzZShpdCk7CiAgICAgICAgICAgIGVsc2UgZWRnZXMuaW5zZXJ0KHtsMSxsMn0pOwoKICAgICAgICAgICAgLy8gUmlnaHQgZWRnZTogKHgrbSx5KS0+KHgrbSx5K20pCiAgICAgICAgICAgIFBvaW50IHIxKHggKyBtLCB5KSwgcjIoeCArIG0sIHkgKyBtKTsKICAgICAgICAgICAgaWYgKHIyIDwgcjEpIHN3YXAocjEscjIpOwogICAgICAgICAgICBpdCA9IGVkZ2VzLmZpbmQoe3IxLHIyfSk7CiAgICAgICAgICAgIGlmIChpdCAhPSBlZGdlcy5lbmQoKSkgZWRnZXMuZXJhc2UoaXQpOwogICAgICAgICAgICBlbHNlIGVkZ2VzLmluc2VydCh7cjEscjJ9KTsKICAgICAgICB9CgogICAgICAgIC8vIFRoZSBwZXJpbWV0ZXIgaXMgdGhlIHN1bSBvZiBsZW5ndGhzIG9mIGVkZ2VzIGluICdlZGdlcycgc2V0CiAgICAgICAgLy8gRWFjaCBlZGdlIGxlbmd0aCBpcyBlaXRoZXIgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBhbmQgbGVuZ3RoIG0KICAgICAgICAvLyBTbyBwZXJpbWV0ZXIgPSBlZGdlcy5zaXplKCkgKiBtCiAgICAgICAgY291dCA8PCAobG9uZyBsb25nKWVkZ2VzLnNpemUoKSAqIG0gPDwgIlxuIjsKICAgIH0KICAgIHJldHVybiAwOwp9Cg==' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
