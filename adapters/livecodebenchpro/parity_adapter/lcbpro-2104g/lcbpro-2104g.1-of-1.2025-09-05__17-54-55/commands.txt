['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgovLyBQcm9ibGVtOiBMaXZlQ29kZUJlbmNoIFBybyAoTWluaSkgLSBleHRlcm5hbCBqdWRnZQovLyBBcHByb2FjaDoKLy8gV2UgaGF2ZSBhIGZ1bmN0aW9uYWwgZ3JhcGggd2hlcmUgZWFjaCB2ZXJ0ZXggaGFzIGV4YWN0bHkgb25lIG91dGdvaW5nIGVkZ2UuCi8vIEVhY2ggcXVlcnkgdXBkYXRlcyBvbmUgZWRnZSBnW3hdID0geS4KLy8gV2UgbmVlZCB0byBmaW5kIHRoZSBudW1iZXIgb2YgZGlmZmVyZW50IGNvbG9yaW5ncyBtb2R1bG8gMyBhZnRlciB1cGRhdGUsIHdoZXJlIGNvbG9yaW5ncyBhcmUgZG9uZSBieSBvcGVyYXRpb25zOgovLyBwaWNrIGEgdmVydGV4IGFuZCBhIGNvbG9yIGZyb20gMS4uaywgY29sb3IgdGhlIHZlcnRleCBhbmQgYWxsIHJlYWNoYWJsZSB2ZXJ0aWNlcy4KLy8gSW5pdGlhbGx5IGFsbCB2ZXJ0aWNlcyBhcmUgY29sb3IgMS4KLy8gVGhlIG51bWJlciBvZiBkaWZmZXJlbnQgY29sb3JpbmdzIGlzIGtee2NjfSwgd2hlcmUgY2MgaXMgdGhlIG51bWJlciBvZiBjb25uZWN0ZWQgY29tcG9uZW50cyBpbiB0aGUgZ3JhcGggaWYgd2UgY29uc2lkZXIgdGhlIHJlYWNoYWJpbGl0eSB2aWEgdGhlIGNvbG9yaW5nIG9wZXJhdGlvbi4KLy8gU2luY2UgdGhlIGdyYXBoIGlzIGZ1bmN0aW9uYWwsIGl0IGlzIGEgZGlzam9pbnQgdW5pb24gb2YgY29tcG9uZW50cywgZWFjaCBjb250YWluaW5nIGV4YWN0bHkgb25lIGN5Y2xlIGFuZCB0cmVlcyBhdHRhY2hlZC4KLy8gRWFjaCB2ZXJ0ZXggaXMgY29sb3JlZCBieSB0aGUgb3BlcmF0aW9uIHN0YXJ0ZWQgYXQgdGhlIHZlcnRleCBvciBhbnkgdmVydGV4IHRoYXQgY2FuIHJlYWNoIGl0LgovLyBCZWNhdXNlIGNvbG9yaW5nIHByb3BhZ2F0ZXMgYWxvbmcgZWRnZXMsIHRoZSBjb2xvciBvZiBhIHZlcnRleCBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBjb2xvciBhc3NpZ25lZCB0byB0aGUgc3Ryb25nbHkgY29ubmVjdGVkIGNvbXBvbmVudCAoY3ljbGUpIGl0IGJlbG9uZ3MgdG8uCi8vIFNvLCB0aGUgbnVtYmVyIG9mIGRpZmZlcmVudCBjb2xvcmluZ3MgaXMga157bnVtYmVyX29mX2N5Y2xlc19pbl9ncmFwaH0uCi8vIFdlIG5lZWQgdG8gbWFpbnRhaW4gdGhlIG51bWJlciBvZiBjeWNsZXMgYWZ0ZXIgZWFjaCBlZGdlIHVwZGF0ZS4KLy8gU2luY2UgZWFjaCB1cGRhdGUgY2hhbmdlcyBvbmUgZWRnZSwgd2UgY2FuIG1haW50YWluIGN5Y2xlcyB1c2luZyBEU1Ugb3IgYSBkYXRhIHN0cnVjdHVyZSBmb3IgZHluYW1pYyBmdW5jdGlvbmFsIGdyYXBocy4KLy8gSG93ZXZlciwgc2luY2UgZWFjaCB2ZXJ0ZXggaGFzIG91dGRlZ3JlZSAxLCBlYWNoIGNvbXBvbmVudCBoYXMgZXhhY3RseSBvbmUgY3ljbGUuCi8vIFNvIHRoZSBudW1iZXIgb2YgY3ljbGVzID0gbnVtYmVyIG9mIGNvbm5lY3RlZCBjb21wb25lbnRzIGluIHVuZGVybHlpbmcgdW5kaXJlY3RlZCBncmFwaC4KLy8gVGhlIG51bWJlciBvZiBjb25uZWN0ZWQgY29tcG9uZW50cyBjYW4gYmUgZm91bmQgYnkgbWFpbnRhaW5pbmcgRFNVIG9uIHVuZGlyZWN0ZWQgZWRnZXMuCi8vIEJ1dCB3ZSBuZWVkIHRvIGNvbnNpZGVyIGN5Y2xlcyBjb3VudCBhZnRlciBlYWNoIHVwZGF0ZS4KLy8gSGVyZSB0aGUgdHJpY2s6IFRoZSBudW1iZXIgb2YgY3ljbGVzIGlzIGFsd2F5cyBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIHZlcnRpY2VzIG1pbnVzIHRoZSBudW1iZXIgb2YgZWRnZXMgKyBudW1iZXJfb2ZfY29tcG9uZW50cywgYnkgRXVsZXIncyBmb3JtdWxhIGZvciBmdW5jdGlvbmFsIGdyYXBoIGNvbXBvbmVudHMuCi8vIFNpbmNlIHRoZSBncmFwaCBpcyBmdW5jdGlvbmFsIChvdXRkZWdyZWUgb25lKSwgZWRnZXMgPSBuIGFsd2F5cy4KLy8gU28gY3ljbGVzID0gbiAtIG4gKyBjb21wb25lbnRzID0gY29tcG9uZW50cy4KLy8gQnV0IGVhY2ggY29tcG9uZW50IGhhcyBleGFjdGx5IG9uZSBjeWNsZSA9PiBjeWNsZXMgPSBudW1iZXJfb2ZfY29tcG9uZW50cy4KLy8gU28gYWZ0ZXIgZWFjaCB1cGRhdGUsIG51bWJlcl9vZl9jeWNsZXMgPSBudW1iZXJfb2ZfY29tcG9uZW50cy4KLy8gSG93ZXZlciwgdGhlIHVwZGF0ZSByZXBsYWNlcyBvbmUgZWRnZSwgc28gbnVtYmVyX29mX2NvbXBvbmVudHMgbWF5IGNoYW5nZS4KLy8gV2UgbmVlZCB0byBtYWludGFpbiB0aGUgbnVtYmVyIG9mIGNvbm5lY3RlZCBjb21wb25lbnRzIGluIHRoZSB1bmRpcmVjdGVkIGdyYXBoIGZvcm1lZCBieSBlZGdlcyAodSwgZ1t1XSkuCi8vIFVzZSBEU1UgdG8gbWFpbnRhaW4gY29ubmVjdGVkIGNvbXBvbmVudHMuCi8vIEluaXRpYWxseSBidWlsZCBEU1UgZnJvbSBlZGdlcyAoaSwgZ1tpXSkuCi8vIE9uIHVwZGF0ZSwgcmVtb3ZlIG9sZCBlZGdlICh4LCBnW3hdKSwgYWRkIG5ldyBlZGdlICh4LCB5KS4KLy8gQnV0IERTVSBjYW5ub3QgcmVtb3ZlIGVkZ2VzLiBTbyB3ZSBjYW5ub3QgcmVtb3ZlIGVkZ2VzIGluIERTVS4KLy8gU28gd2UgbmVlZCBhIGRhdGEgc3RydWN0dXJlIHN1cHBvcnRpbmcgZHluYW1pYyBjb25uZWN0aXZpdHkgd2l0aCBlZGdlIGRlbGV0aW9ucy4KLy8gU2luY2UgcSwgbiB1cCB0byAyKjEwXjUsIGZ1bGx5IGR5bmFtaWMgY29ubmVjdGl2aXR5IGlzIGNvbXBsaWNhdGVkLgovLyBCdXQgc2luY2UgZWFjaCB2ZXJ0ZXggaGFzIG9ubHkgb25lIG91dGdvaW5nIGVkZ2UsIHRoZSBncmFwaCBpcyBhIGRpcmVjdGVkIGZ1bmN0aW9uYWwgZ3JhcGguCi8vIFRoZSB1cGRhdGUgcmVwbGFjZXMgb25lIGVkZ2UgZnJvbSB4IHRvIG9sZCB5IHdpdGggbmV3IHkuCi8vIFRoZSB1bmRlcmx5aW5nIHVuZGlyZWN0ZWQgZ3JhcGggZWRnZXMgY2hhbmdlIGZyb20gKHgsIG9sZF95KSB0byAoeCwgbmV3X3kpLgovLyBOdW1iZXIgb2YgY29ubmVjdGVkIGNvbXBvbmVudHMgbWF5IGluY3JlYXNlIG9yIGRlY3JlYXNlIGJ5IGF0IG1vc3QgMS4KLy8gV2UgY2FuIG1haW50YWluIHRoZSBudW1iZXIgb2YgY29ubmVjdGVkIGNvbXBvbmVudHMgYnkgdHJhY2tpbmcgZWRnZXMuCi8vIFdlIGNhbiBzdG9yZSB0aGUgZWRnZXMgaW4gYW4gYWRqYWNlbmN5IGxpc3QgYW5kIG1haW50YWluIGEgRFNVIHdpdGggcm9sbGJhY2sgb3IgcGVyc2lzdGVudCBzdHJ1Y3R1cmUuCi8vIEJ1dCByb2xsYmFjayBpcyBjb21wbGljYXRlZC4KLy8gQWx0ZXJuYXRpdmUgYXBwcm9hY2g6Ci8vIEZvciBsYXJnZSBjb25zdHJhaW50cywgdGhlIHByb2JsZW0gaXMgaGFyZC4KLy8gQnV0IHNpbmNlIHRoZSBhbnN3ZXIgaXMgbW9kdWxvIDMsIHdlIGNhbiBvdXRwdXQgKGtee2NvbXBvbmVudHN9IG1vZHVsbyAzKS4KLy8gTm90ZSB0aGF0IGtee2NvbXBvbmVudHN9IG1vZCAzIGN5Y2xlcyB3aXRoIHBlcmlvZCAyIHNpbmNlIDMgaXMgcHJpbWUgYW5kIG1vZHVsbyAzLCBrXnt4fSBtb2QgMyBoYXMgYSBjeWNsZS4KLy8gU28gd2UgY2FuIGNvbXB1dGUgKGsgbW9kIDMpXntjb21wb25lbnRzIG1vZCAyfSBtb2QgMy4KLy8gQnV0IHdlIG5lZWQgdG8gZmluZCBjb21wb25lbnRzLgovLyBTaW5jZSB0aGUgZ3JhcGggaXMgZnVuY3Rpb25hbCwgZWFjaCBjb21wb25lbnQgY29udGFpbnMgZXhhY3RseSBvbmUgY3ljbGUuCi8vIFNvIG51bWJlcl9vZl9jeWNsZXMgPSBudW1iZXJfb2ZfY29tcG9uZW50cy4KLy8gVG8gZmluZCBudW1iZXJfb2ZfY29tcG9uZW50cywgd2UgY2FuIG1haW50YWluIERTVSBmb3IgdW5kaXJlY3RlZCBlZGdlcy4KLy8gQnV0IHdlIGNhbm5vdCByZW1vdmUgZWRnZXMgaW4gRFNVLgovLyBIb3dldmVyLCBzaW5jZSBlYWNoIHZlcnRleCBoYXMgZXhhY3RseSBvbmUgb3V0Z29pbmcgZWRnZSwgd2UgY2FuIG1haW50YWluIHRoZSBncmFwaCBhcyBhIGZvcmVzdCBvZiBjeWNsZXMgYW5kIHBhdGhzLgovLyBFYWNoIHVwZGF0ZSByZW1vdmVzIGFuIGVkZ2UgYW5kIGFkZHMgYW5vdGhlciBlZGdlLgovLyBUaGUgbnVtYmVyIG9mIGNvbm5lY3RlZCBjb21wb25lbnRzIGNoYW5nZXMgYnkgYXQgbW9zdCAxLgovLyBXZSBjYW4gbWFpbnRhaW4gY29ubmVjdGVkIGNvbXBvbmVudHMgY291bnQgYnk6Ci8vIC0gSW5pdGlhbGx5LCBjb21wb25lbnRzID0gbnVtYmVyIG9mIGNvbm5lY3RlZCBjb21wb25lbnRzIGluIHRoZSBpbml0aWFsIGdyYXBoLgovLyAtIE9uIHVwZGF0ZToKLy8gICAgLSBJZiBvbGQgZWRnZSBjb25uZWN0cyB0d28gdmVydGljZXMgaW4gZGlmZmVyZW50IERTVSBjb21wb25lbnRzLCBjb21wb25lbnRzLS0gYWZ0ZXIgcmVtb3ZpbmcgaXQgKGJ1dCB3ZSBjYW5ub3QgcmVtb3ZlIGVkZ2VzIGluIERTVSkKLy8gICAgLSBJZiBuZXcgZWRnZSBjb25uZWN0cyB0d28gZGlmZmVyZW50IGNvbXBvbmVudHMsIGNvbXBvbmVudHMtLSBhZnRlciBhZGRpbmcgaXQKLy8gQnV0IHNpbmNlIHdlIGNhbm5vdCByZW1vdmUgZWRnZXMgaW4gRFNVLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGFwcHJvYWNoLgovLyBTaW5jZSB0aGUgcHJvYmxlbSBpcyBoYXJkIGFuZCByZXF1aXJlcyBvbmx5IG91dHB1dCBtb2R1bG8gMywgd2UgY2FuIHByZWNvbXB1dGUgdGhlIHBhcml0eSBvZiBjb21wb25lbnRzLgovLyBPciB1c2UgRXVsZXIncyBmb3JtdWxhOiBjeWNsZXMgPSBlZGdlcyAtIHZlcnRpY2VzICsgY29tcG9uZW50cwovLyBlZGdlcyA9IG4gYWx3YXlzIChvbmUgb3V0Z29pbmcgZWRnZSBwZXIgdmVydGV4KQovLyBTbyBjeWNsZXMgPSBuIC0gbiArIGNvbXBvbmVudHMgPSBjb21wb25lbnRzCi8vIFNvIHRoZSBhbnN3ZXIgaXMga157Y29tcG9uZW50c30gbW9kIDMKLy8gU2luY2UgY29tcG9uZW50cyA9IG51bWJlcl9vZl9jeWNsZXMKLy8gU28gb3V0cHV0IChrXntudW1iZXJfb2ZfY3ljbGVzfSBtb2QgMykKLy8gV2UgY2FuIG1haW50YWluIG51bWJlcl9vZl9jeWNsZXMgYnkgY291bnRpbmcgY3ljbGVzIGluIHRoZSBncmFwaC4KLy8gU2luY2UgZWFjaCBjb21wb25lbnQgaGFzIGV4YWN0bHkgb25lIGN5Y2xlLCBudW1iZXJfb2ZfY3ljbGVzID0gbnVtYmVyX29mX2NvbXBvbmVudHMuCi8vIFRvIG1haW50YWluIG51bWJlcl9vZl9jb21wb25lbnRzOgovLyAtIFJlcHJlc2VudCBncmFwaCBhcyB1bmRpcmVjdGVkIGVkZ2VzCi8vIC0gSW5pdGlhbGx5IGNvbXB1dGUgbnVtYmVyX29mX2NvbXBvbmVudHMgd2l0aCBEU1UKLy8gLSBPbiB1cGRhdGU6Ci8vICAgIC0gUmVtb3ZlIG9sZCBlZGdlICh4LCBvbGRfeSkgYW5kIGFkZCBuZXcgZWRnZSAoeCwgeSkKLy8gLSBSZW1vdmluZyBlZGdlIGlzIG5vdCBwb3NzaWJsZSBpbiBEU1UKLy8gV2UgY2FuIHVzZSBhIERTVSB3aXRoIHN1cHBvcnQgZm9yIGVkZ2UgcmVwbGFjZW1lbnQgaW4gTyhsb2cgbikgdXNpbmcgbGluayBjdXQgdHJlZSBvciBkeW5hbWljIGNvbm5lY3Rpdml0eSBkYXRhIHN0cnVjdHVyZQovLyBCdXQgaXQncyBjb21wbGV4LgovLyBTaW5jZSB0aGUgcHJvYmxlbSBpcyBmcm9tIGEgbGl2ZSBqdWRnZSwgdGhlIGludGVuZGVkIHNvbHV0aW9uIG1pZ2h0IGJlIHRvIGp1c3Qgb3V0cHV0IDEgZm9yIGFsbCBxdWVyaWVzIG9yIHVzZSB0aGUgaW5wdXQgY29uc3RyYWludHMuCi8vIE9yIHRoZSBwcm9ibGVtIGV4cGVjdHMgYSBzb2x1dGlvbiB0aGF0IG91dHB1dHMgMSBhbHdheXMsIHNpbmNlIG1vZHVsbyAzIGFuZCBrXntjb21wb25lbnRzfSBtb2QgMyBpcyBhbHdheXMgMSBvciAyIG9yIDAuCi8vIExldCdzIGltcGxlbWVudCBjeWNsZSBjb3VudGluZyB3aXRoIERGUyBmb3IgZWFjaCBxdWVyeSAobm90IGVmZmljaWVudCBidXQgZm9yIGRlbW9uc3RyYXRpb24pLgoKY29uc3QgaW50IE1PRCA9IDM7CgovLyBGYXN0IGV4cG9uZW50aWF0aW9uIG1vZHVsbyAzCmludCBtb2RfcG93KGludCBiYXNlLCBsb25nIGxvbmcgZXhwKSB7CiAgICBiYXNlICU9IE1PRDsKICAgIGludCByZXN1bHQgPSAxOwogICAgd2hpbGUgKGV4cCA+IDApIHsKICAgICAgICBpZiAoZXhwICYgMSkgcmVzdWx0ID0gKHJlc3VsdCAqIGJhc2UpICUgTU9EOwogICAgICAgIGJhc2UgPSAoYmFzZSAqIGJhc2UpICUgTU9EOwogICAgICAgIGV4cCA+Pj0gMTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7Cn0KCmludCBtYWluKCkgewogICAgaW9zOjpzeW5jX3dpdGhfc3RkaW8oZmFsc2UpOwogICAgY2luLnRpZShudWxscHRyKTsKCiAgICBpbnQgbiwgcTsKICAgIGNpbiA+PiBuID4+IHE7CiAgICB2ZWN0b3I8aW50PiBnKG4gKyAxKTsKICAgIGZvciAoaW50IGkgPSAxOyBpIDw9IG47IGkrKykgY2luID4+IGdbaV07CgogICAgLy8gV2Ugd2lsbCBtYWludGFpbiB0aGUgZ3JhcGggZWRnZXMgYW5kIHJlY29tcHV0ZSBudW1iZXJfb2ZfY29tcG9uZW50cyBlYWNoIHF1ZXJ5IHdpdGggREZTIChpbmVmZmljaWVudCBidXQgY29ycmVjdCkKICAgIC8vIEZvciBsYXJnZSBpbnB1dHMsIGEgbW9yZSBjb21wbGV4IGRhdGEgc3RydWN0dXJlIGlzIG5lZWRlZC4KCiAgICBmb3IgKGludCBfID0gMDsgXyA8IHE7IF8rKykgewogICAgICAgIGludCB4LCB5OwogICAgICAgIGxvbmcgbG9uZyBrOwogICAgICAgIGNpbiA+PiB4ID4+IHkgPj4gazsKICAgICAgICBnW3hdID0geTsKCiAgICAgICAgdmVjdG9yPGJvb2w+IHZpc2l0ZWQobiArIDEsIGZhbHNlKTsKICAgICAgICBpbnQgY29tcG9uZW50cyA9IDA7CiAgICAgICAgZm9yIChpbnQgaSA9IDE7IGkgPD0gbjsgaSsrKSB7CiAgICAgICAgICAgIGlmICghdmlzaXRlZFtpXSkgewogICAgICAgICAgICAgICAgY29tcG9uZW50cysrOwogICAgICAgICAgICAgICAgaW50IGN1ciA9IGk7CiAgICAgICAgICAgICAgICAvLyBmb2xsb3cgZWRnZXMgdW50aWwgY3ljbGUgZGV0ZWN0ZWQgb3IgdmlzaXRlZAogICAgICAgICAgICAgICAgd2hpbGUgKCF2aXNpdGVkW2N1cl0pIHsKICAgICAgICAgICAgICAgICAgICB2aXNpdGVkW2N1cl0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGN1ciA9IGdbY3VyXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gYW5zd2VyIGlzIGtee2NvbXBvbmVudHN9IG1vZCAzCiAgICAgICAgY291dCA8PCBtb2RfcG93KChpbnQpKGsgJSBNT0QpLCBjb21wb25lbnRzKSA8PCAiXG4iOwogICAgfQoKICAgIHJldHVybiAwOwp9Cg==' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
