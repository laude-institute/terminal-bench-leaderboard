{
    "id": "a4c95344-cb3f-408b-af7d-e0d7c89d0060",
    "trial_name": "lcbpro-2093d.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2093d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2093D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nVadim loves filling square tables with integers. But today he came up with a way to do it for fun! Let's take, for example, a table of size $2 \\times 2$, with rows numbered from top to bottom and columns numbered from left to right. We place $1$ in the top left cell, $2$ in the bottom right, $3$ in the bottom left, and $4$ in the top right. That's all he needs for fun!\n\nFortunately for Vadim, he has a table of size $2^n \\times 2^n$. He plans to fill it with integers from $1$ to $2^{2n}$ in ascending order. To fill such a large table, Vadim will divide it into $4$ equal square tables, filling the top left one first, then the bottom right one, followed by the bottom left one, and finally the top right one. Each smaller table will be divided into even smaller ones as he fills them until he reaches tables of size $2 \\times 2$, which he will fill in the order described above.\n\nNow Vadim is eager to start filling the table, but he has $q$ questions of two types:\n\n- what number will be in the cell at the $x$-th row and $y$-th column;\n- in which cell coordinates will the number $d$ be located.\n\nHelp answer Vadim's questions.\n\n### Input\n\nEach test consists of several sets of input data. The first line contains a single integer $t$ $(1 \\leq t \\leq 10)$  -- the number of sets of input data. The following lines describe the input data sets.\n\nIn the first line of each data set, there is an integer $n$, describing the size of the table $(1 \\le n \\le 30)$.\n\nIn the second line of each data set, there is an integer $q$  -- the number of questions $(1 \\le q \\le 20\\,000)$.\n\nIn the following $q$ lines of each data set, the questions are described in the following formats:\n\n- -\\> x y  -- What number will be in the cell $(1 \\le x, y \\le 2^n)$;\n- <\\- d  -- In which cell coordinates will the number $(1 \\le d \\le 2^{2n})$ be located.\n\nIt is guaranteed that the sum of $q$ over all test cases does not exceed $20\\,000$.\n\n### Output\n\nOutput the answers to each question on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2\n\n5\n\n-\\> 4 3\n\n<\\- 15\n\n<\\- 4\n\n-\\> 3 1\n\n-\\> 1 3\n\n1\n\n8\n\n-\\> 1 1\n\n-\\> 1 2\n\n-\\> 2 1\n\n-\\> 2 2\n\n<\\- 1\n\n<\\- 2\n\n<\\- 3\n\n<\\- 4\n\n```\n\n#### Output #1\n\n```\n7\n2 3\n1 2\n9\n13\n1\n4\n3\n2\n1 1\n2 2\n2 1\n1 2\n```\n\n### Note\n\nThis is how the filled table from the first example looks:\n\n![](https://espresso.codeforces.com/da748157aec3b2f6a243518e84d255f6a0b8b6c6.png)",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2093d/lcbpro-2093d.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1146,
    "total_output_tokens": 1414,
    "trial_started_at": "2025-09-06T01:12:10.386251+00:00",
    "trial_ended_at": "2025-09-06T01:13:14.599439+00:00",
    "agent_started_at": "2025-09-06T01:12:25.527055+00:00",
    "agent_ended_at": "2025-09-06T01:12:49.407402+00:00",
    "test_started_at": "2025-09-06T01:12:52.193464+00:00",
    "test_ended_at": "2025-09-06T01:12:56.038472+00:00"
}