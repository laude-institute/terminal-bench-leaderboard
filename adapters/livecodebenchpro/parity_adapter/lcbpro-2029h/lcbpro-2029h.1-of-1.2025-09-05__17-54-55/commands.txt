['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
["echo '' | base64 -d > /app/main.cpp", 'Enter']
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
