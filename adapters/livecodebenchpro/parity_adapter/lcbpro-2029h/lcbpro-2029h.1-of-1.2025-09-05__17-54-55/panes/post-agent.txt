root@066095128b8b:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7Cgpjb25zdGV4cHIgaW50IE1PRCA9IDk5ODI0NDM1MzsKCmlubGluZSBpbnQgbW9kX2FkZC
hpbnQgYSwgaW50IGIpIHsKICAgIGEgKz0gYjsKICAgIGlmIChhID49IE1PRCkgYSAtPSBNT0Q7CiAgICByZXR1cm4gYTsKfQppbmxpbmUgaW50IG1vZF9zdWIoaW50IGEsIGludCBiKSB7CiAgICBhIC09IGI7Ci
AgICBpZiAoYSA8IDApIGEgKz0gTU9EOwogICAgcmV0dXJuIGE7Cn0KaW5saW5lIGludCBtb2RfbXVsKGludCBhLCBpbnQgYikgewogICAgcmV0dXJuIChpbnQpKCgxTEwgKiBhICogYikgJSBNT0QpOwp9Cgppbn
QgbW9kX3BvdyhpbnQgYmFzZSwgaW50IGV4cCkgewogICAgaW50IHJlc3VsdCA9IDE7CiAgICBpbnQgY3VyID0gYmFzZTsKICAgIHdoaWxlIChleHAgPiAwKSB7CiAgICAgICAgaWYgKGV4cCAmIDEpIHJlc3VsdC
A9IG1vZF9tdWwocmVzdWx0LCBjdXIpOwogICAgICAgIGN1ciA9IG1vZF9tdWwoY3VyLCBjdXIpOwogICAgICAgIGV4cCA+Pj0gMTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7Cn0KCmludCBtb2RfaW52KGludC
BhKSB7CiAgICAvLyBGZXJtYXQncyBsaXR0bGUgdGhlb3JlbQogICAgcmV0dXJuIG1vZF9wb3coYSwgTU9EIC0gMik7Cn0KCnN0cnVjdCBFZGdlIHsKICAgIGludCB1LCB2OwogICAgaW50IHAsIHE7CiAgICBpbn
QgcF9pbnZfcTsgLy8gcCAqIHFeey0xfSBtb2QKfTsKCmludCBuLCBtOwpFZGdlIGVkZ2VzWzUwXTsKCi8vIEFkamFjZW5jeSBtYXRyaXggb2YgcHJvYmFiaWxpdGllcyBpbiBtb2QgZm9ybSAocCAqIHFeey0xfS
Btb2QpCmludCBnWzIxXVsyMV07CgppbnQgZnVsbF9tYXNrOwoKLy8gZHBbbWFza106IGV4cGVjdGVkIGRheXMgdG8gaGF2ZSBtZXNzYWdlIGluIGFsbCBub2RlcyAobWFzaykgCi8vIFdlJ2xsIHNvbHZlIGEgc3
lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMgYmFzZWQgb24gc3RhdGVzLgoKLy8gVXNlIGJpdHNldCBmb3IgbWFza3MKCi8vIFdlJ2xsIHVzZSBhIG1hcCBmcm9tIG1hc2sgdG8gaW5kZXggZm9yIHN0YXRlcyBkcA
ovLyBCdXQgaGVyZSBuIDw9IDIxLCBzbyAyXm4gaXMgdXAgdG8gMiBtaWxsaW9uLCB0b28gbGFyZ2UuCi8vIFdlIG5lZWQgYSBtb3JlIGVmZmljaWVudCBhcHByb2FjaC4KCi8vIE9ic2VydmF0aW9uOgovLyBUaG
UgcHJvYmxlbSBkZWZpbmVzIGEgTWFya292IGNoYWluIG92ZXIgMl5uIHN0YXRlcy4KLy8gR29hbCBzdGF0ZTogZnVsbF9tYXNrIHdpdGggYWxsIHZlcnRpY2VzIGhhdmUgbWVzc2FnZS4KLy8gQXQgZWFjaCBkYX
ksIG1lc3NhZ2Ugc3ByZWFkcyBhbG9uZyBlZGdlcyB0aGF0IGFwcGVhciB0aGF0IGRheS4KLy8gRHVlIHRvIGNvbnN0cmFpbnRzLCB3ZSBjYW4gc29sdmUgbGluZWFyIGVxdWF0aW9ucyBmb3IgZXhwZWN0ZWQgdm
FsdWVzOgovLyBGb3IgZWFjaCBzdGF0ZSBTICE9IGZ1bGxfbWFzazoKLy8gRVtTXSA9IDEgKyBzdW1fe1MnfSBQKFMtPlMnKSAqIEVbUyddCi8vIEZvciBmdWxsX21hc2ssIEVbZnVsbF9tYXNrXSA9IDAKCi8vIF
RoZSB0cmFuc2l0aW9uIHByb2JhYmlsaXR5IFAoUy0+UycpIGRlcGVuZHMgb24gZWRnZXMgYXBwZWFyaW5nLgovLyBCdXQgZW51bWVyYXRpbmcgYWxsIGVkZ2Ugc3Vic2V0cyBpcyBodWdlICh1cCB0byAyXm0pLg
oKLy8gV2UgY2FuIGNvbXB1dGUgcHJvYmFiaWxpdHkgdG8gZ2V0IG5leHQgc3RhdGUgUycgZnJvbSBTIHVzaW5nIGluY2x1c2lvbi1leGNsdXNpb24gcGVyIG5vZGUuCgovLyBXZSdsbCB1c2UgdGhlc2UgZmFjdH
M6Ci8vIC0gVGhlIG1lc3NhZ2Ugc3RhdGVzIGZvcm0gYSBtb25vdG9uZSBpbmNyZWFzaW5nIHNldDogaWYgYSB2ZXJ0ZXggaGFzIG1lc3NhZ2UsIGl0IHN0YXlzLgovLyAtIEF0IGRheSBlbmQsIHZlcnRleCBoYX
MgbWVzc2FnZSBpZiBpdCBvciBhbiBhZGphY2VudCB2ZXJ0ZXggaGFkIG1lc3NhZ2UgcHJldmlvdXMgZGF5LCBhbmQgdGhlIGVkZ2UgYXBwZWFyZWQuCgovLyBXZSBkbyBkcCBieSBzdGF0ZXMgKGJpdG1hc2spIG
9mIHNpemUgMl5uLgovLyBUaGF0IGlzIHRvbyBsYXJnZSB0byBzdG9yZSBkaXJlY3RseS4KCi8vIEJ1dCBuIDw9IDIxLCBzbyAyXm4gfiAyIG1pbGxpb24sIHBvc3NpYmx5IGp1c3QgZmVhc2libGUgd2l0aCBtZW
1vcnkgYW5kIG9wdGltaXphdGlvbi4KLy8gV2UnbGwgaW1wbGVtZW50IERQIHdpdGggbWVtb2l6YXRpb24uIEJ1dCB3ZSBoYXZlIHRvIHNvbHZlIGxpbmVhciBlcXVhdGlvbnMuCgovLyBXZSdsbCBidWlsZCBtYX
RyaXggQSBhbmQgdmVjdG9yIGIgcmVwcmVzZW50aW5nIHN5c3RlbToKLy8gQSAqIEUgPSBiCi8vIEFbaV1baV0gPSAxCi8vIEZvciBlYWNoIG5leHQgc3RhdGUgaiByZWFjaGFibGUgZnJvbSBpOgovLyBBW2ldW2
pdID0gLVAoaS0+aikKLy8gYltpXSA9IDEgZm9yIGkgIT0gZnVsbF9tYXNrLCBiW2Z1bGxfbWFza10gPSAwCgovLyBXZSdsbCBzdG9yZSBzcGFyc2UgbWF0cml4IHRvIHNvbHZlIHdpdGggR2F1c3MgZWxpbWluYX
Rpb24uCgovLyBCZWNhdXNlIDJebiBjb3VsZCBiZSB1cCB0byB+MiBtaWxsaW9uLCB3aWxsIGJlIGhpZ2ggbWVtb3J5LgovLyBCdXQgdGhpcyBpcyB0aGUgaW50ZW5kZWQgc29sdXRpb24gZm9yIHRoaXMgcHJvYm
xlbS4KCi8vIEltcGxlbWVudGF0aW9uIHBsYW46Ci8vIDEuIFByZWNvbXB1dGUgZWRnZSBwcm9iYWJpbGl0aWVzIGluIG1vZHVsYXIgZm9ybS4KLy8gMi4gRm9yIGVhY2ggc3RhdGUgUywgY29tcHV0ZSBwcm9iYW
JpbGl0eSBkaXN0cmlidXRpb24gb2YgbmV4dCBzdGF0ZXMgUycuCi8vICAgIEZvciBzdGF0ZSBTLCB0aGUgbmV4dCBzZXQgb2YgdmVydGljZXMgaGF2aW5nIG1lc3NhZ2UgaXM6Ci8vICAgIFMnID0gUyB1bmlvbi
B7diB8IGV4aXN0cyB1IGluIFMgYW5kIGVkZ2UgKHUsdikgYXBwZWFyc30KLy8gICAgV2UgaGF2ZSBpbmRlcGVuZGVuY2Ugb2YgZWRnZXMsIHNvIHByb2JhYmlsaXR5IHRoYXQgdiBpcyBub3QgcmVhY2hlZCBpcy
Bwcm9kdWN0IG92ZXIgdSBpbiBTIG9mICgxIC0gcHJvYihlZGdlIHUtdikpCi8vICAgIFRoZW4gcHJvYmFiaWxpdHkgdGhhdCB2IGlzIHJlYWNoZWQgaXMgMSAtIHByb2R1Y3Qgb2YgKDEgLSBwcm9iKS4KLy8gIC
AgU28gdG8gZ2V0IG5leHQgUycsIHdlIGRlY2lkZSBmb3IgZWFjaCB2ZXJ0ZXggbm90IGluIFMgd2hldGhlciBpdCBnZXRzIG1lc3NhZ2Ugb3Igbm90IGluZGVwZW5kZW50bHkgd2l0aCBrbm93biBwcm9iYWJpbG
l0eS4KLy8gICAgVGhlcmVmb3JlLCB0cmFuc2l0aW9uIGZyb20gUyB0byBTJyBpcyBwcm9kdWN0IG92ZXIgdmVydGljZXMgbm90IGluIFMgb2YgcCh2KSBvciAoMS1wKHYpKSBkZXBlbmRpbmcgb24gaWYgdiBpbi
BTJy4KCi8vIFRoaXMgbWVhbnMgdHJhbnNpdGlvbnMgZnJvbSBzdGF0ZSBTIHRvIFMnIGlzIGEgcHJvZHVjdCBvZiBpbmRlcGVuZGVudCBwcm9iYWJpbGl0aWVzIHBlciBuZXcgdmVydGV4LCBzbyB3ZSBjYW4gZ2
VuZXJhdGUgYWxsIHN1YnNldHMgb2YgbmV3IHZlcnRpY2VzIGVmZmljaWVudGx5LgoKLy8gMy4gQnVpbGQgbGluZWFyIHN5c3RlbSBvZiBlcXVhdGlvbnMgd2l0aCBzaXplIDJebi4KLy8gNC4gU29sdmUgc3lzdG
VtIG1vZHVsbyBNT0QuCi8vIDUuIE91dHB1dCBFWzE8PDBdIChzdGF0ZSB3aXRoIG9ubHkgdmVydGV4IDEpLgoKLy8gRWRnZSBwcm9iYWJpbGl0aWVzIHN0b3JlZCBpbiBnW3VdW3ZdLgoKLy8gV2UnbGwgaW1wbG
VtZW50IEdhdXNzIGVsaW1pbmF0aW9uIG9uIG1vZHVsbyBmaWVsZC4KCi8vIFVzZSA2NC1iaXQgaW50ZWdlcnMgd2l0aCBjYXJlZnVsIG1vZHVsby4KCi8vIENvZGUgc3RhcnRzIGhlcmU6CgppbnQgbiwgbTsKaW
50IGZ1bGxfbWFzazsKaW50IGdbMjFdWzIxXTsKCi8vIFRvIHN0b3JlIGxpbmVhciBzeXN0ZW06Ci8vIFVzZSB2ZWN0b3I8aW50PiBmb3Igc3BhcnNlPwovLyBCdXQgbWVtb3J5IHRvbyBiaWcuCi8vIFdlJ2xsIH
VzZSBkZW5zZSBtYXRyaXggZm9yIHNtYWxsZXIgbi4KLy8gRm9yIG49MjEsIDJeMjE9MjA5NzE1MiBzdGF0ZXMsIHRvbyBsYXJnZS4KCi8vIFdlIG11c3Qgb3B0aW1pemU6Ci8vIFdlIGNhbiBwcnVuZSBzdGF0ZX
MgdGhhdCBhcmUgdW5yZWFjaGFibGUgZnJvbSBpbml0aWFsIHN0YXRlLgovLyBVc2UgQkZTIGZyb20gaW5pdGlhbCBzdGF0ZSB0byBmaW5kIHJlYWNoYWJsZSBzdGF0ZXMuCgovLyBMZXQncyBpbXBsZW1lbnQgQk
ZTIG92ZXIgc3RhdGVzOgoKdmVjdG9yPGludD4gc3RhdGVzOwp1bm9yZGVyZWRfbWFwPGludCxpbnQ+IGlkeF9tYXA7CgovLyBTdG9yZSBmb3IgZWFjaCBzdGF0ZSB0aGUgcHJvYmFiaWxpdHkgdmVjdG9yIG9mIG
5leHQgc3RhdGVzCi8vIFdlJ2xsIHN0b3JlIG5leHQgc3RhdGVzIHRyYW5zaXRpb25zIGluIHZlY3RvcjxwYWlyPGludCxpbnQ+PiAoc3RhdGUsIHByb2IpCgp2ZWN0b3I8dmVjdG9yPHBhaXI8aW50LGludD4+Pi
B0cmFuc2l0aW9uczsKCi8vIE1vZHVsYXIgYWRkaXRpb24gb2YgZWRnZXMgcHJvYmFiaWxpdGllcyB0byBnW3VdW3ZdCgovLyBQcmVjb21wdXRlIHBvdyBpbnYgZm9yIHEKCmludCBtb2RfaW52X3FbMTAwXTsKCi
8vIFByZWNvbXB1dGUgaW52ZXJzZSBvZiBxIGZvciBhbGwgcSBpbiBpbnB1dD8KLy8gV2UnbGwgY29tcHV0ZSBvbiB0aGUgZmx5LgoKLy8gSW1wbGVtZW50IG1haW4gbG9naWM6CmludCBtYWluKCkgewogICAgaW
9zOjpzeW5jX3dpdGhfc3RkaW8oZmFsc2UpOwogICAgY2luLnRpZShudWxscHRyKTsKCiAgICBjaW4gPj4gbiA+PiBtOwoKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKSB7CiAgICAgICAgZm9yIChpbn
QgaiA9IDA7IGogPCBuOyBqKyspIGdbaV1bal0gPSAwOwogICAgfQoKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbTsgaSsrKSB7CiAgICAgICAgaW50IHUsIHYsIHAsIHE7CiAgICAgICAgY2luID4+IHUgPj4gdi
A+PiBwID4+IHE7CiAgICAgICAgdS0tOyB2LS07CiAgICAgICAgaW50IHBfbW9kID0gcCAlIE1PRDsKICAgICAgICBpbnQgcV9tb2QgPSBxICUgTU9EOwogICAgICAgIGludCBpbnZfcSA9IG1vZF9pbnYocV9tb2
QpOwogICAgICAgIGludCB2YWwgPSBtb2RfbXVsKHBfbW9kLCBpbnZfcSk7CiAgICAgICAgZ1t1XVt2XSA9IHZhbDsKICAgICAgICBnW3ZdW3VdID0gdmFsOwogICAgfQoKICAgIGZ1bGxfbWFzayA9ICgxIDw8IG
4pIC0gMTsKCiAgICAvLyBCRlMgZnJvbSBpbml0aWFsIHN0YXRlIDEgKG9ubHkgdmVydGV4IDEgaGFzIG1lc3NhZ2UpCiAgICBpbnQgc3RhcnQgPSAxIDw8IDA7CiAgICBxdWV1ZTxpbnQ+IHE7CiAgICBxLnB1c2
goc3RhcnQpOwogICAgaWR4X21hcFtzdGFydF0gPSAwOwogICAgc3RhdGVzLnB1c2hfYmFjayhzdGFydCk7CgogICAgd2hpbGUgKCFxLmVtcHR5KCkpIHsKICAgICAgICBpbnQgY3VyID0gcS5mcm9udCgpOyBxLn
BvcCgpOwoKICAgICAgICAvLyBDb21wdXRlIHByb2JhYmlsaXR5IGZvciBlYWNoIHZlcnRleCBub3QgaW4gY3VyIHRvIHJlY2VpdmUgbWVzc2FnZQogICAgICAgIHZlY3RvcjxpbnQ+IHBfcmVhY2gobiwgMCk7Cg
ogICAgICAgIGZvciAoaW50IHYgPSAwOyB2IDwgbjsgdisrKSB7CiAgICAgICAgICAgIGlmIChjdXIgJiAoMSA8PCB2KSkgewogICAgICAgICAgICAgICAgcF9yZWFjaFt2XSA9IDE7IC8vIGFscmVhZHkgaGF2ZS
BtZXNzYWdlCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBDb21wdXRlIHByb2JhYmlsaXR5IGl0IGdldHMgbWVzc2FnZQogICAgICAgICAgICAgICAgLy8gcF92ID0gMSAtIHByb2R1Y3
Rfe3UgaW4gY3VyfSAoMSAtIGdbdV1bdl0pCiAgICAgICAgICAgICAgICBpbnQgcHJvZCA9IDE7CiAgICAgICAgICAgICAgICBmb3IgKGludCB1ID0gMDsgdSA8IG47IHUrKykgewogICAgICAgICAgICAgICAgIC
AgIGlmICgoY3VyICYgKDEgPDwgdSkpICYmIGdbdV1bdl0gIT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBwcm9kID0gbW9kX211bChwcm9kLCBtb2Rfc3ViKDEsIGdbdV1bdl0pKTsKICAgICAgICAgIC
AgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwX3JlYWNoW3ZdID0gbW9kX3N1YigxLCBwcm9kKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gTm93IHdlIG
dlbmVyYXRlIGFsbCBzdWJzZXRzIG9mIHZlcnRpY2VzIG5vdCBpbiBjdXIgd2l0aCB0aGUgcHJvYmFiaWxpdHkgdGhhdCB0aG9zZSB2ZXJ0aWNlcyBnZXQgbWVzc2FnZQogICAgICAgIHZlY3RvcjxpbnQ+IG5ld1
92ZXJ0aWNlczsKICAgICAgICBmb3IgKGludCB2ID0gMDsgdiA8IG47IHYrKykgewogICAgICAgICAgICBpZiAoIShjdXIgJiAoMSA8PCB2KSkpIHsKICAgICAgICAgICAgICAgIG5ld192ZXJ0aWNlcy5wdXNoX2
JhY2sodik7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIFN0b3JlIHRyYW5zaXRpb25zIGZvciBjdXIKICAgICAgICB2ZWN0b3I8cGFpcjxpbnQsaW50Pj4gY3VyX3RyYW5zaXRpb25zOwoKIC
AgICAgICBpbnQgc3ogPSAoaW50KW5ld192ZXJ0aWNlcy5zaXplKCk7CgogICAgICAgIC8vIEVudW1lcmF0ZSBhbGwgc3Vic2V0cyBvZiBuZXdfdmVydGljZXMKICAgICAgICAvLyBGb3IgZWFjaCBzdWJzZXQsIH
Byb2JhYmlsaXR5IGlzIHByb2R1Y3Qgb2YgcF9yZWFjaFt2XSBvciAoMS1wX3JlYWNoW3ZdKQoKICAgICAgICAvLyBXZSdsbCB1c2UgRFAgdG8gY29tcHV0ZSBwcm9iYWJpbGl0aWVzCgogICAgICAgIHZlY3Rvcj
xpbnQ+IGRwKDEgPDwgc3osIDApOwogICAgICAgIGRwWzBdID0gMTsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHN6OyBpKyspIHsKICAgICAgICAgICAgaW50IHYgPSBuZXdfdmVydGljZXNbaV07CiAgIC
AgICAgICAgIGludCBwMSA9IHBfcmVhY2hbdl07CiAgICAgICAgICAgIGludCBwMCA9IG1vZF9zdWIoMSwgcDEpOwoKICAgICAgICAgICAgZm9yIChpbnQgbWFzayA9ICgxIDw8IGkpIC0gMTsgbWFzayA+PSAwOy
BtYXNrLS0pIHsKICAgICAgICAgICAgICAgIGludCB2YWwgPSBkcFttYXNrXTsKICAgICAgICAgICAgICAgIGRwW21hc2tdID0gbW9kX211bCh2YWwsIHAwKTsKICAgICAgICAgICAgICAgIGRwW21hc2sgfCAoMS
A8PCBpKV0gPSBtb2RfYWRkKGRwW21hc2sgfCAoMSA8PCBpKV0sIG1vZF9tdWwodmFsLCBwMSkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmb3IgKGludCBtYXNrID0gMDsgbWFzayA8ICgxID
w8IHN6KTsgbWFzaysrKSB7CiAgICAgICAgICAgIGludCBuZXh0X3N0YXRlID0gY3VyOwogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHN6OyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChtYXNrIC
YgKDEgPDwgaSkpIHsKICAgICAgICAgICAgICAgICAgICBuZXh0X3N0YXRlIHw9ICgxIDw8IG5ld192ZXJ0aWNlc1tpXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG
RwW21hc2tdICE9IDApIHsKICAgICAgICAgICAgICAgIGlmIChpZHhfbWFwLmZpbmQobmV4dF9zdGF0ZSkgPT0gaWR4X21hcC5lbmQoKSkgewogICAgICAgICAgICAgICAgICAgIGlkeF9tYXBbbmV4dF9zdGF0ZV
0gPSAoaW50KXN0YXRlcy5zaXplKCk7CiAgICAgICAgICAgICAgICAgICAgc3RhdGVzLnB1c2hfYmFjayhuZXh0X3N0YXRlKTsKICAgICAgICAgICAgICAgICAgICBxLnB1c2gobmV4dF9zdGF0ZSk7CiAgICAgIC
AgICAgICAgICB9CiAgICAgICAgICAgICAgICBjdXJfdHJhbnNpdGlvbnMuZW1wbGFjZV9iYWNrKG5leHRfc3RhdGUsIGRwW21hc2tdKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdHJhbnNpdG
lvbnMucHVzaF9iYWNrKG1vdmUoY3VyX3RyYW5zaXRpb25zKSk7CiAgICB9CgogICAgLy8gTnVtYmVyIG9mIHN0YXRlcwogICAgaW50IFMgPSAoaW50KXN0YXRlcy5zaXplKCk7CgogICAgLy8gQnVpbGQgbGluZW
FyIHN5c3RlbSBBICogeCA9IGIKICAgIC8vIEE6IFMgeCBTIG1hdHJpeCBtb2QgTU9ECiAgICAvLyB4OiBleHBlY3RlZCBkYXlzCiAgICAvLyBiOiBSSFMgdmVjdG9yCgogICAgLy8gV2UnbGwgc3RvcmUgQSBhcy
B2ZWN0b3I8dmVjdG9yPHBhaXI8aW50LGludD4+PiBzcGFyc2UgbWF0cml4IGZvciByb3dzIHdpdGggKGNvbCwgdmFsKQoKICAgIC8vIEJ1dCBtYXRyaXggaXMgYWxtb3N0IGRlbnNlIG9uIGRpYWdvbmFsIGFuZC
B0cmFuc2l0aW9ucywgc28gdXNlIHZlY3Rvcjx2ZWN0b3I8aW50Pj4KCiAgICAvLyBXZSdsbCBzdG9yZSBBIGFzIHZlY3Rvcjx2ZWN0b3I8aW50Pj4gcm93cwoKICAgIHZlY3Rvcjx2ZWN0b3I8cGFpcjxpbnQsaW
50Pj4+IEEoUyk7CiAgICB2ZWN0b3I8aW50PiBiKFMsIDEpOwoKICAgIC8vIEZvciBmdWxsX21hc2sgc3RhdGUsIEU9MAogICAgaW50IGZ1bGxfaWR4ID0gaWR4X21hcFtmdWxsX21hc2tdOwogICAgYltmdWxsX2
lkeF0gPSAwOwoKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgUzsgaSsrKSB7CiAgICAgICAgLy8gRGlhZ29uYWwgZWxlbWVudCA9IDEKICAgICAgICBBW2ldLmVtcGxhY2VfYmFjayhpLCAxKTsKCiAgICAgICAgaW
YgKGkgPT0gZnVsbF9pZHgpIGNvbnRpbnVlOwoKICAgICAgICAvLyBTdWJ0cmFjdCB0cmFuc2l0aW9uIHByb2JhYmlsaXRpZXMKICAgICAgICBmb3IgKGF1dG8gJnQgOiB0cmFuc2l0aW9uc1tpXSkgewogICAgIC
AgICAgICBpbnQgdG8gPSBpZHhfbWFwW3QuZmlyc3RdOwogICAgICAgICAgICBpbnQgcCA9IHQuc2Vjb25kOwogICAgICAgICAgICAvLyBBW2ldW3RvXSAtPSBwIG1vZAogICAgICAgICAgICBBW2ldLmVtcGxhY2
VfYmFjayh0bywgbW9kX3N1YigwLCBwKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIFNvbHZlIGxpbmVhciBzeXN0ZW0gYnkgR2F1c3MgZWxpbWluYXRpb24gbW9kIE1PRAoKICAgIC8vIENvbnZlcnQgQSB0by
BtYXRyaXggZm9ybQogICAgdmVjdG9yPHZlY3RvcjxpbnQ+PiBtYXQoUywgdmVjdG9yPGludD4oUywgMCkpOwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCBTOyBpKyspIHsKICAgICAgICBmb3IgKGF1dG8gJnAgOi
BBW2ldKSB7CiAgICAgICAgICAgIG1hdFtpXVtwLmZpcnN0XSA9IHAuc2Vjb25kOwogICAgICAgIH0KICAgIH0KCiAgICB2ZWN0b3I8aW50PiByZXMgPSBiOwoKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgUzsgaS
srKSB7CiAgICAgICAgLy8gRmluZCBwaXZvdAogICAgICAgIGludCBwaXZvdCA9IC0xOwogICAgICAgIGZvciAoaW50IHIgPSBpOyByIDwgUzsgcisrKSB7CiAgICAgICAgICAgIGlmIChtYXRbcl1baV0gIT0gMC
kgewogICAgICAgICAgICAgICAgcGl2b3QgPSByOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHBpdm90ID09IC0xKSB7CiAgICAgICAgICAgIC8vIF
Nob3VsZCBub3QgaGFwcGVuIGJlY2F1c2Ugc3lzdGVtIGlzIHNvbHZhYmxlCiAgICAgICAgICAgIGNvdXQgPDwgMCA8PCAiXG4iOwogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgaWYgKH
Bpdm90ICE9IGkpIHsKICAgICAgICAgICAgc3dhcChtYXRbaV0sIG1hdFtwaXZvdF0pOwogICAgICAgICAgICBzd2FwKHJlc1tpXSwgcmVzW3Bpdm90XSk7CiAgICAgICAgfQoKICAgICAgICBpbnQgaW52X3Bpdm
90ID0gbW9kX2ludihtYXRbaV1baV0pOwoKICAgICAgICAvLyBOb3JtYWxpemUgcm93IGkKICAgICAgICBmb3IgKGludCBjID0gaTsgYyA8IFM7IGMrKykgewogICAgICAgICAgICBtYXRbaV1bY10gPSBtb2RfbX
VsKG1hdFtpXVtjXSwgaW52X3Bpdm90KTsKICAgICAgICB9CiAgICAgICAgcmVzW2ldID0gbW9kX211bChyZXNbaV0sIGludl9waXZvdCk7CgogICAgICAgIC8vIEVsaW1pbmF0ZSBvdGhlciByb3dzCiAgICAgIC
AgZm9yIChpbnQgciA9IDA7IHIgPCBTOyByKyspIHsKICAgICAgICAgICAgaWYgKHIgIT0gaSAmJiBtYXRbcl1baV0gIT0gMCkgewogICAgICAgICAgICAgICAgaW50IGZhY3RvciA9IG1hdFtyXVtpXTsKICAgIC
AgICAgICAgICAgIGZvciAoaW50IGMgPSBpOyBjIDwgUzsgYysrKSB7CiAgICAgICAgICAgICAgICAgICAgbWF0W3JdW2NdID0gbW9kX3N1YihtYXRbcl1bY10sIG1vZF9tdWwoZmFjdG9yLCBtYXRbaV1bY10pKT
sKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJlc1tyXSA9IG1vZF9zdWIocmVzW3JdLCBtb2RfbXVsKGZhY3RvciwgcmVzW2ldKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogIC
AgLy8gT3V0cHV0IGV4cGVjdGVkIGRheXMgZnJvbSBpbml0aWFsIHN0YXRlCiAgICBjb3V0IDw8IHJlc1swXSA8PCAiXG4iOwoKICAgIHJldHVybiAwOwp9Cg==' | base64 -d > /app/main.cpp; tmux wa
it -S done
root@066095128b8b:/app#
