{
    "id": "35204120-4e71-4f3c-840e-3fc4a6e31589",
    "trial_name": "lcbpro-2065e.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2065e",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2065E)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nWith the approach of Valentine's Day, Skibidus desperately needs a way to rizz up his crush! Fortunately, he knows of just the way: creating the perfect Binary String!\n\nGiven a binary string$^{\\text{∗}}$ $t$, let $x$ represent the number of $\\texttt{0}$ in $t$ and $y$ represent the number of $\\texttt{1}$ in $t$. Its balance-value is defined as the value of $\\max(x-y, y-x)$.\n\nSkibidus gives you three integers $n$, $m$, and $k$. He asks for your help to construct a binary string $s$ of length $n+m$ with exactly $n$ $\\texttt{0}$'s and $m$ $\\texttt{1}$'s such that the maximum balance-value among all of its substrings$^{\\text{†}}$ is exactly $k$. If it is not possible, output -1.\n\n$^{\\text{∗}}$A binary string only consists of characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) -- the number of test cases.\n\nThe first and only line of each test case contains three integers $n$, $m$, and $k$ ($0 \\leq n, m \\leq 2\\cdot 10^5$, $1 \\leq k \\leq n + m$, $n+m\\geq 1$).\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is possible to construct $s$, output it on a new line. If there are multiple possible $s$, output any. Otherwise, output -1 on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 2 1\n\n4 3 2\n\n2 4 3\n\n8 3 2\n\n5 0 4\n\n5 0 5\n\n```\n\n#### Output #1\n\n```\n101\n0100101\n011011\n-1\n-1\n00000\n```\n\n### Note\n\nIn the first test case, we must construct $s$ such that it contains one $\\texttt{0}$, two $\\texttt{1}$, and a maximum balance of $1$ among all of its substrings. One possible valid $s$ is $\\texttt{101}$ because:\n\n- Consider the substring bounded by indices $[1, 1]$. Its balance-value is $\\max(0 - 1, 1 - 0) = 1$.\n- Consider the substring bounded by indices $[1, 2]$. Its balance-value is $\\max(1 - 1, 1 - 1) = 0$.\n- Consider the substring bounded by indices $[1, 3]$. Its balance-value is $\\max(1 - 2, 2 - 1) = 1$.\n- Consider the substring bounded by indices $[2, 2]$. Its balance-value is $\\max(1 - 0, 0 - 1) = 1$.\n- Consider the substring bounded by indices $[2, 3]$. Its balance-value is $\\max(1 - 1, 1 - 1) = 0$.\n- Consider the substring bounded by indices $[3, 3]$. Its balance-value is $\\max(0 - 1, 1 - 0) = 1$.\n\nAmong all possible substrings, the maximum balance-value is $1$.\n\nIn the second test case, the substring with the maximum balance-value is $0100$, which has a balance of $max(3-1, 1-3)=2$.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2065e/lcbpro-2065e.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1307,
    "total_output_tokens": 907,
    "trial_started_at": "2025-09-06T00:57:49.305242+00:00",
    "trial_ended_at": "2025-09-06T00:58:44.280221+00:00",
    "agent_started_at": "2025-09-06T00:58:09.477157+00:00",
    "agent_ended_at": "2025-09-06T00:58:21.256430+00:00",
    "test_started_at": "2025-09-06T00:58:23.725613+00:00",
    "test_ended_at": "2025-09-06T00:58:27.352243+00:00"
}