{
    "id": "515a294b-bde0-4a30-ae8d-148578222665",
    "trial_name": "lcbpro-2062d.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2062d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2062D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given a tree$^{\\text{∗}}$ with $n$ nodes and values $l_i, r_i$ for each node. You can choose an initial value $a_i$ satisfying $l_i\\le a_i\\le r_i$ for the $i$-th node. A tree is balanced if all node values are equal, and the value of a balanced tree is defined as the value of any node.\n\nIn one operation, you can choose two nodes $u$ and $v$, and increase the values of all nodes in the subtree$^{\\text{†}}$ of node $v$ by $1$ while considering $u$ as the root of the entire tree. Note that $u$ may be equal to $v$.\n\nYour goal is to perform a series of operations so that the tree becomes balanced. Find the minimum possible value of the tree after performing these operations. Note that you don't need to minimize the number of operations.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$Node $w$ is considered in the subtree of node $v$ if any path from root $u$ to $w$ must go through $v$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^5$) -- the number of input test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 2\\cdot 10^5$) -- the number of nodes in the tree.\n\nThen $n$ lines follow. The $i$-th line contains two integers $l_i,r_i$ ($0\\le l_i \\le r_i\\le 10^9$) -- the constraint of the value of the $i$-th node.\n\nThe next $n-1$ lines contain the edges of the tree. The $i$-th line contains two integers $u_i,v_i$ ($1\\le u_i,v_i \\le n$, $u_i \\neq v_i$) -- an edge connecting $u_i$ and $v_i$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer -- the minimum possible value that all $a_i$ can be made equal to after performing the operations. It can be shown that the answer always exists.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n0 11\n\n6 6\n\n0 0\n\n5 5\n\n2 1\n\n3 1\n\n4 3\n\n7\n\n1 1\n\n0 5\n\n0 5\n\n2 2\n\n2 2\n\n2 2\n\n2 2\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n3 6\n\n3 7\n\n4\n\n1 1\n\n1 1\n\n1 1\n\n0 0\n\n1 4\n\n2 4\n\n3 4\n\n7\n\n0 20\n\n0 20\n\n0 20\n\n0 20\n\n3 3\n\n4 4\n\n5 5\n\n1 2\n\n1 3\n\n1 4\n\n2 5\n\n3 6\n\n4 7\n\n5\n\n1000000000 1000000000\n\n0 0\n\n1000000000 1000000000\n\n0 0\n\n1000000000 1000000000\n\n3 2\n\n2 1\n\n1 4\n\n4 5\n\n6\n\n21 88\n\n57 81\n\n98 99\n\n61 76\n\n15 50\n\n23 67\n\n2 1\n\n3 2\n\n4 3\n\n5 3\n\n6 4\n\n```\n\n#### Output #1\n\n```\n11\n3\n3\n5\n3000000000\n98\n```\n\n### Note\n\nIn the first test case, you can choose $a=[6,6,0,5]$.\n\nYou can perform the following operations to make all $a_i$ equal:\n\n1. Choose $u=4$, $v=3$ and perform the operation $5$ times.\n2. Choose $u=1$, $v=3$ and perform the operation $6$ times.\n\nThe complete process is shown as follows (where the numbers inside the parentheses are elements of $a$):\n\n![](https://espresso.codeforces.com/7f1aa785ea78225224c7c60aeb85b5c2197683c0.png)\n\nIt can be proven that this is the optimal solution.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2062d/lcbpro-2062d.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1409,
    "total_output_tokens": 1108,
    "trial_started_at": "2025-09-06T00:55:45.978275+00:00",
    "trial_ended_at": "2025-09-06T00:56:54.373959+00:00",
    "agent_started_at": "2025-09-06T00:56:04.614486+00:00",
    "agent_ended_at": "2025-09-06T00:56:23.160782+00:00",
    "test_started_at": "2025-09-06T00:56:27.688686+00:00",
    "test_ended_at": "2025-09-06T00:56:31.484853+00:00"
}