{
    "id": "e30aabf9-c5c3-4866-bc3f-3e645aefc084",
    "trial_name": "lcbpro-2075a.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2075a",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2075A)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given two integers $n$ and $k$; $k$ is an odd number not less than $3$. Your task is to turn $n$ into $0$.\n\nTo do this, you can perform the following operation any number of times: choose a number $x$ from $1$ to $k$ and subtract it from $n$. However, if the current value of $n$ is even (divisible by $2$), then $x$ must also be even, and if the current value of $n$ is odd (not divisible by $2$), then $x$ must be odd.\n\nIn different operations, you can choose the same values of $x$, but you don't have to. So, there are no limitations on using the same value of $x$.\n\nCalculate the minimum number of operations required to turn $n$ into $0$.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10000$) -- the number of test cases.\n\nEach test case consists of one line containing two integers $n$ and $k$ ($3 \\le k \\le n \\le 10^9$, $k$ is odd).\n\n### Output\n\nFor each test case, output one integer -- the minimum number of operations required to turn $n$ into $0$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n39 7\n\n9 3\n\n6 3\n\n999967802 3\n\n5 5\n\n6 5\n\n999999999 3\n\n1000000000 3\n\n```\n\n#### Output #1\n\n```\n7\n4\n3\n499983901\n1\n2\n499999999\n500000000\n```\n\n### Note\n\nIn the first example from the statement, you can first subtract $5$ from $39$ to get $34$. Then subtract $6$ five times to get $4$. Finally, subtract $4$ to get $0$.\n\nIn the second example, you can subtract $3$ once, and then subtract $2$ three times.\n\nIn the third example, you can subtract $2$ three times.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2075a/lcbpro-2075a.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 861,
    "total_output_tokens": 362,
    "trial_started_at": "2025-09-06T01:14:54.573777+00:00",
    "trial_ended_at": "2025-09-06T01:15:39.223991+00:00",
    "agent_started_at": "2025-09-06T01:15:08.006132+00:00",
    "agent_ended_at": "2025-09-06T01:15:13.866791+00:00",
    "test_started_at": "2025-09-06T01:15:16.071466+00:00",
    "test_ended_at": "2025-09-06T01:15:20.272342+00:00"
}