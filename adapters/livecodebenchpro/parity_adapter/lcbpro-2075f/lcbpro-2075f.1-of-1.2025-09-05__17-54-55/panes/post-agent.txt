root@25c141560008:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIG
Npbi50aWUobnVsbHB0cik7CiAgICBpbnQgdDsKICAgIGNpbiA+PiB0OwogICAgd2hpbGUgKHQtLSkgewogICAgICAgIGludCBuOwogICAgICAgIGNpbiA+PiBuOwogICAgICAgIHZlY3RvcjxpbnQ+IGEobik7Ci
AgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgY2luID4+IGFbaV07CiAgICAgICAgfQoKICAgICAgICAvLyBUbyBmb3JtIGEgYmVhdXRpZnVsIHN1YnNlcXVlbmNlOgogIC
AgICAgIC8vIEZvciBlbGVtZW50cyBleGNlcHQgZmlyc3QsIHRoZXJlIG11c3QgYmUgYW4gZWxlbWVudCBsZXNzIHRoYW4gaXQgdG8gdGhlIGxlZnQuCiAgICAgICAgLy8gRm9yIGVsZW1lbnRzIGV4Y2VwdCBsYX
N0LCB0aGVyZSBtdXN0IGJlIGFuIGVsZW1lbnQgZ3JlYXRlciB0aGFuIGl0IHRvIHRoZSByaWdodC4KICAgICAgICAvLyBXZSB3YW50IHRoZSBsb25nZXN0IHN1Y2ggc3Vic2VxdWVuY2UuCgogICAgICAgIC8vIE
9ic2VydmF0aW9uczoKICAgICAgICAvLyAxLiBUaGUgZmlyc3QgZWxlbWVudCBvZiBzdWJzZXF1ZW5jZSBtdXN0IGJlIHRoZSBtaW5pbWFsIGVsZW1lbnQgaW4gc3Vic2VxdWVuY2UgKG5vIHNtYWxsZXIgdG8gbG
VmdCwgc28gaXQgbXVzdCBiZSB0aGUgZmlyc3QpLgogICAgICAgIC8vIDIuIFRoZSBsYXN0IGVsZW1lbnQgb2Ygc3Vic2VxdWVuY2UgbXVzdCBiZSB0aGUgbWF4aW1hbCBlbGVtZW50IGluIHN1YnNlcXVlbmNlIC
hubyBsYXJnZXIgdG8gcmlnaHQsIHNvIGl0IG11c3QgYmUgdGhlIGxhc3QpLgoKICAgICAgICAvLyBMZXQncyBmaW5kIGxvbmdlc3Qgc3Vic2VxdWVuY2Ugd2hlcmU6CiAgICAgICAgLy8gLSBmaXJzdCBlbGVtZW
50IGlzIG1pbmltYWwgaW4gc3Vic2VxdWVuY2UKICAgICAgICAvLyAtIGxhc3QgZWxlbWVudCBpcyBtYXhpbWFsIGluIHN1YnNlcXVlbmNlCgogICAgICAgIC8vIEFwcHJvYWNoOgogICAgICAgIC8vIFdlIGNhbi
B0cnkgdG8gZmluZCBhIHN1YnNlcXVlbmNlIHRoYXQgaXMgZmlyc3Qgc3RyaWN0bHkgaW5jcmVhc2luZyAodG8gZW5zdXJlIGVhY2ggbmV4dCBlbGVtZW50IGhhcyBhIHNtYWxsZXIgdG8gbGVmdCkKICAgICAgIC
AvLyBhbmQgYWxzbyBoYXMgYSBzdHJpY3RseSBpbmNyZWFzaW5nIG9yZGVyIHRvIHRoZSByaWdodCAodG8gZW5zdXJlIGVhY2ggZWxlbWVudCBleGNlcHQgbGFzdCBoYXMgbGFyZ2VyIHRvIHJpZ2h0KQoKICAgIC
AgICAvLyBCdXQgdGhlIHByb2JsZW0gY29uZGl0aW9ucyBhbGxvdyBlcXVhbCBlbGVtZW50cz8gTm8sIGJlY2F1c2UgZXhhbXBsZSBbMiwyLDRdIGlzIG5vdCBiZWF1dGlmdWwuCiAgICAgICAgLy8gU28gc2VxdW
VuY2UgbXVzdCBiZSBzdHJpY3RseSBpbmNyZWFzaW5nPyBOb3QgbmVjZXNzYXJpbHkuIFRoZSBleGFtcGxlIFsxLDQsMiw0LDddIGlzIGJlYXV0aWZ1bC4KICAgICAgICAvLyBCdXQgaXQgc2hvd3MgdGhhdCBmb3
IgZXZlcnkgZWxlbWVudCBleGNlcHQgZmlyc3QgdGhlcmUgaXMgYW4gZWxlbWVudCB0byBsZWZ0IGxlc3MgdGhhbiBpdC4KICAgICAgICAvLyBBbmQgZm9yIGV2ZXJ5IGVsZW1lbnQgZXhjZXB0IGxhc3QgdGhlcm
UgaXMgYW4gZWxlbWVudCB0byByaWdodCBsYXJnZXIgdGhhbiBpdC4KCiAgICAgICAgLy8gU28gZWxlbWVudHMgY2FuIGdvIHVwIGFuZCBkb3duLCBidXQgbXVzdCBzYXRpc2Z5IHRoZXNlIGNvbmRpdGlvbnMuCg
ogICAgICAgIC8vIExldCdzIGFuYWx5emUgdGhlIGNvbmRpdGlvbnMgZm9yIGVhY2ggZWxlbWVudCBpIGluIHN1YnNlcXVlbmNlOgogICAgICAgIC8vIC0gaWYgaSAhPSBmaXJzdCBlbGVtZW50LCB0aGVyZSBleG
lzdHMgaiA8IGkgd2l0aCBhW2pdIDwgYVtpXQogICAgICAgIC8vIC0gaWYgaSAhPSBsYXN0IGVsZW1lbnQsIHRoZXJlIGV4aXN0cyBrID4gaSB3aXRoIGFba10gPiBhW2ldCgogICAgICAgIC8vIFRvIG1heGltaX
plIGxlbmd0aCwgY29uc2lkZXIgdGhlIGZvbGxvd2luZzoKICAgICAgICAvLyBJZiB0aGUgc3Vic2VxdWVuY2UgbGVuZ3RoIGlzIDEsIGl0IGlzIGJlYXV0aWZ1bCAoYWNjb3JkaW5nIHRvIGV4YW1wbGUpLgogIC
AgICAgIC8vIEZvciBsZW5ndGggPj0gMiwgdGhlIHN1YnNlcXVlbmNlIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgZWxlbWVudCBsZXNzIHRoYW4gdGhlIHNlY29uZCBlbGVtZW50IHRvIGxlZnQsCiAgICAgICAgLy
8gYW5kIGF0IGxlYXN0IG9uZSBlbGVtZW50IGxhcmdlciB0aGFuIHRoZSBzZWNvbmQgbGFzdCB0byB0aGUgcmlnaHQuCgogICAgICAgIC8vIExldCdzIHRyeSB0byBmaW5kIHRoZSBtYXhpbXVtIGxlbmd0aCBiZW
F1dGlmdWwgc3Vic2VxdWVuY2UuCgogICAgICAgIC8vIElkZWE6CiAgICAgICAgLy8gVGhlIHN1YnNlcXVlbmNlIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgZWxlbWVudCBsZXNzIHRoYW4gdGhlIHNlY29uZCBlbG
VtZW50IChzbyBzZWNvbmQgZWxlbWVudCA+IGZpcnN0IGVsZW1lbnQpCiAgICAgICAgLy8gYW5kIGF0IGxlYXN0IG9uZSBlbGVtZW50IGxhcmdlciB0aGFuIHRoZSBzZWNvbmQgbGFzdCBlbGVtZW50IChzbyBsYX
N0IGVsZW1lbnQgPiBzZWNvbmQgbGFzdCBlbGVtZW50KS4KCiAgICAgICAgLy8gU28gdGhlIHNlcXVlbmNlIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgaW5jcmVhc2UgYXQgdGhlIHN0YXJ0IGFuZCBhdCBsZWFzdC
BvbmUgaW5jcmVhc2UgYXQgdGhlIGVuZC4KCiAgICAgICAgLy8gTGV0J3MgdHJ5IHRoZSBmb2xsb3dpbmcgYXBwcm9hY2g6CiAgICAgICAgLy8gMS4gSWYgdGhlIGFycmF5IGlzIHN0cmljdGx5IGluY3JlYXNpbm
csIHRoZSB3aG9sZSBhcnJheSBpcyBiZWF1dGlmdWwuCiAgICAgICAgLy8gMi4gSWYgdGhlIGFycmF5IGlzIHN0cmljdGx5IGRlY3JlYXNpbmcsIG9ubHkgc3Vic2VxdWVuY2VzIG9mIGxlbmd0aCAxIGFyZSBiZW
F1dGlmdWwuCiAgICAgICAgLy8gMy4gT3RoZXJ3aXNlLCB0cnkgdG8gZmluZCBhIHN1YnNlcXVlbmNlIHRoYXQgc3RhcnRzIHdpdGggbWluaW1hbCBlbGVtZW50cywgZW5kcyB3aXRoIG1heGltYWwgZWxlbWVudH
MsCiAgICAgICAgLy8gICAgYW5kIGluIHRoZSBtaWRkbGUgZWxlbWVudHMgc2F0aXNmeSB0aGUgY29uZGl0aW9ucy4KCiAgICAgICAgLy8gQW5vdGhlciBhcHByb2FjaDoKICAgICAgICAvLyBMZXQncyBmaW5kIH
RoZSBsb25nZXN0IHN1YnNlcXVlbmNlIHdoZXJlOgogICAgICAgIC8vIC0gZm9yIGVhY2ggZWxlbWVudCBleGNlcHQgZmlyc3QsIHRoZXJlIGlzIGFuIGVsZW1lbnQgdG8gbGVmdCBsZXNzIHRoYW4gaXQKICAgIC
AgICAvLyBTbyBmb3IgZWFjaCBlbGVtZW50LCBhdCBsZWFzdCBvbmUgc21hbGxlciBlbGVtZW50IGJlZm9yZSBpdC4KICAgICAgICAvLyAtIGZvciBlYWNoIGVsZW1lbnQgZXhjZXB0IGxhc3QsIHRoZXJlIGlzIG
FuIGVsZW1lbnQgdG8gcmlnaHQgbGFyZ2VyIHRoYW4gaXQKCiAgICAgICAgLy8gV2UgY2FuIHVzZSB0aGUgZm9sbG93aW5nIGNoYXJhY3Rlcml6YXRpb246CiAgICAgICAgLy8gLSBUaGUgZmlyc3QgZWxlbWVudC
BtdXN0IGJlIHRoZSBtaW5pbWFsIGVsZW1lbnQgaW4gdGhlIHN1YnNlcXVlbmNlLgogICAgICAgIC8vIC0gVGhlIGxhc3QgZWxlbWVudCBtdXN0IGJlIHRoZSBtYXhpbWFsIGVsZW1lbnQgaW4gdGhlIHN1YnNlcX
VlbmNlLgoKICAgICAgICAvLyBTbyB0aGUgc3Vic2VxdWVuY2UgbXVzdCBjb250YWluIG1pbmltYWwgZWxlbWVudCBmaXJzdCwgbWF4aW1hbCBlbGVtZW50IGxhc3QuCgogICAgICAgIC8vIExldCdzIHRyeSB0by
BmaW5kIHRoZSBsb25nZXN0IHN1YnNlcXVlbmNlIHdoZXJlIGFbMF0gaXMgbWluaW1hbCBlbGVtZW50IGluIHN1YnNlcXVlbmNlLAogICAgICAgIC8vIGFuZCBhW2xhc3RdIGlzIG1heGltYWwgZWxlbWVudCBpbi
BzdWJzZXF1ZW5jZS4KCiAgICAgICAgLy8gTGV0J3MgcHJlY29tcHV0ZToKICAgICAgICAvLyBwcmVmaXhfbWluW2ldID0gbWluaW11bSBvZiBhWzAuLmldCiAgICAgICAgLy8gc3VmZml4X21heFtpXSA9IG1heG
ltdW0gb2YgYVtpLi5uLTFdCgogICAgICAgIC8vIEZvciBlYWNoIGVsZW1lbnQgYVtpXSwgaWYgYVtpXSA+IHByZWZpeF9taW5baS0xXSBhbmQgYVtpXSA8IHN1ZmZpeF9tYXhbaSsxXSwKICAgICAgICAvLyB0aG
VuIGl0IGNhbiBiZSBpbiB0aGUgbWlkZGxlIG9mIHN1YnNlcXVlbmNlLgoKICAgICAgICAvLyBUaGUgZmlyc3QgZWxlbWVudCBtdXN0IGJlIG1pbmltYWwgKG5vIGVsZW1lbnQgYmVmb3JlIHNtYWxsZXIpLCBsYX
N0IGVsZW1lbnQgbWF4aW1hbCAobm8gZWxlbWVudCBhZnRlciBsYXJnZXIpLgoKICAgICAgICAvLyBTbyB0aGUgc3Vic2VxdWVuY2UgY2FuIGJlIGZvcm1lZCBieSBwaWNraW5nIG9uZSBtaW5pbWFsIGVsZW1lbn
QgYXQgc3RhcnQsCiAgICAgICAgLy8gb25lIG1heGltYWwgZWxlbWVudCBhdCBlbmQsIGFuZCBlbGVtZW50cyBpbiB0aGUgbWlkZGxlIHNhdGlzZnlpbmcgdGhlIGNvbmRpdGlvbnMuCgogICAgICAgIC8vIExldC
dzIHRyeSBhIGdyZWVkeSBhcHByb2FjaDoKICAgICAgICAvLyBGaW5kIHRoZSBtaW5pbXVtIGVsZW1lbnQgdmFsdWUgKG1pbl92YWwpIGFuZCBtYXhpbXVtIGVsZW1lbnQgdmFsdWUgKG1heF92YWwpCiAgICAgIC
AgLy8gVGhlIHN1YnNlcXVlbmNlIG11c3Qgc3RhcnQgd2l0aCBtaW5fdmFsIGFuZCBlbmQgd2l0aCBtYXhfdmFsLgoKICAgICAgICAvLyBGaW5kIHBvc2l0aW9ucyBvZiBtaW5fdmFsIGFuZCBtYXhfdmFsLgoKIC
AgICAgICAvLyBDYXNlIDE6IG1pbl92YWwgPT0gbWF4X3ZhbCA9PiBzdWJzZXF1ZW5jZSBsZW5ndGggMS4KCiAgICAgICAgLy8gQ2FzZSAyOiBtaW5fdmFsIDwgbWF4X3ZhbAogICAgICAgIC8vIFdlIGNhbiB0cn
kgdG8gZmluZCBsb25nZXN0IHN1YnNlcXVlbmNlIHN0YXJ0aW5nIHdpdGggbWluX3ZhbCBhbmQgZW5kaW5nIHdpdGggbWF4X3ZhbCwKICAgICAgICAvLyBhbmQgYWxsIGludGVybWVkaWF0ZSBlbGVtZW50cyBzYX
Rpc2Z5IGNvbmRpdGlvbnMuCgogICAgICAgIC8vIExldCdzIHRyeSB0byBwaWNrIGFsbCBlbGVtZW50cyBiZXR3ZWVuIGZpcnN0IG9jY3VycmVuY2Ugb2YgbWluX3ZhbCBhbmQgbGFzdCBvY2N1cnJlbmNlIG9mIG
1heF92YWwgKGluY2x1c2l2ZSkKICAgICAgICAvLyBhbmQgY2hlY2sgaWYgdGhleSBzYXRpc2Z5IHRoZSBjb25kaXRpb25zLgoKICAgICAgICAvLyBCdXQgdGhpcyBtaWdodCBub3QgcHJvZHVjZSB0aGUgbG9uZ2
VzdCBzdWJzZXF1ZW5jZS4KCiAgICAgICAgLy8gTGV0J3MgdHJ5IHRoZSBmb2xsb3dpbmcgc2ltcGxlciBhcHByb2FjaDoKICAgICAgICAvLyBUaGUgbG9uZ2VzdCBiZWF1dGlmdWwgc3Vic2VxdWVuY2UgaXMgdG
hlIGxlbmd0aCBvZiB0aGUgYXJyYXkgaWYgdGhlIGFycmF5IGlzIHN0cmljdGx5IGluY3JlYXNpbmcuCiAgICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgbG9uZ2VzdCBiZWF1dGlmdWwgc3Vic2VxdWVuY2UgaXMgdG
hlIGxlbmd0aCBvZiB0aGUgbG9uZ2VzdCBzdWJzZXF1ZW5jZQogICAgICAgIC8vIHRoYXQgaXMgc3RyaWN0bHkgaW5jcmVhc2luZyBhbmQgc3RyaWN0bHkgZGVjcmVhc2luZyBpbiBzb21lIHBhcnRzIHRvIHNhdG
lzZnkgdGhlIGNvbmRpdGlvbnMuCgogICAgICAgIC8vIEFub3RoZXIgYXBwcm9hY2g6CiAgICAgICAgLy8gVGhlIHByb2JsZW0gbWF0Y2hlcyBhIGtub3duIHBhdHRlcm46CiAgICAgICAgLy8gRm9yIGVhY2ggZW
xlbWVudCBleGNlcHQgdGhlIGZpcnN0LCBhIHNtYWxsZXIgZWxlbWVudCBtdXN0IGJlIHRvIHRoZSBsZWZ0LgogICAgICAgIC8vIEZvciBlYWNoIGVsZW1lbnQgZXhjZXB0IHRoZSBsYXN0LCBhIGxhcmdlciBlbG
VtZW50IG11c3QgYmUgdG8gdGhlIHJpZ2h0LgoKICAgICAgICAvLyBTbyBmb3IgZWFjaCBlbGVtZW50IChleGNlcHQgZmlyc3QpLCB0aGVyZSBtdXN0IGJlIGEgc21hbGxlciBlbGVtZW50IGJlZm9yZSBpdC4KIC
AgICAgICAvLyBGb3IgZWFjaCBlbGVtZW50IChleGNlcHQgbGFzdCksIHRoZXJlIG11c3QgYmUgYSBsYXJnZXIgZWxlbWVudCBhZnRlciBpdC4KCiAgICAgICAgLy8gTGV0J3MgZGVmaW5lIGZvciBlYWNoIGVsZW
1lbnQ6CiAgICAgICAgLy8gbGVmdF9zbWFsbGVyW2ldID0gdHJ1ZSBpZiB0aGVyZSBleGlzdHMgaiA8IGkgd2l0aCBhW2pdIDwgYVtpXQogICAgICAgIC8vIHJpZ2h0X2xhcmdlcltpXSA9IHRydWUgaWYgdGhlcm
UgZXhpc3RzIGsgPiBpIHdpdGggYVtrXSA+IGFbaV0KCiAgICAgICAgLy8gVGhlbiB0aGUgc3Vic2VxdWVuY2UgZWxlbWVudHMgbXVzdCBiZSB0aG9zZSB3aXRoIGxlZnRfc21hbGxlcltpXSBvciBpID09IGZpcn
N0IGVsZW1lbnQsCiAgICAgICAgLy8gYW5kIHJpZ2h0X2xhcmdlcltpXSBvciBpID09IGxhc3QgZWxlbWVudC4KCiAgICAgICAgLy8gV2Ugd2FudCB0byBmaW5kIGxvbmdlc3Qgc3Vic2VxdWVuY2Ugc3VjaCB0aG
F0OgogICAgICAgIC8vIC0gZmlyc3QgZWxlbWVudCBoYXMgbm8gc21hbGxlciBlbGVtZW50IGJlZm9yZSBpdCAobGVmdF9zbWFsbGVyIGZhbHNlKQogICAgICAgIC8vIC0gbGFzdCBlbGVtZW50IGhhcyBubyBsYX
JnZXIgZWxlbWVudCBhZnRlciBpdCAocmlnaHRfbGFyZ2VyIGZhbHNlKQogICAgICAgIC8vIC0gZm9yIGVhY2ggb3RoZXIgZWxlbWVudCwgbGVmdF9zbWFsbGVyIHRydWUgYW5kIHJpZ2h0X2xhcmdlciB0cnVlCg
ogICAgICAgIC8vIFNvIHRoZSBzdWJzZXF1ZW5jZSBtdXN0IHN0YXJ0IHdpdGggYW4gZWxlbWVudCB3aXRoIGxlZnRfc21hbGxlciBmYWxzZSwKICAgICAgICAvLyBlbmQgd2l0aCBlbGVtZW50IHdpdGggcmlnaH
RfbGFyZ2VyIGZhbHNlLAogICAgICAgIC8vIGFuZCBmb3IgZXZlcnkgb3RoZXIgZWxlbWVudCBsZWZ0X3NtYWxsZXIgYW5kIHJpZ2h0X2xhcmdlciB0cnVlLgoKICAgICAgICAvLyBTbyBsZXQncyBmaW5kIGFsbC
BlbGVtZW50cyBzYXRpc2Z5aW5nIHRoZXNlIGNvbmRpdGlvbnMgYW5kIGZpbmQgdGhlIGxvbmdlc3Qgc3Vic2VxdWVuY2UgZm9ybWVkIGJ5IHRoZW0uCgogICAgICAgIC8vIExldCdzIGNvbXB1dGUgYXJyYXlzOg
ogICAgICAgIHZlY3Rvcjxib29sPiBsZWZ0X3NtYWxsZXIobiwgZmFsc2UpOwogICAgICAgIHNldDxpbnQ+IHNlZW47CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgLy
8gY2hlY2sgaWYgdGhlcmUgaXMgc21hbGxlciBlbGVtZW50IGJlZm9yZSBpCiAgICAgICAgICAgIGF1dG8gaXQgPSBzZWVuLmxvd2VyX2JvdW5kKGFbaV0pOwogICAgICAgICAgICBpZiAoaXQgIT0gc2Vlbi5iZW
dpbigpKSBsZWZ0X3NtYWxsZXJbaV0gPSB0cnVlOwogICAgICAgICAgICBzZWVuLmluc2VydChhW2ldKTsKICAgICAgICB9CgogICAgICAgIHZlY3Rvcjxib29sPiByaWdodF9sYXJnZXIobiwgZmFsc2UpOwogIC
AgICAgIHNlZW4uY2xlYXIoKTsKICAgICAgICBmb3IgKGludCBpID0gbiAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGxhcmdlciBlbGVtZW50IGFmdGVyIGkKIC
AgICAgICAgICAgYXV0byBpdCA9IHNlZW4udXBwZXJfYm91bmQoYVtpXSk7CiAgICAgICAgICAgIGlmIChpdCAhPSBzZWVuLmVuZCgpKSByaWdodF9sYXJnZXJbaV0gPSB0cnVlOwogICAgICAgICAgICBzZWVuLm
luc2VydChhW2ldKTsKICAgICAgICB9CgogICAgICAgIC8vIFRoZSBzdWJzZXF1ZW5jZSBtdXN0IHN0YXJ0IHdpdGggYW4gZWxlbWVudCB3aGVyZSBsZWZ0X3NtYWxsZXJbaV0gPT0gZmFsc2UKICAgICAgICAvLy
BhbmQgZW5kIHdpdGggYW4gZWxlbWVudCB3aGVyZSByaWdodF9sYXJnZXJbaV0gPT0gZmFsc2UKCiAgICAgICAgLy8gRmluZCBhbGwgaW5kaWNlcyB3aXRoIGxlZnRfc21hbGxlciBmYWxzZQogICAgICAgIHZlY3
RvcjxpbnQ+IHN0YXJ0X2luZGljZXM7CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgaWYgKCFsZWZ0X3NtYWxsZXJbaV0pIHN0YXJ0X2luZGljZXMucHVzaF9iYWNrKG
kpOwogICAgICAgIH0KCiAgICAgICAgLy8gRmluZCBhbGwgaW5kaWNlcyB3aXRoIHJpZ2h0X2xhcmdlciBmYWxzZQogICAgICAgIHZlY3RvcjxpbnQ+IGVuZF9pbmRpY2VzOwogICAgICAgIGZvciAoaW50IGkgPS
AwOyBpIDwgbjsgaSsrKSB7CiAgICAgICAgICAgIGlmICghcmlnaHRfbGFyZ2VyW2ldKSBlbmRfaW5kaWNlcy5wdXNoX2JhY2soaSk7CiAgICAgICAgfQoKICAgICAgICAvLyBUbyBmaW5kIGxvbmdlc3QgYmVhdX
RpZnVsIHN1YnNlcXVlbmNlLCB3ZSBjYW4gdHJ5IHRvIGZpbmQgdGhlIGxvbmdlc3Qgc3Vic2VxdWVuY2UKICAgICAgICAvLyBzdGFydGluZyBmcm9tIHNvbWUgc3RhcnRfaW5kZXgsIGVuZGluZyBhdCBzb21lIG
VuZF9pbmRleCA+PSBzdGFydF9pbmRleCwKICAgICAgICAvLyBhbmQgYWxsIGVsZW1lbnRzIGluIGJldHdlZW4gaGF2ZSBsZWZ0X3NtYWxsZXIgYW5kIHJpZ2h0X2xhcmdlciB0cnVlLgoKICAgICAgICAvLyBGb3
IgZWFjaCBzdGFydF9pbmRleCwgd2UgdHJ5IHRvIGZpbmQgdGhlIGZhcnRoZXN0IGVuZF9pbmRleCA+PSBzdGFydF9pbmRleC4KCiAgICAgICAgLy8gQnV0IHRoaXMgaXMgY29tcGxpY2F0ZWQsIGxldCdzIHRyeS
BhIHNpbXBsZXIgYXBwcm9hY2g6CiAgICAgICAgLy8gVGhlIHN1YnNlcXVlbmNlIG11c3Qgc3RhcnQgd2l0aCBhbiBlbGVtZW50IHdpdGggbGVmdF9zbWFsbGVyIGZhbHNlLAogICAgICAgIC8vIGFuZCBlbmQgd2
l0aCBhbiBlbGVtZW50IHdpdGggcmlnaHRfbGFyZ2VyIGZhbHNlLgoKICAgICAgICAvLyBGb3IgZWFjaCBzdWNoIHBhaXIgKHN0YXJ0LCBlbmQpIHdpdGggc3RhcnQgPD0gZW5kLAogICAgICAgIC8vIHRoZSBzdW
JzZXF1ZW5jZSBpcyB0aGUgZWxlbWVudHMgZnJvbSBzdGFydCB0byBlbmQgd2hlcmUgZm9yIGFsbCBpIGluIChzdGFydCwgZW5kKSwgbGVmdF9zbWFsbGVyW2ldIGFuZCByaWdodF9sYXJnZXJbaV0gYXJlIHRydW
UuCgogICAgICAgIC8vIFdlIGNhbiB0cnkgdG8gZmluZCB0aGUgbG9uZ2VzdCBpbnRlcnZhbCBbbCxyXSB3aGVyZToKICAgICAgICAvLyBsZWZ0X3NtYWxsZXJbbF0gPT0gZmFsc2UsCiAgICAgICAgLy8gcmlnaH
RfbGFyZ2VyW3JdID09IGZhbHNlLAogICAgICAgIC8vIGFuZCBmb3IgYWxsIGkgaW4gKGwsciksIGxlZnRfc21hbGxlcltpXSA9PSB0cnVlIGFuZCByaWdodF9sYXJnZXJbaV0gPT0gdHJ1ZS4KCiAgICAgICAgLy
8gTGV0J3MgcHJlY29tcHV0ZSBwcmVmaXggYW5kIHN1ZmZpeCBhcnJheXM6CiAgICAgICAgdmVjdG9yPGludD4gcHJlKG4rMSwgMCksIHN1ZihuKzEsIDApOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbj
sgaSsrKSB7CiAgICAgICAgICAgIHByZVtpKzFdID0gcHJlW2ldICsgKGxlZnRfc21hbGxlcltpXSA/IDEgOiAwKTsKICAgICAgICB9CiAgICAgICAgZm9yIChpbnQgaSA9IG4tMTsgaSA+PSAwOyBpLS0pIHsKIC
AgICAgICAgICAgc3VmW2ldID0gc3VmW2krMV0gKyAocmlnaHRfbGFyZ2VyW2ldID8gMSA6IDApOwogICAgICAgIH0KCiAgICAgICAgaW50IGFucyA9IDE7IC8vIGF0IGxlYXN0IGxlbmd0aCAxIHN1YnNlcXVlbm
NlCiAgICAgICAgZm9yIChpbnQgbCA9IDA7IGwgPCBuOyBsKyspIHsKICAgICAgICAgICAgaWYgKCFsZWZ0X3NtYWxsZXJbbF0pIHsKICAgICAgICAgICAgICAgIC8vIGJpbmFyeSBzZWFyY2ggZm9yIHIgPj0gbC
B3aGVyZSByaWdodF9sYXJnZXJbcl0gPT0gZmFsc2UKICAgICAgICAgICAgICAgIGludCBsb3cgPSBsLCBoaWdoID0gbi0xLCByZXMgPSBsOwogICAgICAgICAgICAgICAgd2hpbGUgKGxvdyA8PSBoaWdoKSB7Ci
AgICAgICAgICAgICAgICAgICAgaW50IG1pZCA9IChsb3cgKyBoaWdoKSAvIDI7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFyaWdodF9sYXJnZXJbbWlkXSkgewogICAgICAgICAgICAgICAgICAgICAgICByZX
MgPSBtaWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaGlnaCA9IG1pZCAtIDE7CiAgIC
AgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgZm9yIGFsbCBpIGluIChsLHJlcykgbGVmdF9zbWFsbGVyW2ldIGFuZCByaWdodF9sYXJnZXJbaV
0gYXJlIHRydWUKICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiBsZWZ0X3NtYWxsZXIgdHJ1ZSBpbiAobCxyZXMpID0gcHJlW3Jlc10gLSBwcmVbbCsxXQogICAgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIH
JpZ2h0X2xhcmdlciB0cnVlIGluIChsLHJlcykgPSBzdWZbbCsxXSAtIHN1ZltyZXNdCiAgICAgICAgICAgICAgICBpbnQgbGVuZ3RoID0gcmVzIC0gbCArIDE7CiAgICAgICAgICAgICAgICBpbnQgbGVmdF9jb3
VudCA9IHByZVtyZXNdIC0gcHJlW2wrMV07CiAgICAgICAgICAgICAgICBpbnQgcmlnaHRfY291bnQgPSBzdWZbbCsxXSAtIHN1ZltyZXNdOwogICAgICAgICAgICAgICAgaWYgKGxlZnRfY291bnQgPT0gbGVuZ3
RoIC0gMiAmJiByaWdodF9jb3VudCA9PSBsZW5ndGggLSAyKSB7CiAgICAgICAgICAgICAgICAgICAgYW5zID0gbWF4KGFucywgbGVuZ3RoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgIC
AgIH0KCiAgICAgICAgY291dCA8PCBhbnMgPDwgIlxuIjsKICAgIH0KICAgIHJldHVybiAwOwp9Cg==' | base64 -d > /app/main.cpp; tmux wait -S done
root@25c141560008:/app#
