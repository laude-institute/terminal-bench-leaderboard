root@0ddddc6ef50a:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgovLyBQcm9ibGVtOiBMaXZlQ29kZUJlbmNoIFBybyAoTWluaSkgLSBleHRlcm5hbCBqdW
RnZQovLyBBdXRob3I6IEFJIGFzc2lzdGFudAovLyBMYW5ndWFnZTogQysrMTcKCi8vIEV4cGxhbmF0aW9uOgovLyBXZSBuZWVkIHRvIHNlbGVjdCBhIHN1YmFycmF5IG9mIGRyaW5rcyBlYWNoIGRheS4KLy8gRm
9yIGRheSAxLCBzZWxlY3QgYW55IHN1YmFycmF5IHRvIG1heGltaXplIHN1bS4KLy8gRm9yIHN1YnNlcXVlbnQgZGF5cywgdGhlIHN1YmFycmF5IG11c3Qgb3ZlcmxhcCB3aXRoIHByZXZpb3VzIGRheSdzIHN1Ym
FycmF5Ci8vIGJ1dCBub3QgYmUgaWRlbnRpY2FsIChtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIG5ldyBhbmQgb25lIG92ZXJsYXBwaW5nIGRyaW5rIHR5cGUpLgovLyBIZW5jZSwgaW50ZXJ2YWxzIG11c3Qgc2hpZn
QgYnkgYXQgbGVhc3Qgb25lIHBvc2l0aW9uIHRvIGxlZnQgb3IgcmlnaHQuCgovLyBBcHByb2FjaDoKLy8gVXNlIERQIHdpdGggc3RhdGVzIHJlcHJlc2VudGluZyB0aGUgY2hvc2VuIGludGVydmFsIFtsLCByXS
BvbiBwcmV2aW91cyBkYXkuCi8vIEJ1dCBtIGNhbiBiZSBsYXJnZSwgc28gTyhuKm1eMikgaXMgaW1wb3NzaWJsZS4KLy8gV2UgY2FuIG9ubHkgc2hpZnQgdGhlIGludGVydmFsIGJ5IG1vdmluZyBsZWZ0IG9yIH
JpZ2h0IGJvdW5kYXJ5IGJ5IG9uZSBwb3NpdGlvbi4KLy8gU28gZnJvbSBkYXkgaS0xIGludGVydmFsIFtsLCByXSwgZGF5IGkgaW50ZXJ2YWwgY2FuIGJlIGVpdGhlciBbbC0xLCByXSwgW2wsIHIrMV0sIG9yIF
tsKzEsIHJdLCBbbCwgci0xXSAobXVzdCBrZWVwIGF0IGxlYXN0IG9uZSBvdmVybGFwcGluZyBlbGVtZW50KS4KLy8gQnV0IHRvIGtlZXAgTyhuKm0pIGNvbXBsZXhpdHksIHdlIGNvbnNpZGVyIGludGVydmFscy
B0aGF0IGV4cGFuZCBvciBzaHJpbmsgYnkgb25lIG9uIGVpdGhlciBzaWRlLgoKLy8gV2Ugd2lsbCBtYWludGFpbiBEUCBhcnJheXMgZm9yIGludGVydmFscyBlbmRpbmcgYXQgZWFjaCBwb3NpdGlvbiB3aXRoIG
xlbmd0aCA+PTE6Ci8vIEZvciBlYWNoIGRheSwgd2UgcHJlY29tcHV0ZSBwcmVmaXggc3VtcyB0byBnZXQgc3ViYXJyYXkgc3VtcyBpbiBPKDEpLgovLyBUaGVuIGZvciBkYXkgMSwgRFBbbF1bcl0gPSBzdW0gb2
YgQVsxXVtsLi5yXQovLyBGb3IgZGF5IGk+MSwgRFBbbF1bcl0gPSBtYXggb2YgRFAgZnJvbSBkYXkgaS0xIGZvciBpbnRlcnZhbHMgb3ZlcmxhcHBpbmcgd2l0aCBbbCxyXSBhbmQgbWVldGluZyBjb25kaXRpb2
5zLgoKLy8gVG8gb3B0aW1pemUgdHJhbnNpdGlvbnMsIHdlIGNvbnNpZGVyIG9ubHkgaW50ZXJ2YWxzIHRoYXQgZGlmZmVyIGJ5IG9uZSBlbGVtZW50IGZyb20gcHJldmlvdXMgZGF5IGludGVydmFscy4KLy8gV2
UgdHJhY2sgZm9yIGVhY2ggcG9zc2libGUgaW50ZXJ2YWwgdGhlIGJlc3QgRFAgdmFsdWUuCgovLyBGaW5hbGx5LCBvdXRwdXQgbWF4IERQIGZvciBkYXkgbi4KCmludCBtYWluKCkgewogICAgaW9zOjpzeW5jX3
dpdGhfc3RkaW8oZmFsc2UpOwogICAgY2luLnRpZShudWxscHRyKTsKCiAgICBpbnQgdDsKICAgIGNpbiA+PiB0OwogICAgd2hpbGUgKHQtLSkgewogICAgICAgIGludCBuLCBtOwogICAgICAgIGNpbiA+PiBuID
4+IG07CgogICAgICAgIHZlY3Rvcjx2ZWN0b3I8bG9uZyBsb25nPj4gQShuLCB2ZWN0b3I8bG9uZyBsb25nPihtKSk7CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgZm
9yIChpbnQgaiA9IDA7IGogPCBtOyBqKyspIHsKICAgICAgICAgICAgICAgIGNpbiA+PiBBW2ldW2pdOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBQcmVjb21wdXRlIHByZWZpeCBzdW1zIG
ZvciBlYWNoIGRheQogICAgICAgIHZlY3Rvcjx2ZWN0b3I8bG9uZyBsb25nPj4gcHJlZml4KG4sIHZlY3Rvcjxsb25nIGxvbmc+KG0gKyAxLCAwKSk7CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKy
spIHsKICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBtOyBqKyspIHsKICAgICAgICAgICAgICAgIHByZWZpeFtpXVtqKzFdID0gcHJlZml4W2ldW2pdICsgQVtpXVtqXTsKICAgICAgICAgICAgfQogIC
AgICAgIH0KCiAgICAgICAgLy8gRm9yIGRheSAxLCBkcCBpbnRlcnZhbHM6IGRwW3JdID0gbWF4IHByb2ZpdCBmb3IgaW50ZXJ2YWxzIGVuZGluZyBhdCByICh3ZSBzdG9yZSBpbnRlcnZhbHMgYnkgdGhlaXIgc3
RhcnQsIGVuZCkKICAgICAgICAvLyBUbyByZWR1Y2UgY29tcGxleGl0eSwgd2UgcmVwcmVzZW50IGludGVydmFscyBvbmx5IGJ5IHRoZWlyIHN0YXJ0IGFuZCBlbmQuCiAgICAgICAgLy8gV2UnbGwgc3RvcmUgZH
AgYXMgYSBtYXAgZnJvbSBpbnRlcnZhbHMgb3IgYmV0dGVyLCBhcyB0d28gYXJyYXlzIGRwX3N0YXJ0IGFuZCBkcF9lbmQuCgogICAgICAgIC8vIFdlIHVzZSBhcnJheXMgdG8gc3RvcmUgZHA6IGRwW2xdW3JdIG
lzIG5vdCBmZWFzaWJsZSwgc28gd2Ugc3RvcmUgb25seSBpbnRlcnZhbHMgcmVwcmVzZW50aW5nIHN1YmFycmF5cwogICAgICAgIC8vIEJ1dCBtIGNhbiBiZSAyZTUsIHNvIE8obV4yKSBpcyB0b28gbGFyZ2UuCg
ogICAgICAgIC8vIE9ic2VydmF0aW9uOgogICAgICAgIC8vIFdlIG11c3QgZmluZCBhIHNvbHV0aW9uIGluIE8obiptKSBvciBPKG4qbSpsb2cgbSkuCgogICAgICAgIC8vIEtleSBpbnNpZ2h0OgogICAgICAgIC
8vIE9uIGVhY2ggZGF5LCB0aGUgY2hvc2VuIGludGVydmFsIG11c3Qgb3ZlcmxhcCB3aXRoIHByZXZpb3VzIGRheSdzIGludGVydmFsCiAgICAgICAgLy8gYW5kIGRpZmZlciBieSBhdCBsZWFzdCBvbmUgZWxlbW
VudC4KCiAgICAgICAgLy8gTGV0J3MgbWFpbnRhaW4gZHAgYXJyYXlzIGZvciBpbnRlcnZhbHMgZGVmaW5lZCBieSB0aGVpciBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucy4KCiAgICAgICAgLy8gVG8gb3B0aW1pem
UsIHdlIG1haW50YWluIHR3byBhcnJheXM6CiAgICAgICAgLy8gZHBfbGVmdFtpXTogbWF4aW11bSBkcCBmb3IgaW50ZXJ2YWxzIGVuZGluZyBhdCBwb3NpdGlvbiBpCiAgICAgICAgLy8gZHBfcmlnaHRbaV06IG
1heGltdW0gZHAgZm9yIGludGVydmFscyBzdGFydGluZyBhdCBwb3NpdGlvbiBpCgogICAgICAgIC8vIEZvciBkYXkgMSwgZHAgaW50ZXJ2YWxzIGFyZSBhbGwgc3ViYXJyYXlzIGFuZCB0aGVpciBzdW1zLgogIC
AgICAgIC8vIEJ1dCBlbnVtZXJhdGluZyBhbGwgc3ViYXJyYXlzIGlzIE8obV4yKSwgdG9vIGxhcmdlLgoKICAgICAgICAvLyBXZSBjYW4gY29uc2lkZXIgb25seSBpbnRlcnZhbHMgb2YgbGVuZ3RoIDEgZm9yIG
RheSAxIHRvIHN0YXJ0LgogICAgICAgIC8vIEJ1dCBwcm9ibGVtIHN0YXRlcyBhdCBsZWFzdCBvbmUgdHlwZSBtdXN0IGJlIHNvbGQsIHNvIGxlbmd0aCA+PSAxLgoKICAgICAgICAvLyBBbHRlcm5hdGl2ZSBhcH
Byb2FjaDoKICAgICAgICAvLyBGb3IgZGF5IDEsIHdlIGNhbiBwaWNrIGFueSBzdWJhcnJheSB3aXRoIG1heGltdW0gc3VtLgogICAgICAgIC8vIFNvIHdlIGZpbmQgbWF4aW11bSBzdWJhcnJheSBzdW0gZm9yIG
RheSAxLgoKICAgICAgICAvLyBGb3Igc3Vic2VxdWVudCBkYXlzOgogICAgICAgIC8vIFRoZSBuZXcgc3ViYXJyYXkgbXVzdCBvdmVybGFwIHByZXZpb3VzIGRheSdzIHN1YmFycmF5IGFuZCBkaWZmZXIgYnkgYX
QgbGVhc3Qgb25lIGVsZW1lbnQuCgogICAgICAgIC8vIFNvIGludGVydmFscyBtdXN0IGludGVyc2VjdCBidXQgbm90IGJlIGlkZW50aWNhbC4KCiAgICAgICAgLy8gRFAgYXBwcm9hY2g6CiAgICAgICAgLy8gRm
9yIGRheSBpLCB3ZSBrZWVwIHRyYWNrIG9mIGJlc3QgaW50ZXJ2YWxzIFtsLHJdIHdpdGggZHAgdmFsdWUuCiAgICAgICAgLy8gRm9yIHBlcmZvcm1hbmNlLCB3ZSBvbmx5IGtlZXAgaW50ZXJ2YWxzIHRoYXQgY2
FuIGJlIHJlYWNoZWQgYnkgZXhwYW5kaW5nIG9yIHNocmlua2luZyBwcmV2aW91cyBpbnRlcnZhbHMgYnkgMS4KCiAgICAgICAgLy8gTGV0J3MgbWFpbnRhaW4gbGVmdCBhbmQgcmlnaHQgYm91bmRhcmllcyBhcn
JheXMgZm9yIGRheSBpOgogICAgICAgIC8vIEZvciBkYXkgMSwgZmluZCBtYXhpbXVtIHN1YmFycmF5IHN1bSBhbmQgcmVjb3JkIGl0cyBpbnRlcnZhbC4KCiAgICAgICAgLy8gVG8gZmluZCBtYXhpbXVtIHN1Ym
FycmF5IHN1bSBhbmQgaW50ZXJ2YWwgZm9yIGRheSAxOgogICAgICAgIGxvbmcgbG9uZyBtYXhfc3VtID0gTExPTkdfTUlOOwogICAgICAgIGludCBtYXhfbCA9IDAsIG1heF9yID0gMDsKICAgICAgICBsb25nIG
xvbmcgY3VyX3N1bSA9IDA7CiAgICAgICAgaW50IGN1cl9zdGFydCA9IDA7CgogICAgICAgIGZvciAoaW50IGogPSAwOyBqIDwgbTsgaisrKSB7CiAgICAgICAgICAgIGlmIChjdXJfc3VtIDwgMCkgewogICAgIC
AgICAgICAgICAgY3VyX3N1bSA9IEFbMF1bal07CiAgICAgICAgICAgICAgICBjdXJfc3RhcnQgPSBqOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY3VyX3N1bSArPSBBWzBdW2pdOwogIC
AgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjdXJfc3VtID4gbWF4X3N1bSkgewogICAgICAgICAgICAgICAgbWF4X3N1bSA9IGN1cl9zdW07CiAgICAgICAgICAgICAgICBtYXhfbCA9IGN1cl9zdGFydDsKIC
AgICAgICAgICAgICAgIG1heF9yID0gajsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gRm9yIGRheSAxLCBzdG9yZSBvbmx5IG9uZSBpbnRlcnZhbDogbWF4X2wuLm1heF9yIHdpdGggZHAgdm
FsdWUgbWF4X3N1bQogICAgICAgIC8vIEZvciBkYXkgMiBhbmQgb253YXJkcywgd2Ugd2lsbCBrZWVwIGEgc2V0IG9mIGNhbmRpZGF0ZSBpbnRlcnZhbHMgKGludGVydmFscyB0aGF0IGNhbiBiZSBmb3JtZWQgYn
kgc2hpZnRpbmcgcHJldmlvdXMgaW50ZXJ2YWwgYnkgMSkKCiAgICAgICAgLy8gV2Ugd2lsbCBzdG9yZSBpbnRlcnZhbHMgYXMgcGFpcnMgKGwscikgYW5kIHRoZWlyIGRwIHZhbHVlcy4KCiAgICAgICAgdmVjdG
9yPHR1cGxlPGludCxpbnQsbG9uZyBsb25nPj4gaW50ZXJ2YWxzOwogICAgICAgIGludGVydmFscy5lbXBsYWNlX2JhY2sobWF4X2wsIG1heF9yLCBtYXhfc3VtKTsKCiAgICAgICAgZm9yIChpbnQgZGF5ID0gMT
sgZGF5IDwgbjsgZGF5KyspIHsKICAgICAgICAgICAgLy8gRm9yIGRheSBkYXksIHdlIHdpbGwgZ2VuZXJhdGUgbmV3IGNhbmRpZGF0ZSBpbnRlcnZhbHMgYnkgc2hpZnRpbmcgcHJldmlvdXMgaW50ZXJ2YWxzIG
J5IDEgb24gbGVmdCBvciByaWdodCBzaWRlCiAgICAgICAgICAgIC8vIENvbmRpdGlvbnM6CiAgICAgICAgICAgIC8vIDEpIEludGVydmFscyBvdmVybGFwIHdpdGggcHJldmlvdXMgaW50ZXJ2YWwKICAgICAgIC
AgICAgLy8gMikgSW50ZXJ2YWxzIGRpZmZlciBieSBhdCBsZWFzdCBvbmUgZWxlbWVudCAoYXQgbGVhc3Qgb25lIG5ldyBhbmQgb25lIG9sZCBlbGVtZW50KQoKICAgICAgICAgICAgLy8gRm9yIGVhY2ggcHJldm
lvdXMgaW50ZXJ2YWwgW2wsIHJdOgogICAgICAgICAgICAvLyBQb3NzaWJsZSBuZXcgaW50ZXJ2YWxzOgogICAgICAgICAgICAvLyBbbC0xLCByXSBpZiBsID4gMAogICAgICAgICAgICAvLyBbbCwgcisxXSBpZi
ByIDwgbS0xCiAgICAgICAgICAgIC8vIFtsKzEsIHJdIGlmIGwgPCByCiAgICAgICAgICAgIC8vIFtsLCByLTFdIGlmIHIgPiBsCgogICAgICAgICAgICAvLyBGb3IgZWFjaCBuZXcgaW50ZXJ2YWwsIGNvbXB1dG
Ugc3VtIGZyb20gcHJlZml4IHN1bXMKICAgICAgICAgICAgLy8gVGhlbiBkcFtuZXdfaW50ZXJ2YWxdID0gbWF4KGRwW25ld19pbnRlcnZhbF0sIGRwW3ByZXZpb3VzX2ludGVydmFsXSArIHN1bV9uZXdfaW50ZX
J2YWwpCgogICAgICAgICAgICAvLyBUbyBhdm9pZCBkdXBsaWNhdGVzLCB1c2UgbWFwIGZyb20gcGFpcjxpbnQsaW50PiB0byBkcCB2YWx1ZQogICAgICAgICAgICB1bm9yZGVyZWRfbWFwPGxvbmcgbG9uZywgbG
9uZyBsb25nPiBuZXdfZHA7CgogICAgICAgICAgICBhdXRvIGhhc2hfaW50ZXJ2YWwgPSBbbV0oaW50IGwsIGludCByKSAtPiBsb25nIGxvbmcgewogICAgICAgICAgICAgICAgcmV0dXJuIChsb25nIGxvbmcpbC
AqIChtKzEpICsgcjsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIC8vIExhbWJkYSB0byBnZXQgc3ViYXJyYXkgc3VtCiAgICAgICAgICAgIGF1dG8gZ2V0X3N1bSA9IFsmXShpbnQgZGF5LCBpbnQgbCwgaW
50IHIpIC0+IGxvbmcgbG9uZyB7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4W2RheV1bcisxXSAtIHByZWZpeFtkYXldW2xdOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy8gRm9yIGVhY2ggcH
JldmlvdXMgaW50ZXJ2YWwKICAgICAgICAgICAgZm9yIChhdXRvICZbbCwgciwgdmFsXSA6IGludGVydmFscykgewogICAgICAgICAgICAgICAgdmVjdG9yPHBhaXI8aW50LGludD4+IGNhbmRpZGF0ZXM7CiAgIC
AgICAgICAgICAgICAvLyBsLTEsIHIKICAgICAgICAgICAgICAgIGlmIChsID4gMCkgY2FuZGlkYXRlcy5lbXBsYWNlX2JhY2sobC0xLCByKTsKICAgICAgICAgICAgICAgIC8vIGwsIHIrMQogICAgICAgICAgIC
AgICAgaWYgKHIgPCBtLTEpIGNhbmRpZGF0ZXMuZW1wbGFjZV9iYWNrKGwsIHIrMSk7CiAgICAgICAgICAgICAgICAvLyBsKzEsIHIKICAgICAgICAgICAgICAgIGlmIChsIDwgcikgY2FuZGlkYXRlcy5lbXBsYW
NlX2JhY2sobCsxLCByKTsKICAgICAgICAgICAgICAgIC8vIGwsIHItMQogICAgICAgICAgICAgICAgaWYgKHIgPiBsKSBjYW5kaWRhdGVzLmVtcGxhY2VfYmFjayhsLCByLTEpOwoKICAgICAgICAgICAgICAgIG
ZvciAoYXV0byAmW25sLCBucl0gOiBjYW5kaWRhdGVzKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgb3ZlcmxhcCBhbmQgZGlmZmVyZW5jZSBjb25kaXRpb246CiAgICAgICAgICAgICAgICAgICAgLy
8gb3ZlcmxhcDogaW50ZXJ2YWxzIG11c3QgaW50ZXJzZWN0CiAgICAgICAgICAgICAgICAgICAgLy8gZGlmZmVyZW5jZTogaW50ZXJ2YWxzIG11c3QgZGlmZmVyIGJ5IGF0IGxlYXN0IG9uZSBlbGVtZW50CiAgIC
AgICAgICAgICAgICAgICAgLy8gSGVyZSwgc2luY2Ugd2UgbW92ZSBib3VuZGFyeSBieSAxLCBvdmVybGFwIGFsd2F5cyA+PSAxCiAgICAgICAgICAgICAgICAgICAgLy8gZGlmZmVyZW5jZSBhbHNvIGd1YXJhbn
RlZWQgc2luY2UgaW50ZXJ2YWwgY2hhbmdlZAoKICAgICAgICAgICAgICAgICAgICAvLyBzdW0gb2YgbmV3IGludGVydmFsCiAgICAgICAgICAgICAgICAgICAgbG9uZyBsb25nIHMgPSBnZXRfc3VtKGRheSwgbm
wsIG5yKTsKICAgICAgICAgICAgICAgICAgICBsb25nIGxvbmcgbmV3X3ZhbCA9IHZhbCArIHM7CiAgICAgICAgICAgICAgICAgICAgbG9uZyBsb25nIGggPSBoYXNoX2ludGVydmFsKG5sLCBucik7CiAgICAgIC
AgICAgICAgICAgICAgaWYgKG5ld19kcC5maW5kKGgpID09IG5ld19kcC5lbmQoKSB8fCBuZXdfZHBbaF0gPCBuZXdfdmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19kcFtoXSA9IG5ld192YWw7Ci
AgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBDb252ZXJ0IG5ld19kcCB0byBpbnRlcnZhbHMgdmVjdG9yCiAgICAgICAgICAgIGludG
VydmFscy5jbGVhcigpOwogICAgICAgICAgICBmb3IgKGF1dG8gJltoLCB2YWxdIDogbmV3X2RwKSB7CiAgICAgICAgICAgICAgICBpbnQgbCA9IChpbnQpKGggLyAobSsxKSk7CiAgICAgICAgICAgICAgICBpbn
QgciA9IChpbnQpKGggJSAobSsxKSk7CiAgICAgICAgICAgICAgICBpbnRlcnZhbHMuZW1wbGFjZV9iYWNrKGwsIHIsIHZhbCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFRvIGxpbWl0IG1lbW9yeS
wga2VlcCBvbmx5IHRvcCBLIGludGVydmFscwogICAgICAgICAgICAvLyBLID0gNTAgb3IgMTAwIChoZXVyaXN0aWMpCiAgICAgICAgICAgIGludCBLID0gNTA7CiAgICAgICAgICAgIHNvcnQoaW50ZXJ2YWxzLm
JlZ2luKCksIGludGVydmFscy5lbmQoKSwgW10oYXV0byAmYSwgYXV0byAmYil7IHJldHVybiBnZXQ8Mj4oYSkgPiBnZXQ8Mj4oYik7IH0pOwogICAgICAgICAgICBpZiAoKGludClpbnRlcnZhbHMuc2l6ZSgpID
4gSykgaW50ZXJ2YWxzLnJlc2l6ZShLKTsKICAgICAgICB9CgogICAgICAgIC8vIEZpbmQgbWF4IGRwIHZhbHVlIGluIGxhc3QgZGF5IGludGVydmFscwogICAgICAgIGxvbmcgbG9uZyBhbnMgPSBMTE9OR19NSU
47CiAgICAgICAgZm9yIChhdXRvICZbbCwgciwgdmFsXSA6IGludGVydmFscykgewogICAgICAgICAgICBpZiAodmFsID4gYW5zKSBhbnMgPSB2YWw7CiAgICAgICAgfQoKICAgICAgICBjb3V0IDw8IGFucyA8PC
AiXG4iOwogICAgfQoKICAgIHJldHVybiAwOwp9Cg==' | base64 -d > /app/main.cpp; tmux wait -S done
root@0ddddc6ef50a:/app#
