{
    "id": "2a487ab3-6340-4abd-b9cb-ace156fa67a2",
    "trial_name": "lcbpro-2018c.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2018c",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2018C)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\n[t+pazolite, ginkiha, Hommarju - Paved Garden](https://soundcloud.com/fractalex-gd/ginkiha-paved-garden-little)\n\n⠀\n\nYou are given a tree with $n$ nodes, rooted at node $1$. In this problem, a leaf is a non-root node with degree $1$.\n\nIn one operation, you can remove a leaf and the edge adjacent to it (possibly, new leaves appear). What is the minimum number of operations that you have to perform to get a tree, also rooted at node $1$, where all the leaves are at the same distance from the root?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq n \\leq 5 \\cdot 10^5$) -- the number of nodes.\n\nEach of the next $n-1$ lines contains two integers $u$, $v$ ($1 \\leq u, v \\leq n$, $u \\neq v$), describing an edge that connects $u$ and $v$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the minimum number of operations needed to achieve your goal.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n7\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n4 6\n\n4 7\n\n7\n\n1 2\n\n1 3\n\n1 4\n\n2 5\n\n3 6\n\n5 7\n\n15\n\n12 9\n\n1 6\n\n6 14\n\n9 11\n\n8 7\n\n3 5\n\n13 5\n\n6 10\n\n13 15\n\n13 6\n\n14 12\n\n7 2\n\n8 1\n\n1 4\n\n```\n\n#### Output #1\n\n```\n2\n2\n5\n```\n\n### Note\n\nIn the first two examples, the tree is as follows:\n\n![](https://espresso.codeforces.com/a428c7bdf3ba5490a44914a039d11603cfb1c9df.png)\n\nIn the first example, by removing edges $(1, 3)$ and $(2, 5)$, the resulting tree has all leaves (nodes $6$ and $7$) at the same distance from the root (node $1$), which is $3$. The answer is $2$, as it is the minimum number of edges that need to be removed to achieve the goal.\n\nIn the second example, removing edges $(1, 4)$ and $(5, 7)$ results in a tree where all leaves (nodes $4$ and $5$) are at the same distance from the root (node $1$), which is $2$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2018c/lcbpro-2018c.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1064,
    "total_output_tokens": 815,
    "trial_started_at": "2025-09-06T01:00:41.136739+00:00",
    "trial_ended_at": "2025-09-06T01:01:30.990867+00:00",
    "agent_started_at": "2025-09-06T01:00:52.218848+00:00",
    "agent_ended_at": "2025-09-06T01:01:05.853865+00:00",
    "test_started_at": "2025-09-06T01:01:09.098086+00:00",
    "test_ended_at": "2025-09-06T01:01:14.959433+00:00"
}