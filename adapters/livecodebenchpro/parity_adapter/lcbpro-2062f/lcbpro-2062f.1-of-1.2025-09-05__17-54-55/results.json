{
    "id": "abf97c1f-8720-4467-9332-66b13cd58311",
    "trial_name": "lcbpro-2062f.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2062f",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2062F)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are a cat selling fun algorithm problems. Today, you want to recommend your fun algorithm problems to $k$ cities.\n\nThere are a total of $n$ cities, each with two parameters $a_i$ and $b_i$. Between any two cities $i,j$ ($i\\ne j$), there is a bidirectional road with a length of $\\max(a_i + b_j , b_i + a_j)$. The cost of a path is defined as the total length of roads between every two adjacent cities along the path.\n\nFor $k=2,3,\\ldots,n$, find the minimum cost among all simple paths containing exactly $k$ distinct cities.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 1500$) -- the number of test cases.\n\nFor each test case, the first line contains a single integer $n$ ($2 \\leq n \\leq 3\\cdot 10^3$) -- the number of cities.\n\nThen $n$ lines follow, the $i$-th line contains two integers $a_i,b_i$ ($0 \\leq a_i,b_i \\leq 10^9$) -- the parameters of city $i$.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $9\\cdot 10^6$.\n\n### Output\n\nFor each test case, print $n-1$ integers in one line. The $i$-th integer represents the minimum cost when $k=i+1$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n0 2\n\n2 1\n\n3 3\n\n5\n\n2 7\n\n7 5\n\n6 3\n\n1 8\n\n7 5\n\n8\n\n899167687 609615846\n\n851467150 45726720\n\n931502759 23784096\n\n918190644 196992738\n\n142090421 475722765\n\n409556751 726971942\n\n513558832 998277529\n\n294328304 434714258\n\n```\n\n#### Output #1\n\n```\n4 9\n10 22 34 46\n770051069 1655330585 2931719265 3918741472 5033924854 6425541981 7934325514\n```\n\n### Note\n\nIn the first test case:\n\n- For $k=2$, the optimal path is $1\\to 2$ with a cost of $\\max(0+1,2+2)=4$.\n- For $k=3$, the optimal path is $2\\to 1\\to 3$ with a cost of $\\max(0+1,2+2)+\\max(0+3,3+2)=4+5=9$.\n\nIn the second test case:\n\n- For $k=2$, the optimal path is $1\\to 4$.\n- For $k=3$, the optimal path is $2\\to 3\\to 5$.\n- For $k=4$, the optimal path is $4\\to 1\\to 3\\to 5$.\n- For $k=5$, the optimal path is $5\\to 2\\to 3\\to 1\\to 4$.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2062f/lcbpro-2062f.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1119,
    "total_output_tokens": 1062,
    "trial_started_at": "2025-09-06T01:04:35.536407+00:00",
    "trial_ended_at": "2025-09-06T01:05:32.933933+00:00",
    "agent_started_at": "2025-09-06T01:04:46.597080+00:00",
    "agent_ended_at": "2025-09-06T01:05:06.736874+00:00",
    "test_started_at": "2025-09-06T01:05:10.850301+00:00",
    "test_ended_at": "2025-09-06T01:05:14.857555+00:00"
}