root@d7ee9b094b48:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIG
Npbi50aWUobnVsbHB0cik7CiAgICBpbnQgdDsgY2luID4+IHQ7CiAgICB3aGlsZSAodC0tKSB7CiAgICAgICAgaW50IG47IGNpbiA+PiBuOwogICAgICAgIHZlY3RvcjxpbnQ+IGEobiksIGIobik7CiAgICAgIC
AgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIGNpbiA+PiBhW2ldOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKSBjaW4gPj4gYltpXTsKCiAgICAgICAgLy8gV2Ugd2FudCB0byBtYWtlIG
EgYW5kIGIgcmV2ZXJzZSBvZiBlYWNoIG90aGVyIGJ5IGF0IG1vc3QgbiBzd2FwcyBvZiB0aGUgZm9ybToKICAgICAgICAvLyBzd2FwIGFbaV0sIGFbal0gYW5kIHN3YXAgYltpXSwgYltqXSBzaW11bHRhbmVvdX
NseS4KCiAgICAgICAgLy8gQ2hlY2sgaWYgaXQncyBwb3NzaWJsZToKICAgICAgICAvLyBJZiBiIHJldmVyc2VkIGVxdWFscyB0byBhIGFmdGVyIHNvbWUgc3dhcHMsIHRoZW4gYVtpXSA9IGJbbi0xLWldIGZvci
BhbGwgaS4KICAgICAgICAvLyBUaGUgc3dhcHMgc3dhcCBwYWlycyBvZiBlbGVtZW50cyBhdCBpIGFuZCBqIHNpbXVsdGFuZW91c2x5IGluIGJvdGggYXJyYXlzLgoKICAgICAgICAvLyBBcHByb2FjaDoKICAgIC
AgICAvLyBFYWNoIHN3YXAgZXhjaGFuZ2VzIHBhaXJzIChhW2ldLGJbaV0pIGFuZCAoYVtqXSxiW2pdKS4KICAgICAgICAvLyBXZSB3YW50IHRvIHJlYXJyYW5nZSB0aGUgcGFpcnMgKGFbaV0sIGJbaV0pIHNvIH
RoYXQgZm9yIGFsbCBpOgogICAgICAgIC8vIGFbaV0gPT0gYltuLTEtaV0uCgogICAgICAgIC8vIExldCdzIGNvbnNpZGVyIHBhaXJzIHBbaV0gPSAoYVtpXSwgYltpXSkuIEFmdGVyIHN3YXBwaW5nIGluZGljZX
MgaSBhbmQgaiwKICAgICAgICAvLyBwW2ldIGFuZCBwW2pdIHN3YXAgcGxhY2VzLgoKICAgICAgICAvLyBTbyB3ZSB3YW50IHRvIHBlcm11dGUgcCB0byBhY2hpZXZlIGFbaV0gPT0gYltuLTEtaV0uCiAgICAgIC
AgLy8gVGhhdCBtZWFucyBwW2ldLmZpcnN0ID09IHBbbi0xLWldLnNlY29uZC4KCiAgICAgICAgLy8gV2UnbGwgY2hlY2sgaWYgdGhlIHBhaXJzIGNhbiBiZSByZWFycmFuZ2VkIHNvIHRoYXQgcFtpXS5maXJzdC
A9PSBwW24tMS1pXS5zZWNvbmQKICAgICAgICAvLyBieSBzd2FwcGluZyBwYWlycyBwW2ldLCBwW2pdLgoKICAgICAgICAvLyBGaXJzdCwgY2hlY2sgaWYgbXVsdGlzZXQgb2YgZmlyc3QgZWxlbWVudHMgZXF1YW
xzIG11bHRpc2V0IG9mIHNlY29uZCBlbGVtZW50cyAodGhleSBhcmUgcGVybXV0YXRpb25zLCBzbyB5ZXMpLgoKICAgICAgICAvLyBXZSdsbCBhdHRlbXB0IHRvIHJlYXJyYW5nZSBwIHRvIHNhdGlzZnkgY29uZG
l0aW9uczoKICAgICAgICAvLyBGb3IgaSBpbiBbMC4uKG4tMSkvMl06CiAgICAgICAgLy8gcFtpXS5maXJzdCA9PSBwW24tMS1pXS5zZWNvbmQKCiAgICAgICAgLy8gSWYgbiBpcyBvZGQsIHBbbWlkXS5maXJzdC
A9PSBwW21pZF0uc2Vjb25kIG11c3QgaG9sZC4KCiAgICAgICAgLy8gU3RyYXRlZ3k6CiAgICAgICAgLy8gV2UnbGwgcGxhY2UgcGFpcnMgc28gdGhhdCBwW2ldLmZpcnN0ID09IHBbbi0xLWldLnNlY29uZCBieS
Bzd2FwcGluZyBwYWlycy4KCiAgICAgICAgLy8gV2UgY2FuIHRyeSB0byBhc3NpZ24gcGFpcnMgdG8gcG9zaXRpb25zIGkgd2l0aCBwW2ldLmZpcnN0ID0geCBhbmQgcG9zaXRpb24gbi0xLWkgd2l0aCBwW24tMS
1pXS5zZWNvbmQgPSB4LgoKICAgICAgICAvLyBUbyBkbyB0aGlzLCB3ZSBtYXAgZnJvbSBmaXJzdCB0byBpbmRpY2VzIGFuZCBmcm9tIHNlY29uZCB0byBpbmRpY2VzLgoKICAgICAgICAvLyBXZSdsbCBidWlsZC
BhIHBvc2l0aW9uIGFycmF5IGFuZCBzd2FwIHBhaXJzIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgY29uZGl0aW9uLgoKICAgICAgICB2ZWN0b3I8cGFpcjxpbnQsaW50Pj4gcChuKTsKICAgICAgICBmb3IgKGludC
BpID0gMDsgaSA8IG47IGkrKykgcFtpXSA9IHthW2ldLCBiW2ldfTsKCiAgICAgICAgLy8gV2UnbGwgY3JlYXRlIGEgbWFwIGZyb20gKGZpcnN0IHZhbHVlKSB0byBpbmRpY2VzIHdoZXJlIHBbaV0uZmlyc3QgPT
0gdmFsCiAgICAgICAgdW5vcmRlcmVkX21hcDxpbnQsIGRlcXVlPGludD4+IHBvc19maXJzdDsKICAgICAgICB1bm9yZGVyZWRfbWFwPGludCwgZGVxdWU8aW50Pj4gcG9zX3NlY29uZDsKICAgICAgICBmb3IgKG
ludCBpID0gMDsgaSA8IG47IGkrKykgewogICAgICAgICAgICBwb3NfZmlyc3RbcFtpXS5maXJzdF0ucHVzaF9iYWNrKGkpOwogICAgICAgICAgICBwb3Nfc2Vjb25kW3BbaV0uc2Vjb25kXS5wdXNoX2JhY2soaS
k7CiAgICAgICAgfQoKICAgICAgICB2ZWN0b3I8aW50PiBwb3MobiwgLTEpOyAvLyBwb3NbaV0gPSBpbmRleCBpbiBvcmlnaW5hbCBwIGFzc2lnbmVkIHRvIHBvc2l0aW9uIGkKICAgICAgICB2ZWN0b3I8Ym9vbD
4gdXNlZChuLCBmYWxzZSk7CgogICAgICAgIC8vIFdlJ2xsIGFzc2lnbiBwYWlycyB0byBwb3NpdGlvbnMgMC4ubi0xIHNhdGlzZnlpbmcgcFtwb3NbaV1dLmZpcnN0ID09IHBbcG9zW24tMS1pXV0uc2Vjb25kCg
ogICAgICAgIC8vIFdlJ2xsIGFzc2lnbiBwb3NpdGlvbnMgaW4gcGFpcnMgZnJvbSBvdXRzaWRlLWluCgogICAgICAgIGJvb2wgcG9zc2libGUgPSB0cnVlOwoKICAgICAgICAvLyBJZiBuIGlzIG9kZCwgdGhlIG
1pZGRsZSBlbGVtZW50IG11c3Qgc2F0aXNmeSBwW3Bvc1ttaWRdXS5maXJzdCA9PSBwW3Bvc1ttaWRdXS5zZWNvbmQKICAgICAgICBpbnQgbWlkID0gbiAvIDI7CgogICAgICAgIC8vIFdlJ2xsIGNyZWF0ZSBhbi
BhcnJheSB0byBzdG9yZSBhc3NpZ25lZCBpbmRpY2VzCiAgICAgICAgdmVjdG9yPGludD4gYXNzaWduZWQobiwgLTEpOwoKICAgICAgICAvLyBUbyBzb2x2ZSB0aGUgcHJvYmxlbSBlZmZpY2llbnRseSwgd2UgY2
FuIHVzZSBhIGdyZWVkeSBhcHByb2FjaDoKICAgICAgICAvLyBGb3IgaSBpbiBbMC4ubWlkIC0gMV0sIHdlIHdhbnQgdG8gYXNzaWduIHBhaXIgaW5kaWNlcyBpMSBhbmQgajEgc3VjaCB0aGF0OgogICAgICAgIC
8vIHBbaTFdLmZpcnN0ID0geCwgcFtqMV0uc2Vjb25kID0geCwgYW5kIGkxICE9IGoxCiAgICAgICAgLy8gYW5kIGFzc2lnbiBhc3NpZ25lZFtpXSA9IGkxLCBhc3NpZ25lZFtuLTEtaV0gPSBqMQoKICAgICAgIC
AvLyBGb3IgbWlkZGxlIGVsZW1lbnQgaWYgb2RkLCBmaW5kIGEgcGFpciB3aXRoIHBbaV0uZmlyc3QgPT0gcFtpXS5zZWNvbmQKCiAgICAgICAgLy8gV2UnbGwgbWFpbnRhaW4gYXZhaWxhYmlsaXR5IG9mIHBhaX
JzLgoKICAgICAgICB2ZWN0b3I8Ym9vbD4gdXNlZF9wYWlyKG4sIGZhbHNlKTsKCiAgICAgICAgLy8gRm9yIHRoZSBtaWRkbGUgZWxlbWVudCBpZiBuIG9kZAogICAgICAgIGlmIChuICUgMiA9PSAxKSB7CiAgIC
AgICAgICAgIGJvb2wgZm91bmQgPSBmYWxzZTsKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmICghdXNlZF9wYWlyW2ldICYmIHBbaV0uZmlyc3QgPT
0gcFtpXS5zZWNvbmQpIHsKICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZFttaWRdID0gaTsKICAgICAgICAgICAgICAgICAgICB1c2VkX3BhaXJbaV0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGZvdW
5kID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWZvdW5kKSB7CiAgICAgICAgICAgICAgICBwb3NzaWJsZS
A9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAocG9zc2libGUpIHsKICAgICAgICAgICAgLy8gRm9yIGkgaW4gMC4ubWlkLTEKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IG
kgPCBuIC8gMiAmJiBwb3NzaWJsZTsgaSsrKSB7CiAgICAgICAgICAgICAgICAvLyBXZSB3YW50IHRvIGZpbmQgcGFpcnMgaTEgYW5kIGoxICh1bnVzZWQpIHdpdGggcFtpMV0uZmlyc3QgPT0gcFtqMV0uc2Vjb2
5kCiAgICAgICAgICAgICAgICAvLyBhbmQgYXNzaWduIGFzc2lnbmVkW2ldID0gaTEsIGFzc2lnbmVkW24tMS1pXSA9IGoxCgogICAgICAgICAgICAgICAgLy8gV2UnbGwgdHJ5IGFsbCB1bnVzZWQgcGFpcnMgaT
EKICAgICAgICAgICAgICAgIGJvb2wgZm91bmRfcGFpciA9IGZhbHNlOwogICAgICAgICAgICAgICAgZm9yIChpbnQgaTEgPSAwOyBpMSA8IG47IGkxKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAodXNlZF
9wYWlyW2kxXSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgaW50IHggPSBwW2kxXS5maXJzdDsKICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHVudXNlZCBqMSB3aXRoIHBbajFdLnNlY29uZCA9PS
B4CiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgajEgPSAwOyBqMSA8IG47IGoxKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZWRfcGFpcltqMV0pIGNvbnRpbnVlOwogICAgICAgICAgIC
AgICAgICAgICAgICBpZiAocFtqMV0uc2Vjb25kID09IHgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIG5vdCBzYW1lIGluZGV4CiAgICAgICAgICAgICAgICAgICAgICAgICAgIC
BpZiAoaTEgIT0gajEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZFtpXSA9IGkxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkW24gLSAxIC0gaV0gPS
BqMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkX3BhaXJbaTFdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkX3BhaXJbajFdID0gdHJ1ZTsKICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZF9wYWlyID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgIC
AgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRfcGFpcikgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZi
AoIWZvdW5kX3BhaXIpIHsKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgIC
AgfQoKICAgICAgICBpZiAoIXBvc3NpYmxlKSB7CiAgICAgICAgICAgIGNvdXQgPDwgLTEgPDwgIlxuIjsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBOb3cgYXNzaWduZWQgYX
JyYXkgZ2l2ZXMgdGhlIGluZGljZXMgb2YgcGFpcnMgaW4gcCBhc3NpZ25lZCB0byBwb3NpdGlvbnMgMC4ubi0xCiAgICAgICAgLy8gV2Ugd2FudCB0byBnZXQgZnJvbSBwIG9yaWdpbmFsIG9yZGVyIHRvIGFzc2
lnbmVkIG9yZGVyIGJ5IHN3YXBwaW5nIHBhaXJzCgogICAgICAgIC8vIEVhY2ggc3dhcCBzd2FwcyBwW2ldIGFuZCBwW2pdCgogICAgICAgIC8vIFdlJ2xsIGZpbmQgYSBzZXF1ZW5jZSBvZiBzd2FwcyB0byB0cm
Fuc2Zvcm0gaWRlbnRpdHkgcGVybXV0YXRpb24gdG8gYXNzaWduZWQgcGVybXV0YXRpb24KCiAgICAgICAgdmVjdG9yPGludD4gcG9zX2ludihuKTsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKy
kgcG9zX2ludlthc3NpZ25lZFtpXV0gPSBpOwoKICAgICAgICB2ZWN0b3I8Ym9vbD4gZG9uZShuLCBmYWxzZSk7CiAgICAgICAgdmVjdG9yPHBhaXI8aW50LGludD4+IG9wczsKCiAgICAgICAgZm9yIChpbnQgaS
A9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgaWYgKGRvbmVbaV0gfHwgcG9zX2ludltpXSA9PSBpKSB7CiAgICAgICAgICAgICAgICBkb25lW2ldID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGNvbnRpbn
VlOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBjeWNsZQogICAgICAgICAgICBpbnQgY3VyID0gaTsKICAgICAgICAgICAgd2hpbGUgKCFkb25lW2N1cl0pIHsKICAgICAgICAgICAgICAgIGludCBueH
QgPSBwb3NfaW52W2N1cl07CiAgICAgICAgICAgICAgICBpZiAoY3VyICE9IG54dCkgewogICAgICAgICAgICAgICAgICAgIC8vIHN3YXAgcGFpcnMgYXQgcG9zaXRpb25zIGN1ciBhbmQgbnh0CiAgICAgICAgIC
AgICAgICAgICAgb3BzLmVtcGxhY2VfYmFjayhjdXIgKyAxLCBueHQgKyAxKTsKICAgICAgICAgICAgICAgICAgICBzd2FwKHBvc19pbnZbY3VyXSwgcG9zX2ludltueHRdKTsKICAgICAgICAgICAgICAgICAgIC
Bzd2FwKGFzc2lnbmVkW2N1cl0sIGFzc2lnbmVkW254dF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZG9uZVtjdXJdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGN1ciA9IG54dDsKICAgIC
AgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKChpbnQpb3BzLnNpemUoKSA+IG4pIHsKICAgICAgICAgICAgLy8gbW9yZSB0aGFuIG4gc3dhcHMgbm90IGFsbG93ZWQKICAgICAgICAgICAgY291dCA8PC
AtMSA8PCAiXG4iOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIGNvdXQgPDwgKGludClvcHMuc2l6ZSgpIDw8ICJcbiI7CiAgICAgICAgZm9yIChhdXRvICZvcCA6IG9wcykgewogIC
AgICAgICAgICBjb3V0IDw8IG9wLmZpcnN0IDw8ICIgIiA8PCBvcC5zZWNvbmQgPDwgIlxuIjsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp; tmux wait -
S done
root@d7ee9b094b48:/app#
