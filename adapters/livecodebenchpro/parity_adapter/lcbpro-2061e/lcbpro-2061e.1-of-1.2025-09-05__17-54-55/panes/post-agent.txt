root@d149e84bd87e:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIG
Npbi50aWUobnVsbHB0cik7CiAgICBpbnQgdDsKICAgIGNpbiA+PiB0OwogICAgd2hpbGUgKHQtLSkgewogICAgICAgIGludCBuLCBtLCBrOwogICAgICAgIGNpbiA+PiBuID4+IG0gPj4gazsKICAgICAgICB2ZW
N0b3I8aW50PiBhKG4pOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKSBjaW4gPj4gYVtpXTsKICAgICAgICB2ZWN0b3I8aW50PiBiKG0pOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbT
sgaSsrKSBjaW4gPj4gYltpXTsKCiAgICAgICAgLy8gRm9yIGVhY2ggYV9pLCBmaW5kIHRoZSBiZXN0IEFORCB3aXRoIGFueSBiX2ogKHRoZSBtaW5pbWFsIHZhbHVlKQogICAgICAgIC8vIENhbGN1bGF0ZSB0aG
UgZ2FpbiA9IGFfaSAtIGJlc3RfYW5kX3ZhbHVlCiAgICAgICAgdmVjdG9yPGxvbmcgbG9uZz4gZ2FpbnM7CiAgICAgICAgbG9uZyBsb25nIHN1bV9vcmlnID0gMDsKICAgICAgICBmb3IgKGludCBpID0gMDsgaS
A8IG47IGkrKykgewogICAgICAgICAgICBpbnQgYmVzdCA9IGFbaV07CiAgICAgICAgICAgIGZvciAoaW50IGogPSAwOyBqIDwgbTsgaisrKSB7CiAgICAgICAgICAgICAgICBpbnQgY2FuZCA9IGFbaV0gJiBiW2
pdOwogICAgICAgICAgICAgICAgaWYgKGNhbmQgPCBiZXN0KSBiZXN0ID0gY2FuZDsKICAgICAgICAgICAgfQogICAgICAgICAgICBzdW1fb3JpZyArPSBhW2ldOwogICAgICAgICAgICBpZiAoYmVzdCA8IGFbaV
0pIHsKICAgICAgICAgICAgICAgIGdhaW5zLnB1c2hfYmFjaygobG9uZyBsb25nKWFbaV0gLSBiZXN0KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gU29ydCBnYWlucyBkZXNjZW5kaW5nCi
AgICAgICAgc29ydChnYWlucy5iZWdpbigpLCBnYWlucy5lbmQoKSwgZ3JlYXRlcjxsb25nIGxvbmc+KCkpOwoKICAgICAgICAvLyBXZSBjYW4gZG8gYXQgbW9zdCBrIG9wZXJhdGlvbnMsIGVhY2ggb3BlcmF0aW
9uIHJlZHVjZXMgYSBzaW5nbGUgYV9pIG9uY2UKICAgICAgICAvLyBCdXQgbm90ZTogZnJvbSBwcm9ibGVtIHN0YXRlbWVudCwgZWFjaCBvcGVyYXRpb24gY2FuIGJlIGRvbmUgb24gYW55IGksaiwKICAgICAgIC
AvLyBidXQgd2UgY2FuIGRvIG11bHRpcGxlIG9wZXJhdGlvbnMgb24gdGhlIHNhbWUgZWxlbWVudCB3aXRoIGRpZmZlcmVudCBiX2ouCiAgICAgICAgLy8gSG93ZXZlciwgbm90ZSB0aGF0IGFwcGx5aW5nIG11bH
RpcGxlIG9wZXJhdGlvbnMgb24gdGhlIHNhbWUgZWxlbWVudCBjYW4gb25seSBBTkQgaXQgYWdhaW4sCiAgICAgICAgLy8gd2UgbmVlZCB0byBjb25zaWRlciB0aGF0IGNhcmVmdWxseS4KCiAgICAgICAgLy8gVG
hlIHByb2JsZW0gc3RhdGVzIGF0IG1vc3QgayBvcGVyYXRpb25zLCBlYWNoIG9wZXJhdGlvbiBwaWNrcyBpLGogYW5kIGFfaSA9IGFfaSAmIGJfai4KICAgICAgICAvLyBXZSB3YW50IHRvIG1pbmltaXplIHN1bS
BvZiBhIGFmdGVyIGF0IG1vc3QgayBvcGVyYXRpb25zLgoKICAgICAgICAvLyBTaW5jZSBhcHBseWluZyBtdWx0aXBsZSBBTkRzIGlzIGVxdWl2YWxlbnQgdG8gQU5EaW5nIGFsbCBjaG9zZW4gYl9qIGZvciB0aG
F0IGVsZW1lbnQuCiAgICAgICAgLy8gV2Ugd2FudCB0byBjaG9vc2UgZm9yIGVhY2ggZWxlbWVudCBhIG1hc2sgPSBhX2kgJiAoQU5EIG9mIHNvbWUgc3Vic2V0IG9mIGJfaiksCiAgICAgICAgLy8gbnVtYmVyIG
9mIG9wZXJhdGlvbnMgPSBzdW0gb2Ygc2l6ZXMgb2Ygc3Vic2V0cyBjaG9zZW4gZm9yIGVhY2ggZWxlbWVudCA8PSBrLgoKICAgICAgICAvLyBTaW5jZSBtIDw9IDEwLCB3ZSBjYW4gdHJ5IGFsbCBzdWJzZXRzIG
9mIGJfaiAodGhlcmUgYXJlIHVwIHRvIDJebSA9IDEwMjQpIHRvIGZpbmQgYmVzdCB2YWx1ZSBmb3IgZWFjaCBlbGVtZW50IHdpdGggYSBjZXJ0YWluIG51bWJlciBvZiBvcGVyYXRpb25zIChlcXVhbCB0byBzdW
JzZXQgc2l6ZSkuCgogICAgICAgIC8vIEZvciBlYWNoIGVsZW1lbnQsIHByZWNvbXB1dGU6CiAgICAgICAgLy8gZm9yIGVhY2ggc3Vic2V0IG1hc2sgb2YgYl9qOiB2YWwgPSBhW2ldICYgKEFORCBvZiBiX2ogaW
4gc3Vic2V0KSwgY29zdCA9IHN1YnNldCBzaXplCiAgICAgICAgLy8gV2Ugd2FudCB0byBhc3NpZ24gYSBzdWJzZXQgdG8gZWFjaCBlbGVtZW50IHN1Y2ggdGhhdCB0b3RhbCBjb3N0IDw9IGsgYW5kIHN1bSBvZi
BhbGwgdmFscyBpcyBtaW5pbWl6ZWQuCgogICAgICAgIC8vIFRoaXMgaXMgYSBrbmFwc2Fjay1saWtlIHByb2JsZW06IG1pbmltaXplIHN1bSB2YWxzLCBjb3N0ID0gbnVtYmVyIG9mIG9wZXJhdGlvbnMKCiAgIC
AgICAgLy8gU2luY2Ugc3VtIG9mIG4gdXAgdG8gMWU1IGFuZCBtPTEwLCB3ZSBjYW5ub3QgdHJ5IGFsbCBzdWJzZXRzIGZvciBhbGwgZWxlbWVudHMgZGlyZWN0bHkuCgogICAgICAgIC8vIEFsdGVybmF0aXZlOi
BGb3IgZWFjaCBlbGVtZW50LCBrZWVwIGZvciBlYWNoIGNvc3QgYyAoMC4ubSkgdGhlIG1pbmltYWwgdmFsdWUgYWNoaWV2YWJsZSBieSBBTkRpbmcgYW55IHN1YnNldCBvZiBiX2ogd2l0aCBzaXplIGMKICAgIC
AgICAvLyBUaGVuLCB3ZSB3YW50IHRvIHBpY2sgZm9yIGVhY2ggZWxlbWVudCBhIGNvc3QgY19pIGFuZCBzdW0gY19pIDw9IGssIG1pbmltaXppbmcgc3VtIG9mIG1pbmltYWwgdmFsdWVzCgogICAgICAgIC8vIF
RoaXMgaXMgYSBjbGFzc2ljYWwgRFAgcHJvYmxlbSBvdmVyIG4gZWxlbWVudHMgYW5kIGsgb3BlcmF0aW9ucy4KCiAgICAgICAgLy8gQnV0IGsgY2FuIGJlIHVwIHRvIG4qbSAobWF4IDFlNiksIHRvbyBsYXJnZS
Bmb3IgTyhuKmspCgogICAgICAgIC8vIExldCdzIHRyeSBhIGdyZWVkeSBhcHByb2FjaDoKICAgICAgICAvLyBGb3IgZWFjaCBlbGVtZW50LCB3ZSBrbm93IHRoZSBtaW5pbWFsIHZhbHVlIGZvciBzdWJzZXRzIG
9mIHNpemUgMC4ubS4KICAgICAgICAvLyBUaGUgY29zdCAwIG1lYW5zIG5vIG9wZXJhdGlvbiwgdmFsdWUgPSBhW2ldLgogICAgICAgIC8vIEZvciBjb3N0IDEuLm0sIG1pbmltYWwgdmFsdWUgaXMgdGhlIGJlc3
QgQU5EIHdpdGggYW55IHN1YnNldCBvZiBzaXplIGNvc3QuCgogICAgICAgIC8vIEZvciBlYWNoIGVsZW1lbnQsIGNvbXB1dGUgZ2FpbiA9IGFbaV0gLSBtaW5pbWFsIHZhbHVlIGZvciBlYWNoIGNvc3QgYy4KIC
AgICAgICAvLyBXZSB3YW50IHRvIHBpY2sgdGhlIGNvc3QgY19pIHRoYXQgbWF4aW1pemVzIGdhaW4gcGVyIGNvc3QuCgogICAgICAgIC8vIFNpbXBsaWZ5OiBGb3IgZWFjaCBlbGVtZW50LCBwaWNrIHRoZSBjb3
N0IGNfaSB3aXRoIG1heGltYWwgKGdhaW4gLyBjb3N0KSwgdGhlbiBzb3J0IGFsbCBnYWlucy9jb3N0IGJ5IHJhdGlvIGFuZCBwaWNrIGJlc3QgdW50aWwgayBvcGVyYXRpb25zIHVzZWQuCgogICAgICAgIC8vIF
NpbmNlIG0gaXMgc21hbGwsIHdlIGNhbiBmb3IgZWFjaCBlbGVtZW50IHBpY2sgdGhlIGJlc3QgZ2Fpbi9jb3N0IHJhdGlvIGFtb25nIHN1YnNldHMuCgogICAgICAgIC8vIEltcGxlbWVudGF0aW9uOgogICAgIC
AgIC8vIFByZWNvbXB1dGUgZm9yIGVhY2ggc3Vic2V0IG9mIGJfaiB0aGUgQU5EIG1hc2sgYW5kIHNpemUuCiAgICAgICAgLy8gRm9yIGVhY2ggZWxlbWVudCwgZmluZCBtaW5pbWFsIHZhbHVlcyBmb3IgZWFjaC
Bjb3N0IChzdWJzZXQgc2l6ZSkuCgogICAgICAgIC8vIEZpbmFsbHksIGNhbGN1bGF0ZSB0aGUgYmVzdCBnYWluL2Nvc3QgcmF0aW8gZm9yIGVhY2ggZWxlbWVudC4KCiAgICAgICAgLy8gTGV0J3MgaW1wbGVtZW
50IHRoaXMgbm93OgoKICAgICAgICBpbnQgbGltID0gMSA8PCBtOwogICAgICAgIHZlY3RvcjxpbnQ+IHN1YnNldF9hbmQobGltLCAoMSA8PCAzMCkgLSAxKTsKICAgICAgICB2ZWN0b3I8aW50PiBzdWJzZXRfc2
l6ZShsaW0sIDApOwoKICAgICAgICBmb3IgKGludCBtYXNrID0gMTsgbWFzayA8IGxpbTsgbWFzaysrKSB7CiAgICAgICAgICAgIGludCBsb3dlc3RfYml0ID0gbWFzayAmICgtbWFzayk7CiAgICAgICAgICAgIG
ludCBiaXRfcG9zID0gX19idWlsdGluX2N0eihsb3dlc3RfYml0KTsKICAgICAgICAgICAgc3Vic2V0X2FuZFttYXNrXSA9IHN1YnNldF9hbmRbbWFzayBeIGxvd2VzdF9iaXRdICYgYltiaXRfcG9zXTsKICAgIC
AgICAgICAgc3Vic2V0X3NpemVbbWFza10gPSBzdWJzZXRfc2l6ZVttYXNrIF4gbG93ZXN0X2JpdF0gKyAxOwogICAgICAgIH0KICAgICAgICBzdWJzZXRfYW5kWzBdID0gKDEgPDwgMzApIC0gMTsgLy8gbm8gQU
5EIGFwcGxpZWQKICAgICAgICBzdWJzZXRfc2l6ZVswXSA9IDA7CgogICAgICAgIC8vIEZvciBlYWNoIGVsZW1lbnQsIG1pbmltYWwgdmFsdWUgZm9yIGVhY2ggY29zdCAwLi5tCiAgICAgICAgLy8gaW5pdGlhbG
l6ZSB3aXRoIGFbaV0gZm9yIGNvc3Q9MCBhbmQgbGFyZ2UgZm9yIG90aGVycwogICAgICAgIHZlY3Rvcjx2ZWN0b3I8aW50Pj4gZHBfbWluKG4sIHZlY3RvcjxpbnQ+KG0gKyAxLCBJTlRfTUFYKSk7CiAgICAgIC
AgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgZHBfbWluW2ldWzBdID0gYVtpXTsKICAgICAgICB9CgogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKSB7CiAgICAgIC
AgICAgIC8vIEZvciBhbGwgc3Vic2V0cwogICAgICAgICAgICBmb3IgKGludCBtYXNrID0gMTsgbWFzayA8IGxpbTsgbWFzaysrKSB7CiAgICAgICAgICAgICAgICBpbnQgYyA9IHN1YnNldF9zaXplW21hc2tdOw
ogICAgICAgICAgICAgICAgaW50IHZhbCA9IGFbaV0gJiBzdWJzZXRfYW5kW21hc2tdOwogICAgICAgICAgICAgICAgaWYgKHZhbCA8IGRwX21pbltpXVtjXSkgZHBfbWluW2ldW2NdID0gdmFsOwogICAgICAgIC
AgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBGb3IgZWFjaCBlbGVtZW50LCBmb3IgYyBpbiBbMS4ubV0sIGNoZWNrIGlmIGRwX21pbltpXVtjXSBjYW4gYmUgaW1wcm92ZWQgYnkgc21hbGxlciBjIChzaW5jZS
BtdWx0aXBsZSBvcGVyYXRpb25zIG9uIHNhbWUgZWxlbWVudCBub3QgZm9yYmlkZGVuKQogICAgICAgIC8vIEFjdHVhbGx5LCBubyBuZWVkLCBkcF9taW5baV1bY10gYWxyZWFkeSBtaW5pbWFsIGZvciB0aGF0IG
Nvc3QKCiAgICAgICAgLy8gRm9yIGVhY2ggZWxlbWVudCwgZmluZCB0aGUgYmVzdCBnYWluL2Nvc3QgcmF0aW8KICAgICAgICBzdHJ1Y3QgSXRlbSB7CiAgICAgICAgICAgIGxvbmcgbG9uZyBnYWluOwogICAgIC
AgICAgICBpbnQgY29zdDsKICAgICAgICB9OwogICAgICAgIHZlY3RvcjxJdGVtPiBpdGVtczsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykgewogICAgICAgICAgICAvLyBubyBvcGVyYXRpb2
4gZ2FpbiA9IDAKICAgICAgICAgICAgbG9uZyBsb25nIGJlc3RfZ2FpbiA9IDA7CiAgICAgICAgICAgIGludCBiZXN0X2Nvc3QgPSAwOwogICAgICAgICAgICBmb3IgKGludCBjID0gMTsgYyA8PSBtOyBjKyspIH
sKICAgICAgICAgICAgICAgIGlmIChkcF9taW5baV1bY10gPT0gSU5UX01BWCkgY29udGludWU7CiAgICAgICAgICAgICAgICBsb25nIGxvbmcgZ2FpbiA9IChsb25nIGxvbmcpYVtpXSAtIGRwX21pbltpXVtjXT
sKICAgICAgICAgICAgICAgIGlmIChnYWluID4gMCkgewogICAgICAgICAgICAgICAgICAgIC8vIG1heGltaXplIGdhaW4vY29zdCByYXRpbwogICAgICAgICAgICAgICAgICAgIC8vIGJ1dCB3ZSB3aWxsIHNvcn
QgYnkgZ2Fpbi9jb3N0CiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgZ2FpbiBhbmQgY29zdAogICAgICAgICAgICAgICAgICAgIGlmIChiZXN0X2Nvc3QgPT0gMCB8fCBnYWluICogYmVzdF9jb3N0ID4gYm
VzdF9nYWluICogYykgewogICAgICAgICAgICAgICAgICAgICAgICBiZXN0X2dhaW4gPSBnYWluOwogICAgICAgICAgICAgICAgICAgICAgICBiZXN0X2Nvc3QgPSBjOwogICAgICAgICAgICAgICAgICAgIH0KIC
AgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYmVzdF9jb3N0ID4gMCkgewogICAgICAgICAgICAgICAgaXRlbXMucHVzaF9iYWNrKHtiZXN0X2dhaW4sIGJlc3RfY29zdH0pOw
ogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBTb3J0IGl0ZW1zIGJ5IGdhaW4vY29zdCByYXRpbyBkZXNjZW5kaW5nCiAgICAgICAgc29ydChpdGVtcy5iZWdpbigpLCBpdGVtcy5lbmQoKSwgW1
0oY29uc3QgSXRlbSAmYSwgY29uc3QgSXRlbSAmYikgewogICAgICAgICAgICByZXR1cm4gYS5nYWluICogYi5jb3N0ID4gYi5nYWluICogYS5jb3N0OwogICAgICAgIH0pOwoKICAgICAgICBsb25nIGxvbmcgc3
VtID0gc3VtX29yaWc7CiAgICAgICAgaW50IHVzZWRfb3BzID0gMDsKICAgICAgICBmb3IgKGF1dG8gJml0IDogaXRlbXMpIHsKICAgICAgICAgICAgaWYgKHVzZWRfb3BzICsgaXQuY29zdCA8PSBrKSB7CiAgIC
AgICAgICAgICAgICBzdW0gLT0gaXQuZ2FpbjsKICAgICAgICAgICAgICAgIHVzZWRfb3BzICs9IGl0LmNvc3Q7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBwYXJ0aWFsIHVzYWdlIG
5vdCBhbGxvd2VkIChtdXN0IGFwcGx5IGZ1bGwgc3Vic2V0KQogICAgICAgICAgICAgICAgLy8gc28gc2tpcAogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG
NvdXQgPDwgc3VtIDw8ICJcbiI7CiAgICB9CiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp; tmux wait -S done
root@d149e84bd87e:/app#
