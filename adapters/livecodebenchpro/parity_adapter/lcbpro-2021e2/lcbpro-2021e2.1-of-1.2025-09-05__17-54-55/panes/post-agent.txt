root@30cced0cb835:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgovLyBEaXNqb2ludCBTZXQgVW5pb24gKFVuaW9uIEZpbmQpIHN0cnVjdHVyZQpzdHJ1Y3
QgRFNVIHsKICAgIHZlY3RvcjxpbnQ+IHBhcmVudCwgc2l6ZTsKICAgIERTVShpbnQgbikgOiBwYXJlbnQobiksIHNpemUobiwgMSkgewogICAgICAgIGlvdGEocGFyZW50LmJlZ2luKCksIHBhcmVudC5lbmQoKS
wgMCk7CiAgICB9CiAgICBpbnQgZmluZChpbnQgYSkgewogICAgICAgIHdoaWxlIChwYXJlbnRbYV0gIT0gYSkgYSA9IHBhcmVudFthXTsKICAgICAgICByZXR1cm4gYTsKICAgIH0KICAgIGJvb2wgdW5pdGUoaW
50IGEsIGludCBiKSB7CiAgICAgICAgYSA9IGZpbmQoYSk7CiAgICAgICAgYiA9IGZpbmQoYik7CiAgICAgICAgaWYgKGEgPT0gYikgcmV0dXJuIGZhbHNlOwogICAgICAgIGlmIChzaXplW2FdIDwgc2l6ZVtiXS
kgc3dhcChhLCBiKTsKICAgICAgICBwYXJlbnRbYl0gPSBhOwogICAgICAgIHNpemVbYV0gKz0gc2l6ZVtiXTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfTsKCmludCBtYWluKCkgewogICAgaW9zOjpzeW
5jX3dpdGhfc3RkaW8oZmFsc2UpOwogICAgY2luLnRpZShudWxscHRyKTsKCiAgICBpbnQgdDsKICAgIGNpbiA+PiB0OwogICAgd2hpbGUgKHQtLSkgewogICAgICAgIGludCBuLCBtLCBwOwogICAgICAgIGNpbi
A+PiBuID4+IG0gPj4gcDsKICAgICAgICB2ZWN0b3I8aW50PiBuZWVkKHApOwogICAgICAgIHZlY3Rvcjxib29sPiBpc19uZWVkKG4sIGZhbHNlKTsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHA7IGkrKy
kgewogICAgICAgICAgICBjaW4gPj4gbmVlZFtpXTsKICAgICAgICAgICAgbmVlZFtpXS0tOwogICAgICAgICAgICBpc19uZWVkW25lZWRbaV1dID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIHZlY3Rvcjx0dX
BsZTxpbnQsaW50LGludD4+IGVkZ2VzKG0pOwogICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbTsgaSsrKSB7CiAgICAgICAgICAgIGludCB1LCB2LCB3OwogICAgICAgICAgICBjaW4gPj4gdSA+PiB2ID4+IH
c7CiAgICAgICAgICAgIHUtLSwgdi0tOwogICAgICAgICAgICBlZGdlc1tpXSA9IHt3LCB1LCB2fTsKICAgICAgICB9CgogICAgICAgIC8vIFNvcnQgZWRnZXMgYnkgd2VpZ2h0IGFzY2VuZGluZyBmb3IgYnVpbG
RpbmcgTVNUCiAgICAgICAgc29ydChlZGdlcy5iZWdpbigpLCBlZGdlcy5lbmQoKSk7CgogICAgICAgIC8vIEJ1aWxkIE1TVCB1c2luZyBLcnVza2FsCiAgICAgICAgRFNVIGRzdShuKTsKICAgICAgICB2ZWN0b3
I8dmVjdG9yPHBhaXI8aW50LGludD4+PiBhZGoobik7CiAgICAgICAgZm9yIChhdXRvICZbdyx1LHZdIDogZWRnZXMpIHsKICAgICAgICAgICAgaWYgKGRzdS51bml0ZSh1LHYpKSB7CiAgICAgICAgICAgICAgIC
BhZGpbdV0uZW1wbGFjZV9iYWNrKHYsdyk7CiAgICAgICAgICAgICAgICBhZGpbdl0uZW1wbGFjZV9iYWNrKHUsdyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIFdlIHdhbnQgdG8gcGFydG
l0aW9uIE1TVCBpbnRvIGsgY29ubmVjdGVkIGNvbXBvbmVudHMgYnkgcmVtb3ZpbmcgZWRnZXMgd2l0aCBsYXJnZXN0IHdlaWdodHMKICAgICAgICAvLyBGb3Igaz0xIHRvIG4sIG1pbmltYWwgdG90YWwgbGF0ZW
5jeSBpcyBzdW0gb3ZlciBuZWVkZWQgaG91c2VzIG9mIG1heCBlZGdlIGxhdGVuY3kgb24gcGF0aCB0byBjbG9zZXN0IHNlcnZlcgogICAgICAgIC8vIFRoZSBiZXN0IHNlcnZlcnMgcGxhY2VtZW50IGZvciBlYW
NoIGsgY29ycmVzcG9uZHMgdG8gY2hvb3NpbmcgayBjbHVzdGVycyBmb3JtZWQgYnkgcmVtb3ZpbmcgZWRnZXMgd2l0aCBsYXJnZXN0IHdlaWdodHMKCiAgICAgICAgLy8gQ29sbGVjdCBNU1QgZWRnZXMgd2l0aC
B3ZWlnaHRzLCBmb3IgcGFydGl0aW9uaW5nCiAgICAgICAgLy8gV2Ugd2lsbCBzb3J0IE1TVCBlZGdlcyBieSB3ZWlnaHQgZGVzY2VuZGluZwogICAgICAgIHZlY3Rvcjx0dXBsZTxpbnQsaW50LGludD4+IG1zdE
VkZ2VzOwogICAgICAgIGZvcihpbnQgdT0wOyB1PG47IHUrKykgewogICAgICAgICAgICBmb3IoYXV0byAmW3Ysd106IGFkalt1XSkgewogICAgICAgICAgICAgICAgaWYgKHUgPCB2KSBtc3RFZGdlcy5lbXBsYW
NlX2JhY2sodyx1LHYpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHNvcnQobXN0RWRnZXMucmJlZ2luKCksIG1zdEVkZ2VzLnJlbmQoKSk7CgogICAgICAgIC8vIEluaXRpYWxseSwgYWxsIG5vZG
VzIGNvbm5lY3RlZCwgc28gMSBjbHVzdGVyCiAgICAgICAgLy8gV2Ugd2lsbCByZW1vdmUgTVNUIGVkZ2VzIGluIGRlc2NlbmRpbmcgb3JkZXIgb2Ygd2VpZ2h0IHRvIGdldCBtb3JlIGNsdXN0ZXJzCiAgICAgIC
AgRFNVIGNsdXN0ZXJEU1Uobik7CgogICAgICAgIC8vIEluaXRpYWxseSBhbGwgbm9kZXMgaW4gb25lIGNsdXN0ZXIKICAgICAgICAvLyBGb3IgZWFjaCBjbHVzdGVyIGtlZXAgdHJhY2sgb2YgaG93IG1hbnkgbm
VlZGVkIG5vZGVzIGl0IGNvbnRhaW5zLCBhbmQgc3VtIG9mIGxhdGVuY2llcyBmb3IgdGhlbQogICAgICAgIC8vIFdlJ2xsIG1haW50YWluIGZvciBlYWNoIGNsdXN0ZXI6CiAgICAgICAgLy8gLSBjb3VudCBvZi
BuZWVkZWQgbm9kZXMKICAgICAgICAvLyAtIHN1bSBvZiBsYXRlbmN5IHRvIHNlcnZlciAobGF0ZW5jeSA9IG1heCBlZGdlIG9uIHBhdGggdG8gc2VydmVyKQoKICAgICAgICAvLyBXaGVuIHdlIHJlbW92ZSBlZG
dlcywgY2x1c3RlcnMgc3BsaXQgYW5kIGxhdGVuY3kgZGVjcmVhc2VzIGZvciBuZWVkZWQgbm9kZXMgY29ubmVjdGVkIHRvIHNlcnZlcnMKCiAgICAgICAgLy8gV2UnbGwgc3RvcmUgY2x1c3RlcnMgYW5kIHRoZW
lyIG5lZWRlZCBub2RlcyBjb3VudAogICAgICAgIC8vIEFmdGVyIHJlbW92aW5nIGVkZ2VzLCBzZXJ2ZXJzIGNhbiBiZSBwbGFjZWQgaW4gZWFjaCBjbHVzdGVyIGF0IHRoZSBob3VzZSB0aGF0IG1pbmltaXplcy
B0b3RhbCBsYXRlbmN5CiAgICAgICAgLy8gSW4gYSB0cmVlLCBwbGFjaW5nIHNlcnZlciBhdCBuZWVkZWQgbm9kZXMgbWluaW1pemVzIGxhdGVuY3kgdG8gemVybyBmb3IgdGhhdCBub2RlCiAgICAgICAgCiAgIC
AgICAgLy8gQnV0IHByb2JsZW0gc3RhdGVzIGxhdGVuY3kgZm9yIGhvdXNlID0gbWF4IGVkZ2UgbGF0ZW5jeSBvbiBwYXRoIHRvIHNlcnZlcgogICAgICAgIC8vIElmIHNlcnZlciBhdCBub2RlIGl0c2VsZiwgbG
F0ZW5jeSA9IDAKICAgICAgICAKICAgICAgICAvLyBPYnNlcnZhdGlvbjoKICAgICAgICAvLyBGb3IgZWFjaCBjbHVzdGVyLCBwbGFjaW5nIHNlcnZlciBhdCBhbGwgbmVlZGVkIG5vZGVzIGluIGNsdXN0ZXIgcm
VzdWx0cyBpbiBsYXRlbmN5IDAgZm9yIHRob3NlIG5vZGVzLgogICAgICAgIC8vIEJ1dCB3ZSBhcmUgbGltaXRlZCB0byBrIHNlcnZlcnMgdG90YWwuCgogICAgICAgIC8vIEhvd2V2ZXIsIHByb2JsZW0gc3RhdG
VzIHVwIHRvIGsgc2VydmVycyBhbGxvd2VkLCBzbyBmb3IgayA+PSBudW1iZXIgb2YgY2x1c3RlcnMsIG1pbmltYWwgdG90YWwgbGF0ZW5jeSBpcyAwLgoKICAgICAgICAvLyBUaGUgbWluaW1hbCB0b3RhbCBsYX
RlbmN5IGZvciBrIHNlcnZlcnMgY29ycmVzcG9uZHMgdG8gc3VtIG9mIG5lZWRlZCBub2RlcyBsYXRlbmNpZXMgaW4gY2x1c3RlcnMgZm9ybWVkIGJ5IHJlbW92aW5nIGstMSBoZWF2aWVzdCBNU1QgZWRnZXMuCg
ogICAgICAgIC8vIFNvIHdlIHNpbXVsYXRlIHJlbW92aW5nIDAgdG8gbi0xIGVkZ2VzIGZyb20gbXN0RWRnZXMgKGhlYXZpZXN0IGZpcnN0KSwgd2hpY2ggaW5jcmVhc2VzIGNsdXN0ZXIgY291bnQgZnJvbSAxIH
RvIG4KCiAgICAgICAgLy8gRm9yIGVhY2ggY2x1c3RlciwgY291bnQgbmVlZGVkIG5vZGVzCiAgICAgICAgdmVjdG9yPGludD4gY2x1c3Rlck5lZWRlZENvdW50KG4sMCk7CiAgICAgICAgZm9yKGludCBpPTA7IG
k8bjsgaSsrKSB7CiAgICAgICAgICAgIGlmKGlzX25lZWRbaV0pIGNsdXN0ZXJOZWVkZWRDb3VudFtpXSA9IDE7CiAgICAgICAgfQoKICAgICAgICAvLyBJbml0aWFsbHkgY2x1c3RlcnMgYXJlIHNpbmdsZSBub2
RlcwogICAgICAgIC8vIFdlJ2xsIG1lcmdlIGNsdXN0ZXJzIHdoaWxlIGFkZGluZyBNU1QgZWRnZXMgaW4gaW5jcmVhc2luZyBvcmRlciAodG8gcmVidWlsZCBNU1QpCiAgICAgICAgRFNVIHJldkRTVShuKTsKCi
AgICAgICAgLy8gVG8gcHJlcGFyZSBmb3IgcmVtb3ZhbCBzaW11bGF0aW9uLCB3ZSB3aWxsIHByb2Nlc3MgZWRnZXMgZnJvbSBzbWFsbGVzdCB0byBsYXJnZXN0CiAgICAgICAgLy8gQnV0IHdlIHdhbnQgdG8gc2
ltdWxhdGUgcmVtb3ZpbmcgZWRnZXMgZnJvbSBsYXJnZXN0IHRvIHNtYWxsZXN0CgogICAgICAgIC8vIFdlJ2xsIHByb2Nlc3MgZWRnZXMgaW4gYXNjZW5kaW5nIG9yZGVyLCBhZGRpbmcgZWRnZXMgYW5kIG1lcm
dpbmcgY2x1c3RlcnMKICAgICAgICAvLyBBZnRlciBhbGwgZWRnZXMgYWRkZWQsIDEgY2x1c3RlcgoKICAgICAgICAvLyBXZSB3YW50IHRvIGZpbmQgbWluaW1hbCBsYXRlbmN5IGZvciBrPTEsLi4sbgogICAgIC
AgIC8vIGxhdGVuY3kgZm9yIGs9MTogc3VtIG9mIGRpc3RhbmNlcyBmcm9tIGFsbCBuZWVkZWQgbm9kZXMgdG8gb25lIHNlcnZlciBtaW5pbWl6aW5nIHRvdGFsIGxhdGVuY3kKICAgICAgICAvLyBGb3IgayA+PS
BjbHVzdGVycyBjb3VudCwgbGF0ZW5jeSA9IDAKCiAgICAgICAgLy8gSW5zdGVhZCwgd2UgdXNlIHRoZSBmb2xsb3dpbmcgYXBwcm9hY2g6CiAgICAgICAgLy8gU29ydCBNU1QgZWRnZXMgYXNjZW5kaW5nLCBhbm
QgcHJvY2VzcyBmcm9tIDAgY2x1c3RlcnMgKGFsbCBub2RlcyBzZXBhcmF0ZSkgdG8gMSBjbHVzdGVyIChhbGwgY29ubmVjdGVkKQogICAgICAgIAogICAgICAgIC8vIFByZXBhcmUgYW5zd2VyIGFycmF5OgogIC
AgICAgIHZlY3Rvcjxsb25nIGxvbmc+IGFucyhuKzEsMCk7CgogICAgICAgIC8vIEluaXRpYWxseSwgbiBjbHVzdGVycywgZWFjaCBub2RlIGFsb25lCiAgICAgICAgLy8gRWFjaCBjbHVzdGVyIGxhdGVuY3kgc3
VtIGlzIDAgKHNlcnZlciBhdCBuZWVkZWQgbm9kZSBvciBubyBuZWVkZWQgbm9kZXMpCiAgICAgICAgLy8gVG90YWwgbGF0ZW5jeSA9IDAKCiAgICAgICAgLy8gV2Ugd2lsbCBtZXJnZSBjbHVzdGVycyBieSBhZG
RpbmcgZWRnZXMgZnJvbSBzbWFsbGVzdCB0byBsYXJnZXN0IHdlaWdodAogICAgICAgIC8vIFdoZW4gdHdvIGNsdXN0ZXJzIG1lcmdlLCB0aGUgbGF0ZW5jeSBmb3IgbmVlZGVkIG5vZGVzIGluIG1lcmdlZCBjbH
VzdGVyIGNhbiBpbmNyZWFzZQogICAgICAgIC8vIEJlY2F1c2UgbWF4IGVkZ2UgbGF0ZW5jeSBpbiBjbHVzdGVyIGluY3JlYXNlcyAodGhlIG5ldyBlZGdlIHdlaWdodCkKCiAgICAgICAgLy8gU28gaW5pdGlhbG
x5LCBhbGwgY2x1c3RlcnMgaGF2ZSBsYXRlbmN5ID0gMAogICAgICAgIC8vIEFmdGVyIG1lcmdpbmcgY2x1c3RlcnMgd2l0aCBlZGdlIHdlaWdodCB3LCB0aGUgbWF4IGxhdGVuY3kgaW4gbWVyZ2VkIGNsdXN0ZX
IgaXMgbWF4IG9mIHByZXZpb3VzIGxhdGVuY3kgYW5kIHcKCiAgICAgICAgLy8gVG8gc29sdmUgZWZmaWNpZW50bHksIHdlIHRyYWNrIGZvciBlYWNoIGNsdXN0ZXI6CiAgICAgICAgLy8gLSBudW1iZXIgb2Ygbm
VlZGVkIG5vZGVzCiAgICAgICAgLy8gLSBtYXggbGF0ZW5jeSAobWF4aW11bSBlZGdlIHdlaWdodCBpbiBjbHVzdGVyKQoKICAgICAgICAvLyBXaGVuIG1lcmdlIGNsdXN0ZXJzIGEgYW5kIGIgYnkgZWRnZSB3ZW
lnaHQgdzoKICAgICAgICAvLyBsYXRlbmN5IG9mIG1lcmdlZCBjbHVzdGVyID0gbWF4KGxhdGVuY3lfYSwgbGF0ZW5jeV9iLCB3KQoKICAgICAgICAvLyBXZSdsbCBrZWVwIHN1bSBvZiBsYXRlbmN5IG92ZXIgYW
xsIG5lZWRlZCBub2RlcyBhY3Jvc3MgY2x1c3RlcnMKCiAgICAgICAgLy8gSW5pdGlhbGx5LCBlYWNoIGNsdXN0ZXIgbGF0ZW5jeSA9IDAKICAgICAgICAvLyBTdW0gbGF0ZW5jeSA9IDAKCiAgICAgICAgLy8gRm
9yIGsgY2x1c3RlcnMsIHRvdGFsIGxhdGVuY3kgPSBzdW0gb2YgY2x1c3RlciBsYXRlbmN5ICogY2x1c3RlciBuZWVkZWQgbm9kZXMKCiAgICAgICAgLy8gV2hlbiBjbHVzdGVycyBtZXJnZToKICAgICAgICAvLy
B0b3RhbCBsYXRlbmN5IGRlY3JlYXNlcyBieSBvbGQgbGF0ZW5jaWVzIGFuZCBpbmNyZWFzZXMgYnkgbmV3IGxhdGVuY3kgKiB0b3RhbCBuZWVkZWQgbm9kZXMKCiAgICAgICAgLy8gV2UnbGwgc3RvcmUgY2x1c3
RlciBkYXRhIGluIERTVSBzdHJ1Y3R1cmUKCiAgICAgICAgc3RydWN0IENsdXN0ZXJEU1UgewogICAgICAgICAgICB2ZWN0b3I8aW50PiBwYXJlbnQsIHNpemUsIG5lZWRDb3VudDsKICAgICAgICAgICAgdmVjdG
9yPGxvbmcgbG9uZz4gbGF0ZW5jeTsKICAgICAgICAgICAgQ2x1c3RlckRTVShpbnQgbikgOiBwYXJlbnQobiksIHNpemUobiwxKSwgbmVlZENvdW50KG4sMCksIGxhdGVuY3kobiwwKSB7CiAgICAgICAgICAgIC
AgICBpb3RhKHBhcmVudC5iZWdpbigpLCBwYXJlbnQuZW5kKCksIDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGludCBmaW5kKGludCBhKSB7CiAgICAgICAgICAgICAgICB3aGlsZSAocGFyZW50W2FdIC
E9IGEpIGEgPSBwYXJlbnRbYV07CiAgICAgICAgICAgICAgICByZXR1cm4gYTsKICAgICAgICAgICAgfQogICAgICAgICAgICBib29sIHVuaXRlKGludCBhLCBpbnQgYiwgaW50IHcsIGxvbmcgbG9uZyAmdG90YW
xMYXRlbmN5KSB7CiAgICAgICAgICAgICAgICBhID0gZmluZChhKTsKICAgICAgICAgICAgICAgIGIgPSBmaW5kKGIpOwogICAgICAgICAgICAgICAgaWYgKGEgPT0gYikgcmV0dXJuIGZhbHNlOwogICAgICAgIC
AgICAgICAgaWYgKHNpemVbYV0gPCBzaXplW2JdKSBzd2FwKGEsYik7CgogICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG9sZCBsYXRlbmN5IGNvbnRyaWJ1dGlvbgogICAgICAgICAgICAgICAgdG90YWxMYXRlbm
N5IC09IGxhdGVuY3lbYV0gKiBuZWVkQ291bnRbYV07CiAgICAgICAgICAgICAgICB0b3RhbExhdGVuY3kgLT0gbGF0ZW5jeVtiXSAqIG5lZWRDb3VudFtiXTsKCiAgICAgICAgICAgICAgICBwYXJlbnRbYl0gPS
BhOwogICAgICAgICAgICAgICAgc2l6ZVthXSArPSBzaXplW2JdOwogICAgICAgICAgICAgICAgbmVlZENvdW50W2FdICs9IG5lZWRDb3VudFtiXTsKICAgICAgICAgICAgICAgIGxhdGVuY3lbYV0gPSBtYXgoe2
xhdGVuY3lbYV0sIGxhdGVuY3lbYl0sIChsb25nIGxvbmcpd30pOwoKICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgbGF0ZW5jeSBjb250cmlidXRpb24KICAgICAgICAgICAgICAgIHRvdGFsTGF0ZW5jeSArPS
BsYXRlbmN5W2FdICogbmVlZENvdW50W2FdOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBDbHVzdGVyRFNVIGNkc3Uobik7CiAgICAgICAgZm
9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgY2RzdS5uZWVkQ291bnRbaV0gPSBpc19uZWVkW2ldID8gMSA6IDA7CiAgICAgICAgfQoKICAgICAgICBsb25nIGxvbmcgdG90YWxMYXRlbm
N5ID0gMDsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykgewogICAgICAgICAgICAvLyBsYXRlbmN5IDAgKiBuZWVkQ291bnQKICAgICAgICB9CgogICAgICAgIC8vIE51bWJlciBvZiBjbHVzdG
VycyBpbml0aWFsbHkgbgogICAgICAgIC8vIEZvciBrID0gbiBkb3duIHRvIDE6CiAgICAgICAgLy8gV2UnbGwgbWVyZ2UgZWRnZXMgZnJvbSBzbWFsbGVzdCB0byBsYXJnZXN0CiAgICAgICAgLy8gU28gd2UgcH
JlcGFyZSB0byBvdXRwdXQgYW5zd2VyIGZvciBrPTEgdG8gbgoKICAgICAgICAvLyBXZSdsbCBzdG9yZSBhbnN3ZXIgZm9yIGsgPSBjbHVzdGVycyBjb3VudAogICAgICAgIAogICAgICAgIC8vIE51bWJlciBvZi
BjbHVzdGVycyA9IG4gaW5pdGlhbGx5CiAgICAgICAgaW50IGNsdXN0ZXJzID0gbjsKCiAgICAgICAgLy8gYW5zW2tdID0gdG90YWwgbGF0ZW5jeSBmb3IgayBjbHVzdGVycwoKICAgICAgICAvLyBXZSB3aWxsIG
ZpbGwgYW5zIGZyb20gaz1uIGRvd24gdG8gMQogICAgICAgIC8vIEluaXRpYWxseSBhbnNbbl0gPSB0b3RhbExhdGVuY3kgPSAwCiAgICAgICAgYW5zW25dID0gdG90YWxMYXRlbmN5OwoKICAgICAgICAvLyBTb3
J0IE1TVCBlZGdlcyBhc2NlbmRpbmcKICAgICAgICBzb3J0KG1zdEVkZ2VzLmJlZ2luKCksIG1zdEVkZ2VzLmVuZCgpKTsKCiAgICAgICAgZm9yIChhdXRvICZbdyx1LHZdIDogbXN0RWRnZXMpIHsKICAgICAgIC
AgICAgaWYgKGNkc3UudW5pdGUodSx2LHcsdG90YWxMYXRlbmN5KSkgewogICAgICAgICAgICAgICAgY2x1c3RlcnMtLTsKICAgICAgICAgICAgICAgIGFuc1tjbHVzdGVyc10gPSB0b3RhbExhdGVuY3k7CiAgIC
AgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIEZvciBrID4gY2x1c3RlcnMsIGxhdGVuY3kgPSAwCiAgICAgICAgLy8gRm9yIGsgPCBjbHVzdGVycywgbGF0ZW5jeSA9IGFuc1trXSAoYWxyZWFkeSBjb2
1wdXRlZCkKCiAgICAgICAgLy8gRmlsbCBtaXNzaW5nIGFuc3dlcnMgd2l0aCBsYXN0IGtub3duIHZhbHVlIChtaW5pbXVtIGxhdGVuY3kgZm9yIHRoYXQgaykKICAgICAgICBmb3IgKGludCBrID0gbi0xOyBrID
49IDE7IGstLSkgewogICAgICAgICAgICBpZiAoYW5zW2tdID09IDAgJiYgayA8IGNsdXN0ZXJzKSB7CiAgICAgICAgICAgICAgICBhbnNba10gPSBhbnNbaysxXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCi
AgICAgICAgLy8gT3V0cHV0IGFuc3dlcnMgZm9yIGs9MSB0byBuCiAgICAgICAgZm9yIChpbnQgayA9IDE7IGsgPD0gbjsgaysrKSB7CiAgICAgICAgICAgIGNvdXQgPDwgYW5zW2tdIDw8IChrID09IG4gPyAnXG
4nIDogJyAnKTsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIDA7Cn0K' | base64 -d > /app/main.cpp; tmux wait -S done
root@30cced0cb835:/app#
