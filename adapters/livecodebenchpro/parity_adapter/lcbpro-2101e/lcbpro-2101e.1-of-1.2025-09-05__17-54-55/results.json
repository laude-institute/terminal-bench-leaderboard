{
    "id": "ec75417e-477b-43d4-89f4-3b746d133cd9",
    "trial_name": "lcbpro-2101e.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2101e",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2101E)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given a binary string $s$ of length $n$ and a tree $T$ with $n$ vertices. Let $k$ be the number of 1s in $s$. We will construct a complete undirected weighted graph with $k$ vertices as follows:\n\n- For each $1\\le i\\le n$ with $s_i = \\mathtt{1}$, create a vertex labeled $i$.\n- For any two vertices labeled $u$ and $v$ that are created in the above step, define the edge weight between them $w(u, v)$ as the distance$^{\\text{∗}}$ between vertex $u$ and vertex $v$ in the tree $T$.\n\nA simple path$^{\\text{†}}$ that visits vertices labeled $v_1, v_2, \\ldots, v_m$ in this order is nice if for all $1\\le i\\le m - 2$, the condition $2\\cdot w(v_i, v_{i + 1})\\le w(v_{i + 1}, v_{i + 2})$ holds. In other words, the weight of each edge in the path must be at least twice the weight of the previous edge. Note that $s_{v_i} = \\mathtt{1}$ has to be satisfied for all $1\\le i\\le m$, as otherwise, there would be no vertex with the corresponding label.\n\nFor each vertex labeled $i$ ($1\\le i\\le n$ and $s_i = \\mathtt{1}$) in the complete undirected weighted graph, determine the maximum number of vertices in any nice simple path starting from the vertex labeled $i$.\n\n$^{\\text{∗}}$The distance between two vertices $a$ and $b$ in a tree is equal to the number of edges on the unique simple path between vertex $a$ and vertex $b$.\n\n$^{\\text{†}}$A path is a sequence of vertices $v_1, v_2, \\ldots, v_m$ such that there is an edge between $v_i$ and $v_{i + 1}$ for all $1\\le i\\le m - 1$. A simple path is a path with no repeated vertices, i.e., $v_i\\neq v_j$ for all $1\\le i < j\\le m$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 7\\cdot10^4$) -- the length of the binary string $s$ and the number of vertices in the tree $T$.\n\nThe second line of each test case contains a binary string with $n$ characters $s_1s_2\\ldots s_n$ ($s_i\\in \\{\\mathtt{0}, \\mathtt{1}\\}$) -- the string representing the vertices to be constructed in the complete undirected weighted graph.\n\nEach of the next $n - 1$ lines contains two integers $u$ and $v$ ($1\\le u, v\\le n$) -- the endpoints of the edges of the tree $T$.\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $7\\cdot10^4$.\n\n### Output\n\nFor each test case, output $n$ integers, the $i$-th integer representing the maximum number of vertices in any nice simple path starting from the vertex labeled $i$. If there is no vertex labeled $i$, i.e., $s_i = \\mathtt{0}$, output $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n01111\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n17\n\n01101011110101101\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n6 7\n\n7 8\n\n8 9\n\n9 10\n\n10 11\n\n11 12\n\n12 13\n\n13 14\n\n14 15\n\n15 16\n\n16 17\n\n2\n\n01\n\n1 2\n\n```\n\n#### Output #1\n\n```\n-1 3 3 3 3\n-1 5 4 -1 4 -1 5 5 5 5 -1 4 -1 5 5 -1 3\n-1 1\n```\n\n### Note\n\nIn the first test case, the tree $T$ and the constructed graph are as follows:\n\n![](https://espresso.codeforces.com/2c018d3678fcc993cea93af930f4bc10bd9d0bed.png)Left side is the tree $T$ with selected nodes colored yellow. The right side is the constructed complete graph.\n\nThe nice path shown in the diagram is $3\\rightarrow 4\\rightarrow 2$. The path is nice as $w(4, 2) = 2$ is at least twice of $w(3, 4) = 1$. Extending the path using $2\\rightarrow 5$ is not possible as $w(2, 5) = 3$ is less than twice of $w(4, 2) = 2$.\n\nIn the second test case, the tree $T$ is a simple path of length $17$. An example of a nice path starting from the vertex labeled $2$ is $2\\rightarrow 3\\rightarrow 5\\rightarrow 9\\rightarrow 17$, which has edge weights of $1, 2, 4, 8$ doubling each time.",
    "is_resolved": true,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "passed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2101e/lcbpro-2101e.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1667,
    "total_output_tokens": 1967,
    "trial_started_at": "2025-09-06T01:07:44.703734+00:00",
    "trial_ended_at": "2025-09-06T01:08:46.253230+00:00",
    "agent_started_at": "2025-09-06T01:07:57.455588+00:00",
    "agent_ended_at": "2025-09-06T01:08:25.771194+00:00",
    "test_started_at": "2025-09-06T01:08:28.715959+00:00",
    "test_ended_at": "2025-09-06T01:08:32.405991+00:00"
}