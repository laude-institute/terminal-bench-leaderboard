{
    "id": "3a50484b-d475-4f93-9804-464378c1143e",
    "trial_name": "lcbpro-2056d.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2056d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2056D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nAn array $b$ of $m$ integers is called good if, when it is sorted, $b_{\\left\\lfloor \\frac{m + 1}{2} \\right\\rfloor} = b_{\\left\\lceil \\frac{m + 1}{2} \\right\\rceil}$. In other words, $b$ is good if both of its medians are equal. In particular, $\\left\\lfloor \\frac{m + 1}{2} \\right\\rfloor = \\left\\lceil \\frac{m + 1}{2} \\right\\rceil$ when $m$ is odd, so $b$ is guaranteed to be good if it has an odd length.\n\nYou are given an array $a$ of $n$ integers. Calculate the number of good subarrays$^{\\text{∗}}$ in $a$.\n\n$^{\\text{∗}}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) -- the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le \\color{red}{\\textbf{10}}$) -- the given array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the number of good subarrays in $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n1 1 1 1\n\n5\n\n1 10 2 3 3\n\n10\n\n6 3 2 3 5 3 4 2 3 5\n\n```\n\n#### Output #1\n\n```\n10\n11\n42\n```\n\n### Note\n\nIn the first case, every subarray is good since all its elements are equal to $1$.\n\nIn the second case, an example of a good subarray is $b = [10, 2, 3, 3]$. When it is sorted, $b = [2, 3, 3, 10]$, so $b_{\\left\\lfloor \\frac{4 + 1}{2} \\right\\rfloor} = b_{\\left\\lceil \\frac{4 + 1}{2} \\right\\rceil} = b_2 = b_3 = 3$. Another example would be $b = [1, 10, 2]$. On the other hand, $b = [1, 10]$ is not good as its two medians are $1$ and $10$, which are not equal.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2056d/lcbpro-2056d.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 1098,
    "total_output_tokens": 1984,
    "trial_started_at": "2025-09-06T01:29:13.851451+00:00",
    "trial_ended_at": "2025-09-06T01:30:22.959859+00:00",
    "agent_started_at": "2025-09-06T01:29:29.440036+00:00",
    "agent_ended_at": "2025-09-06T01:29:59.600335+00:00",
    "test_started_at": "2025-09-06T01:30:03.870342+00:00",
    "test_ended_at": "2025-09-06T01:30:07.501974+00:00"
}