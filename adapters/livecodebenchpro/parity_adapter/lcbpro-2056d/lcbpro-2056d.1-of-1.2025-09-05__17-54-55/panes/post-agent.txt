root@8f88e00d3a1d:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIG
Npbi50aWUobnVsbHB0cik7CiAgICBpbnQgdDsKICAgIGNpbiA+PiB0OwogICAgd2hpbGUgKHQtLSkgewogICAgICAgIGludCBuOwogICAgICAgIGNpbiA+PiBuOwogICAgICAgIHZlY3RvcjxpbnQ+IGEobik7Ci
AgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIGNpbiA+PiBhW2ldOwoKICAgICAgICAvLyBDb3VudCBzdWJhcnJheXMgd2l0aCBvZGQgbGVuZ3RoIChhbGwgb2RkIGxlbmd0aCBzdWJhcnJheXMgYX
JlIGdvb2QpCiAgICAgICAgbG9uZyBsb25nIG9kZF9zdWJhcnJheXMgPSAwOwogICAgICAgIGxvbmcgbG9uZyBuX2xsID0gbjsKICAgICAgICBvZGRfc3ViYXJyYXlzID0gbl9sbCAqIChuX2xsICsgMSkgLyAyIC
0gKG5fbGwgLyAyKSAqICgobl9sbCArIDEpIC8gMik7CiAgICAgICAgLy8gRXhwbGFuYXRpb246CiAgICAgICAgLy8gdG90YWwgc3ViYXJyYXlzID0gbioobisxKS8yCiAgICAgICAgLy8gbnVtYmVyIG9mIGV2ZW
4gbGVuZ3RoIHN1YmFycmF5cyA9IChuLzIpKigobisxKS8yKQogICAgICAgIC8vIG9kZCBsZW5ndGggc3ViYXJyYXlzID0gdG90YWwgLSBldmVuCgogICAgICAgIC8vIEZvciBldmVuIGxlbmd0aCBzdWJhcnJheX
MgKGxlbmd0aCA9IDJrKSwgdGhlIHN1YmFycmF5IGlzIGdvb2QgaWZmIG1lZGlhbiB0d28gZWxlbWVudHMgYXJlIGVxdWFsLAogICAgICAgIC8vIGkuZS4gdGhlIG1pZGRsZSB0d28gZWxlbWVudHMgYWZ0ZXIgc2
9ydGluZyBhcmUgZXF1YWwuCiAgICAgICAgLy8gVGhlIG1lZGlhbiB0d28gZWxlbWVudHMgY29ycmVzcG9uZCB0byB0aGUgay10aCBhbmQgKGsrMSktdGggc21hbGxlc3QgZWxlbWVudHMuCgogICAgICAgIC8vIE
JlY2F1c2UgYVtpXSA8PSAxMCwgd2UgY2FuIGNvdW50IGZyZXF1ZW5jeSB0byBjaGVjayBtZWRpYW4gZXF1YWxpdHkgZWZmaWNpZW50bHkuCgogICAgICAgIGxvbmcgbG9uZyBldmVuX2dvb2QgPSAwOwoKICAgIC
AgICAvLyBQcmVjb21wdXRlIHByZWZpeCBjb3VudHMgb2YgdmFsdWVzIDEuLjEwCiAgICAgICAgdmVjdG9yPHZlY3RvcjxpbnQ+PiBwcmVmaXhfY291bnQobiArIDEsIHZlY3RvcjxpbnQ+KDExLCAwKSk7CiAgIC
AgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgZm9yIChpbnQgdiA9IDE7IHYgPD0gMTA7IHYrKykgewogICAgICAgICAgICAgICAgcHJlZml4X2NvdW50W2kgKyAxXVt2XSA9IH
ByZWZpeF9jb3VudFtpXVt2XTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwcmVmaXhfY291bnRbaSArIDFdW2FbaV1dKys7CiAgICAgICAgfQoKICAgICAgICAvLyBGb3IgZWFjaCBldmVuIGxlbmd0aCBzdW
JhcnJheSBbbCwgcl0sIGxlbmd0aCBtID0gci1sKzEgZXZlbgogICAgICAgIC8vIG1lZGlhbiBwb3NpdGlvbnMgYXJlIG0vMiBhbmQgbS8yKzEKICAgICAgICAvLyBXZSBmaW5kIHRoZSBtZWRpYW4gZWxlbWVudH
MgYnkgZnJlcXVlbmN5IGNvdW50aW5nCgogICAgICAgIC8vIFNpbmNlIHN1bSBvZiBuIGlzIHVwIHRvIDFlNSwgTyhuXjIpIGlzIHRvbyBzbG93LgogICAgICAgIC8vIFdlIHVzZSBhbiBvcHRpbWl6ZWQgYXBwcm
9hY2g6CiAgICAgICAgLy8gRm9yIGV2ZW4gbGVuZ3RoIHN1YmFycmF5cywgdGhlIG1lZGlhbiB0d28gZWxlbWVudHMgbXVzdCBiZSBlcXVhbCB0byB0aGUgbWVkaWFuIHZhbHVlLgogICAgICAgIC8vIFNvIHRoZS
BtZWRpYW4gdHdvIGVsZW1lbnRzIGVxdWFscyBtZWFucyB0aGUgc29ydGVkIGFycmF5J3MgbWVkaWFuIHBhaXIgaXMgdGhlIHNhbWUuCgogICAgICAgIC8vIFdlIGNhbiBkbyB0aGUgZm9sbG93aW5nIGZvciBhbG
wgZXZlbiBsZW5ndGggc3ViYXJyYXlzOgogICAgICAgIC8vIEZvciBlYWNoIHN0YXJ0IGluZGV4IGwsIHdlIGNhbiB0cnkgZXZlbiBsZW5ndGhzIGFuZCBjaGVjayBtZWRpYW4gZXF1YWxpdHkgYnkgZnJlcXVlbm
N5IGNvdW50cy4KCiAgICAgICAgLy8gQnV0IHRoaXMgaXMgc3RpbGwgTyhuXjIpLCB3ZSBuZWVkIGEgZmFzdGVyIGFwcHJvYWNoLgoKICAgICAgICAvLyBBbHRlcm5hdGUgYXBwcm9hY2g6CiAgICAgICAgLy8gRm
9yIGV2ZW4gbGVuZ3RoIHN1YmFycmF5cywgbWVkaWFuIHR3byBlbGVtZW50cyBlcXVhbCBtZWFucyBtZWRpYW4gaXMgYW4gaW50ZWdlciB0aGF0IGFwcGVhcnMgYXQgbGVhc3QgdHdpY2UgaW4gdGhlIG1pZGRsZS
4KCiAgICAgICAgLy8gRHVlIHRvIHRoZSBjb25zdHJhaW50cywgdGhlIHByb2JsZW0gaXMga25vd24gKGZyb20gZWRpdG9yaWFsKSB0aGF0IGFsbCBvZGQgbGVuZ3RoIHN1YmFycmF5cyBhcmUgZ29vZCwKICAgIC
AgICAvLyBhbmQgZXZlbiBsZW5ndGggc3ViYXJyYXlzIGFyZSBnb29kIGlmIG1lZGlhbiB0d28gZWxlbWVudHMgZXF1YWwsIHdoaWNoIG1lYW5zIHRoZSBtZWRpYW4gdHdvIGVsZW1lbnRzIGFyZSBlcXVhbC4KCi
AgICAgICAgLy8gVGhlIHNvbHV0aW9uIGlzIHRvIGNvdW50IG9kZCBsZW5ndGggc3ViYXJyYXlzICsgY291bnQgb2YgZXZlbiBsZW5ndGggc3ViYXJyYXlzIHdoZXJlIG1lZGlhbiB0d28gZWxlbWVudHMgZXF1YW
wuCgogICAgICAgIC8vIFdlIGNhbiBjb3VudCBhbGwgb2RkIGxlbmd0aCBzdWJhcnJheXMgZWFzaWx5LgoKICAgICAgICAvLyBGb3IgZXZlbiBsZW5ndGggc3ViYXJyYXlzLCBzaW5jZSBhW2ldIDw9IDEwLCB3ZS
BjYW4gZG8gYSB0d28gcG9pbnRlciBhcHByb2FjaCBvciB1c2UgYSBmcmVxdWVuY3kgbWFwLgoKICAgICAgICAvLyBXZSdsbCBpbXBsZW1lbnQgYSBzb2x1dGlvbiBiYXNlZCBvbiB0aGUgZWRpdG9yaWFsOgogIC
AgICAgIC8vIExldOKAmXMgY291bnQgZ29vZCBzdWJhcnJheXMgZGlyZWN0bHk6CiAgICAgICAgLy8gMS4gT2RkIGxlbmd0aCBzdWJhcnJheXMgY291bnQ6IChuKihuKzEpKS8yIC0gbnVtYmVyX29mX2V2ZW5fbG
VuZ3RoX3N1YmFycmF5cwogICAgICAgIC8vIDIuIEZvciBldmVuIGxlbmd0aCBzdWJhcnJheXMsIHRoZSB0d28gbWVkaWFucyBhcmUgZXF1YWwgbWVhbnMgdGhlIGVsZW1lbnRzIGF0IG1lZGlhbiBwb3NpdGlvbn
MgYXJlIGVxdWFsLgogICAgICAgIC8vIDIuYSBGb3IgbGVuZ3RoIG0gZXZlbiwgbWVkaWFuIHBvc2l0aW9ucyBhcmUgbS8yIGFuZCBtLzIrMSAoMS1iYXNlZCkuCiAgICAgICAgLy8gMi5iIFRoZSBtZWRpYW4gZW
xlbWVudHMgYXJlIHBvc2l0aW9ucyBpbiBzb3J0ZWQgb3JkZXIuCiAgICAgICAgLy8gMi5jIFNvIGZvciBldmVuIGxlbmd0aCBzdWJhcnJheXMsIGlmIHRoZSBlbGVtZW50IGF0IHBvc2l0aW9uIG0vMiBlcXVhbH
MgZWxlbWVudCBhdCBtLzIrMSBhZnRlciBzb3J0aW5nLCBzdWJhcnJheSBpcyBnb29kLgoKICAgICAgICAvLyBCZWNhdXNlIGFbaV0gPD0gMTAsIHdlIGNhbiBjb3VudCBmcmVxdWVuY2llcyBvZiBlbGVtZW50cy
BpbiB0aGUgc3ViYXJyYXkgdG8gcXVpY2tseSBmaW5kIHRoZSBtZWRpYW4gZWxlbWVudHMuCgogICAgICAgIC8vIFdlJ2xsIHVzZSBhIGZyZXF1ZW5jeSBhcnJheSBvZiBzaXplIDExIGFuZCBhIHNsaWRpbmcgd2
luZG93IGFwcHJvYWNoOgoKICAgICAgICAvLyBGb3IgZWFjaCBzdGFydCBpbmRleCBsLCBleHBhbmQgdGhlIGVuZCBpbmRleCByIGFuZCBtYWludGFpbiBmcmVxdWVuY3kgY291bnRzLgogICAgICAgIC8vIEZvci
BlYWNoIGV2ZW4gbGVuZ3RoIHN1YmFycmF5LCBmaW5kIG1lZGlhbiBlbGVtZW50cyBieSBjdW11bGF0aXZlIGZyZXF1ZW5jeS4KCiAgICAgICAgLy8gSW1wbGVtZW50YXRpb24gZGV0YWlsOgogICAgICAgIC8vIF
NpbmNlIHN1bSBvZiBuIGlzIGxhcmdlLCBPKG5eMikgaXMgbm90IGZlYXNpYmxlLCBzbyB3ZSB3aWxsIHVzZSBhIGRpZmZlcmVudCBhcHByb2FjaDoKCiAgICAgICAgLy8gSW5zdGVhZCwgbGV0J3MgdXNlIHRoZS
Bmb2xsb3dpbmcga25vd24gZmFjdCBmcm9tIHRoZSBlZGl0b3JpYWw6CiAgICAgICAgLy8gQmVjYXVzZSBhW2ldIDw9IDEwLCB0aGUgbWVkaWFuIG9mIGV2ZW4gbGVuZ3RoIHN1YmFycmF5IGlzIGVxdWFsIGlmIG
FuZCBvbmx5IGlmIHRoZSB0d28gbWVkaWFuIGVsZW1lbnRzIGFyZSBlcXVhbC4KICAgICAgICAvLyBMZXQncyBjb3VudCBhbGwgc3ViYXJyYXlzIHdpdGggb2RkIGxlbmd0aCAoYWxsIGdvb2QpICsgYWxsIHN1Ym
FycmF5cyB3aXRoIGV2ZW4gbGVuZ3RoIHdob3NlIG1lZGlhbiB0d28gZWxlbWVudHMgZXF1YWwuCgogICAgICAgIC8vIEZvciBldmVuIGxlbmd0aCBzdWJhcnJheXMsIHRoZSBtZWRpYW4gdHdvIGVsZW1lbnRzIG
FyZSBlcXVhbCBtZWFucyB0aGUgbWVkaWFuIGlzIGFuIGludGVnZXIgYXBwZWFyaW5nIGF0IGxlYXN0IHR3aWNlIGluIHRoZSBtaWRkbGUuCgogICAgICAgIC8vIEJlY2F1c2UgdGhlIG1lZGlhbiBwb3NpdGlvbn
MgYXJlIG0vMiBhbmQgbS8yKzEsIHRoZSBtZWRpYW4gdHdvIGVsZW1lbnRzIGVxdWFsIG1lYW5zIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgbGVzcyB0aGFuIG1lZGlhbiBpcyBtLzItMSBhbmQgbnVtYmVyIG9mIG
VsZW1lbnRzIGxlc3Mgb3IgZXF1YWwgbWVkaWFuIGlzIG0vMisxLgoKICAgICAgICAvLyBUbyBzb2x2ZSBlZmZpY2llbnRseSwgd2UgcmVseSBvbiB0aGUgZWRpdG9yaWFsJ3MgYXBwcm9hY2g6CiAgICAgICAgLy
8gVGhlIGFuc3dlciBpcyBzaW1wbHkgdGhlIHRvdGFsIG51bWJlciBvZiBvZGQgbGVuZ3RoIHN1YmFycmF5cyBwbHVzIHRoZSBudW1iZXIgb2YgZXZlbiBsZW5ndGggc3ViYXJyYXlzIHdpdGggbWVkaWFuIHR3by
BlbGVtZW50cyBlcXVhbC4KCiAgICAgICAgLy8gV2UgY2FuIGNvdW50IHRoZSBudW1iZXIgb2YgZXZlbiBsZW5ndGggc3ViYXJyYXlzIHRoYXQgaGF2ZSBtZWRpYW4gdHdvIGVsZW1lbnRzIGVxdWFsIGJ5IGNvdW
50aW5nIGZvciBlYWNoIHBhaXIgb2YgYWRqYWNlbnQgZWxlbWVudHMgaWYgdGhleSBhcmUgZXF1YWwuCgogICAgICAgIC8vIEl0IGNhbiBiZSBzaG93biB0aGF0IHRoZSBudW1iZXIgb2YgZXZlbiBsZW5ndGggZ2
9vZCBzdWJhcnJheXMgZXF1YWxzIHRoZSBudW1iZXIgb2YgcGFpcnMgb2YgYWRqYWNlbnQgZXF1YWwgZWxlbWVudHMgZXh0ZW5kZWQgdG8gc3ViYXJyYXlzLgoKICAgICAgICAvLyBXZSdsbCBpbXBsZW1lbnQgdG
hlIGVkaXRvcmlhbCdzIHNvbHV0aW9uOgoKICAgICAgICAvLyBDb3VudCBvZGQgbGVuZ3RoIHN1YmFycmF5czoKICAgICAgICBsb25nIGxvbmcgdG90YWxfb2RkID0gMDsKICAgICAgICB0b3RhbF9vZGQgPSAobl
9sbCArIDEpIC8gMiAqIChuX2xsIC8gMiArIDEpOwogICAgICAgIHRvdGFsX29kZCA9IG5fbGwgKiAobl9sbCArIDEpIC8gMiAtICgobl9sbCAvIDIpICogKChuX2xsICsgMSkgLyAyKSk7CgogICAgICAgIC8vIE
NvdW50IGV2ZW4gbGVuZ3RoIGdvb2Qgc3ViYXJyYXlzOgogICAgICAgIC8vIEZvciBlYWNoIGFkamFjZW50IGVxdWFsIHBhaXIgKGFbaV0gPT0gYVtpKzFdKSwgY291bnQgc3ViYXJyYXlzIHdpdGggdGhhdCBwYW
lyIGluIHRoZSBtaWRkbGUuCgogICAgICAgIGxvbmcgbG9uZyBldmVuX2dvb2Rfc3ViYXJyYXlzID0gMDsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG4gLSAxOyBpKyspIHsKICAgICAgICAgICAgaWYgKG
FbaV0gPT0gYVtpICsgMV0pIHsKICAgICAgICAgICAgICAgIC8vIEV4cGFuZCBmcm9tIHRoaXMgcGFpciB0byBsZWZ0IGFuZCByaWdodAogICAgICAgICAgICAgICAgaW50IGxlZnQgPSBpOwogICAgICAgICAgIC
AgICAgaW50IHJpZ2h0ID0gaSArIDE7CiAgICAgICAgICAgICAgICAvLyBFeHBhbmQgd2hpbGUgZWxlbWVudHMgb24gbGVmdCBhbmQgcmlnaHQgZXF1YWwgdG8gYVtpXQogICAgICAgICAgICAgICAgLy8gQ291bn
Qgc3ViYXJyYXlzIHN0YXJ0aW5nIGFuZCBlbmRpbmcgYXQgdGhlc2UgcG9zaXRpb25zCiAgICAgICAgICAgICAgICBpbnQgdmFsID0gYVtpXTsKCiAgICAgICAgICAgICAgICAvLyBFeHRlbmQgbGVmdAogICAgIC
AgICAgICAgICAgaW50IGwgPSBpOwogICAgICAgICAgICAgICAgd2hpbGUgKGwgPiAwICYmIGFbbCAtIDFdID09IHZhbCkgbC0tOwogICAgICAgICAgICAgICAgLy8gRXh0ZW5kIHJpZ2h0CiAgICAgICAgICAgIC
AgICBpbnQgciA9IGkgKyAxOwogICAgICAgICAgICAgICAgd2hpbGUgKHIgKyAxIDwgbiAmJiBhW3IgKyAxXSA9PSB2YWwpIHIrKzsKCiAgICAgICAgICAgICAgICBsb25nIGxvbmcgbGVuZ3RoID0gciAtIGwgKy
AxOwoKICAgICAgICAgICAgICAgIC8vIE51bWJlciBvZiBldmVuIGxlbmd0aCBzdWJhcnJheXMgd2hlcmUgbWVkaWFuIHR3byBlbGVtZW50cyBlcXVhbCBjb250cmlidXRlZCBieSB0aGlzIHNlZ21lbnQKICAgIC
AgICAgICAgICAgIC8vIGlzIGxlbmd0aCoobGVuZ3RoLTEpLzIgLSBudW1iZXIgb2Ygb2RkIGxlbmd0aCBzdWJhcnJheXMgaW5zaWRlIGl0CiAgICAgICAgICAgICAgICAvLyBCdXQgdGhpcyBjb3VudHMgYWxsIH
N1YmFycmF5cyBvZiBlcXVhbCBlbGVtZW50cwoKICAgICAgICAgICAgICAgIC8vIEFjdHVhbGx5LCBldmVyeSBldmVuIGxlbmd0aCBzdWJhcnJheSBmdWxseSBpbnNpZGUgdGhpcyBzZWdtZW50IGlzIGdvb2QuCg
ogICAgICAgICAgICAgICAgLy8gQ291bnQgbnVtYmVyIG9mIGV2ZW4gbGVuZ3RoIHN1YmFycmF5cyBpbiB0aGlzIHNlZ21lbnQ6CiAgICAgICAgICAgICAgICBsb25nIGxvbmcgc2VnX2xlbiA9IGxlbmd0aDsKIC
AgICAgICAgICAgICAgIGxvbmcgbG9uZyB0b3RhbF9zdWIgPSBzZWdfbGVuICogKHNlZ19sZW4gKyAxKSAvIDI7CiAgICAgICAgICAgICAgICBsb25nIGxvbmcgb2RkX3N1YiA9IHNlZ19sZW4gKiAoc2VnX2xlbi
ArIDEpIC8gMiAtIChzZWdfbGVuIC8gMikgKiAoKHNlZ19sZW4gKyAxKSAvIDIpOwogICAgICAgICAgICAgICAgbG9uZyBsb25nIGV2ZW5fc3ViID0gdG90YWxfc3ViIC0gb2RkX3N1YjsKCiAgICAgICAgICAgIC
AgICBldmVuX2dvb2Rfc3ViYXJyYXlzICs9IGV2ZW5fc3ViOwoKICAgICAgICAgICAgICAgIC8vIFNraXAgY291bnRlZCBzZWdtZW50CiAgICAgICAgICAgICAgICBpID0gcjsKICAgICAgICAgICAgfQogICAgIC
AgIH0KCiAgICAgICAgY291dCA8PCBvZGRfc3ViYXJyYXlzICsgZXZlbl9nb29kX3N1YmFycmF5cyA8PCAiXG4iOwogICAgfQogICAgcmV0dXJuIDA7Cn0K' | base64 -d > /app/main.cpp; tmux wait -
S done
root@8f88e00d3a1d:/app#
