{
    "id": "7d464142-7892-4a0f-987a-b4ad5ca18d53",
    "trial_name": "lcbpro-2069d.1-of-1.2025-09-05__17-54-55",
    "task_id": "lcbpro-2069d",
    "instruction": "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create a C++17 solution file at /app/main.cpp.\nThis task does not include local test cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit) to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n  3) passes only if the judge returns passed == true.\n\nEnvironment variables (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n  - PID: problem id (default 2069D)\n  - LANG: language (default cpp)\n  - CODE_PATH: path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)\n\nYou are given a string $s$ consisting of lowercase Latin letters.\n\nYou can perform the following operation with the string $s$: choose a contiguous substring (possibly empty) of $s$ and shuffle it (reorder the characters in the substring as you wish).\n\nRecall that a palindrome is a string that reads the same way from the first character to the last and from the last character to the first. For example, the strings a, bab, acca, bcabcbacb are palindromes, but the strings ab, abbbaa, cccb are not.\n\nYour task is to determine the minimum possible length of the substring on which the aforementioned operation must be performed in order to convert the given string $s$ into a palindrome.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) -- the number of test cases.\n\nThe only line of each test case contains a string $s$ ($2 \\le |s| \\le 2 \\cdot 10^5$), consisting of lowercase Latin letters.\n\nAdditional constraints on the input:\n\n- the string $s$ has an even length;\n- the string $s$ can always be converted to a palindrome;\n- the sum of lengths of $s$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer -- the minimum possible length of the substring on which the aforementioned operation must be performed in order to convert the given string $s$ into a palindrome.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\nbaba\n\ncc\n\nddaa\n\nacbacddacbca\n\n```\n\n#### Output #1\n\n```\n2\n0\n3\n2\n```\n\n### Note\n\nIn the first example, you can perform the operation as follows: baba $\\rightarrow$ baab.\n\nIn the second example, the string is already a palindrome, so we can shuffle an empty substring.\n\nIn the third example, you can perform the operation as follows: ddaa $\\rightarrow$ adda.\n\nIn the fourth example, you can perform the operation as follows: acbacddacbca $\\rightarrow$ acbcaddacbca.",
    "is_resolved": false,
    "failure_mode": "unset",
    "parser_results": {
        "test_external_judge": "failed"
    },
    "recording_path": "2025-09-05__17-54-55/lcbpro-2069d/lcbpro-2069d.1-of-1.2025-09-05__17-54-55/sessions/agent.cast",
    "total_input_tokens": 870,
    "total_output_tokens": 467,
    "trial_started_at": "2025-09-06T01:14:22.350547+00:00",
    "trial_ended_at": "2025-09-06T01:15:05.087423+00:00",
    "agent_started_at": "2025-09-06T01:14:36.113175+00:00",
    "agent_ended_at": "2025-09-06T01:14:42.911686+00:00",
    "test_started_at": "2025-09-06T01:14:44.940320+00:00",
    "test_ended_at": "2025-09-06T01:14:49.082737+00:00"
}