root@f662994ea5ac:/app# echo 'I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+CnVzaW5nIG5hbWVzcGFjZSBzdGQ7CgppbnQgbWFpbigpIHsKICAgIGlvczo6c3luY193aXRoX3N0ZGlvKGZhbHNlKTsKICAgIG
Npbi50aWUobnVsbHB0cik7CiAgICBpbnQgdDsgY2luID4+IHQ7CiAgICB3aGlsZSAodC0tKSB7CiAgICAgICAgdW5zaWduZWQgbG9uZyBsb25nIHgsIHk7CiAgICAgICAgY2luID4+IHggPj4geTsKICAgICAgIC
BpZiAoeCA9PSB5KSB7CiAgICAgICAgICAgIGNvdXQgPDwgMCA8PCAnXG4nOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgLy8gV2Ugd2FudCB0byBmaW5kIG1pbmltYWwgY29zdCB0by
BtYWtlIHggPT0geSBieSBkaXZpZGluZyB4IG9yIHkgYnkgMl5rLAogICAgICAgIC8vIHdpdGggZWFjaCBrIHVzZWQgYXQgbW9zdCBvbmNlLCBjb3N0IDJeayBwZXIgb3BlcmF0aW9uLgogICAgICAgIC8vIEtleS
BpbnNpZ2h0OiBFYWNoIG9wZXJhdGlvbiByZWR1Y2VzIG9uZSBvZiB0aGUgbnVtYmVycyBieSBkaXZpZGluZyBieSAyXmssCiAgICAgICAgLy8gYW5kIHdlIGNhbiBkbyB0aGVzZSBvcGVyYXRpb25zIGluIGFueS
BvcmRlci4KICAgICAgICAvLyBXZSdsbCB0cnkgYWxsIHN1YnNldHMgb2YgaydzIChrIGZyb20gMSB0byA2MCkgdG8gZmluZCBtaW5pbWFsIGNvc3QgbWF0Y2hpbmcuCiAgICAgICAgLy8gQnV0IDJeNjAgaXMgbG
FyZ2UsIHNvIHdlIG5lZWQgYSBncmVlZHkgYXBwcm9hY2guCiAgICAgICAgLy8gQXBwcm9hY2g6CiAgICAgICAgLy8gV2UgY2FuIHJlcHJlc2VudCBib3RoIHggYW5kIHkgYXMgc2VxdWVuY2VzIG9mIGRpdmlkaW
5nIGJ5IDJeay4KICAgICAgICAvLyBUaGUgcHJvYmxlbSByZWR1Y2VzIHRvIGNob29zaW5nIGEgc2V0IG9mIGsncyB1c2VkIG9uIHggYW5kIG9uIHkgdG8gbWFrZSBmaW5hbCBlcXVhbC4KICAgICAgICAvLyBXZS
B3aWxsIHRyeSBhbGwgc3Vic2V0cyBvZiBrJ3MgdXNlZCBvbiB4IGFuZCB5IGl0ZXJhdGl2ZWx5IGlzIGltcG9zc2libGUuCiAgICAgICAgLy8gSW5zdGVhZCwgd2UgdXNlIGEgYml0bWFzayBkcCBvciBhIEJGUy
BpcyBpbXBvc3NpYmxlIGZvciAxZTUgdGVzdCBjYXNlcy4KICAgICAgICAvLyBBbHRlcm5hdGl2ZSBhcHByb2FjaDoKICAgICAgICAvLyBGb3IgZWFjaCBrIGZyb20gNjAgZG93biB0byAxLCB0cnkgdG8gdXNlIG
sgb24geCBvciB5IGlmIGl0IGNhbiBoZWxwIG1ha2luZyBlcXVhbC4KICAgICAgICAvLyBCdXQgYmV0dGVyIGlzIHRvIHRyeSBhbGwgcG9zc2libGUgZGl2aXNpb25zOgogICAgICAgIC8vIFNpbmNlIGRpdmlkaW
5nIHggYnkgMl5rIG1lYW5zIHhfbmV3ID0gZmxvb3IoeCAvIDJeayksIHNpbWlsYXJseSBmb3IgeS4KICAgICAgICAvLyBXZSB3YW50IHRvIGZpbmQgc2V0cyBTeCBhbmQgU3kgb2YgZGlzdGluY3QgaydzIHVzZW
Qgb24geCBhbmQgeSBzdWNoIHRoYXQ6CiAgICAgICAgLy8gZmxvb3IoeCAvIHByb2R1Y3QoMl57ayBpbiBTeH0pKSA9PSBmbG9vcih5IC8gcHJvZHVjdCgyXntrIGluIFN5fSkpCiAgICAgICAgLy8gYW5kIHN1bS
BvZiBjb3N0cyAoc3VtIG9mIDJeayBpbiBTeCBhbmQgU3kpIG1pbmltYWwuCiAgICAgICAgLy8gT2JzZXJ2aW5nIHRoZSBwcm9ibGVtLCB3ZSBjYW4gZ2VuZXJhdGUgYWxsIHBvc3NpYmxlIGRpdmlzaW9uIHJlc3
VsdHMgYnkgcmVtb3ZpbmcgZGlmZmVyZW50IGsncy4KICAgICAgICAvLyBCdXQgdGhhdCBpcyBleHBvbmVudGlhbC4KICAgICAgICAvLyBBbm90aGVyIGFwcHJvYWNoOgogICAgICAgIC8vIEJlY2F1c2Ugd2UgY2
FuIHVzZSBlYWNoIGsgYXQgbW9zdCBvbmNlLCBsZXQncyBjb25zaWRlciB0aGUgZWZmZWN0IG9mIGRpdmlkaW5nIGJ5IDJeazoKICAgICAgICAvLyBEaXZpZGluZyBieSAyXmsgcmVkdWNlcyB0aGUgbnVtYmVyIH
RvIGZsb29yKHggLyAyXmspCiAgICAgICAgLy8gVGhlIGtleSBpcyB0byBmaW5kIHRoZSBtaW5pbWFsIGNvc3Qgc3Vic2V0IG9mIGsncyB0byBhcHBseSBvbiB4IGFuZCB5IHNvIHRoYXQgZmluYWwgZXF1YWwuCi
AgICAgICAgLy8gTGV0J3MgcHJlY29tcHV0ZSBhbGwgcG9zc2libGUgZGl2aXNpb24gcmVzdWx0cyBmb3IgeCBhbmQgeSBieSBzdWJzZXRzIG9mIGsncy4KICAgICAgICAvLyBBY3R1YWxseSwgd2UgY2FuIGRvIG
EgbWVldCBpbiB0aGUgbWlkZGxlIGZvciBrPTEuLjMwIGZvciB4IGFuZCB5LgogICAgICAgIC8vIEJ1dCB0PTFlNSwgdG9vIGJpZy4KICAgICAgICAvLyBTbyB3ZSBuZWVkIGEgaGV1cmlzdGljIG9yIGFuIGVmZm
ljaWVudCBhcHByb2FjaC4KICAgICAgICAvLyBMZXQncyB0cnkgdGhlIGZvbGxvd2luZzoKICAgICAgICAvLyBGb3IgZWFjaCBzdWJzZXQgb2YgaydzIHVzZWQgb24geCBhbmQgeSwgd2UgaGF2ZSBhIHBhaXIgb2
YgcmVzdWx0aW5nIHZhbHVlcy4KICAgICAgICAvLyBXZSB3YW50IG1pbmltYWwgY29zdCB0b3RhbCB3aXRoIHgnID09IHknLgogICAgICAgIC8vIEFsdGVybmF0aXZlIGFwcHJvYWNoOgogICAgICAgIC8vIFdlJ2
xsIHRyeSBhbGwgcG9zc2libGUgZGl2aXNpb24gcmVzdWx0cyBvZiB4IGJ5IHNvbWUgc3Vic2V0LCBzdG9yZSBjb3N0LgogICAgICAgIC8vIFRoZW4gYWxsIHBvc3NpYmxlIGRpdmlzaW9uIHJlc3VsdHMgb2YgeS
BieSBzb21lIHN1YnNldCwgc3RvcmUgY29zdC4KICAgICAgICAvLyBGaW5kIG1pbmltYWwgc3VtIGNvc3QgZm9yIGVxdWFsIG51bWJlcnMuCiAgICAgICAgLy8gQnV0IGFnYWluIGV4cG9uZW50aWFsLgogICAgIC
AgIC8vIFNpbmNlIHggYW5kIHkgPD0gMWUxNywgbWF4IDYwIGJpdHMuCiAgICAgICAgLy8gTGV0J3MgdHJ5IGEgQkZTIG9yIERpamtzdHJhIGZyb20geCBhbmQgeS4KICAgICAgICAvLyBXZSdsbCBpbXBsZW1lbn
QgYSBoZXVyaXN0aWMgc29sdXRpb246CiAgICAgICAgLy8gV2UnbGwgdHJ5IGFsbCBzdWJzZXRzIG9mIGsgZnJvbSAxIHRvIDE1IChtYXggMTUgYml0cykgZm9yIHggYW5kIHkuCiAgICAgICAgLy8gMl4xNSA9ID
MyNzY4LCBzbyAzMjc2OCAqIDIgPSA2NTUzNiBzdGF0ZXMuCiAgICAgICAgLy8gRm9yIGVhY2ggdGVzdCBjYXNlLCB0aGlzIGlzIHRvbyBtdWNoLgogICAgICAgIC8vIEluc3RlYWQsIGxldCdzIGNvbnNpZGVyIG
9ubHkgayBmcm9tIDEgdG8gMTUuCiAgICAgICAgLy8gQnV0IHRlc3QgY2FzZXMgMWU1IGlzIHRvbyBiaWcuCiAgICAgICAgLy8gU28gd2UgbmVlZCBhbiBPKDEpIHNvbHV0aW9uLgogICAgICAgIC8vIE9ic2Vydm
F0aW9uOgogICAgICAgIC8vIElmIHggPT0geSwgY29zdCAwLgogICAgICAgIC8vIEVsc2UsIHdlIHdhbnQgdG8gZmluZCBtaW5pbWFsIHN1bSBvZiAyXmsgc3VjaCB0aGF0IGZsb29yKHggLyBwcm9kdWN0X3gpID
09IGZsb29yKHkgLyBwcm9kdWN0X3kpLgogICAgICAgIC8vIFdlIGNhbiB0cnkgdG8gZmluZCB0aGUgbWluaW1hbCBjb3N0IGJ5IGNvbnNpZGVyaW5nIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4geCBhbmQgeS4KIC
AgICAgICAvLyBMZXQncyB0cnkgdGhlIGZvbGxvd2luZyBhcHByb2FjaDoKICAgICAgICAvLyBGb3IgayBpbiAxLi42MDoKICAgICAgICAvLyAgIFRyeSBkaXZpZGluZyB4IGJ5IDJeayBvciB5IGJ5IDJeaywgYW
5kIGNoZWNrIGlmIHZhbHVlcyBiZWNvbWUgZXF1YWwuCiAgICAgICAgLy8gICBJZiB5ZXMsIHJlY29yZCBjb3N0LgogICAgICAgIC8vIEFsc28gdHJ5IGRpdmlkaW5nIGJ5IG11bHRpcGxlIGsncy4KICAgICAgIC
AvLyBCdXQgYWdhaW4sIGV4cG9uZW50aWFsLgogICAgICAgIC8vIExldCdzIGRvIGEgQkZTIHdpdGggc3RhdGVzICh4X3ZhbCwgeV92YWwsIHVzZWRfa19tYXNrKSwgYnV0IHRvbyBiaWcuCiAgICAgICAgLy8gU2
luY2Ugd2UgY2FuIG9ubHkgdXNlIGVhY2ggayBvbmNlLCBhbmQgY29zdCBpcyAyXmssIG1pbmltYWwgY29zdCBpcyBzdW0gb2YgY2hvc2VuIDJeay4KICAgICAgICAvLyBMZXQncyB0cnkgYSBoZXVyaXN0aWM6Ci
AgICAgICAgLy8gV2UgdHJ5IGFsbCBzdWJzZXRzIG9mIGsgZnJvbSAxIHRvIDE1IGZvciB4IGFuZCB5IGluZGVwZW5kZW50bHkgYW5kIGZpbmQgbWluaW1hbCBjb3N0LgogICAgICAgIC8vIFRoZW4gbWluaW1hbC
BzdW0gb2YgY29zdHMgZm9yIGVxdWFsIGZpbmFsIHZhbHVlcy4KCiAgICAgICAgLy8gSW1wbGVtZW50IG1lZXQgaW4gdGhlIG1pZGRsZSB3aXRoIGs9MTU6CiAgICAgICAgY29uc3QgaW50IE1BWF9LID0gMTU7Ci
AgICAgICAgdmVjdG9yPHBhaXI8dW5zaWduZWQgbG9uZyBsb25nLCB1bnNpZ25lZCBsb25nIGxvbmc+PiB4X3N0YXRlczsgLy8gKHZhbHVlLCBjb3N0KQogICAgICAgIHZlY3RvcjxwYWlyPHVuc2lnbmVkIGxvbm
cgbG9uZywgdW5zaWduZWQgbG9uZyBsb25nPj4geV9zdGF0ZXM7IC8vICh2YWx1ZSwgY29zdCkKCiAgICAgICAgLy8gR2VuZXJhdGUgc3Vic2V0cyBmb3IgeAogICAgICAgIGludCBsaW1pdCA9IDEgPDwgTUFYX0
s7CiAgICAgICAgeF9zdGF0ZXMucmVzZXJ2ZShsaW1pdCk7CiAgICAgICAgZm9yIChpbnQgbWFzayA9IDA7IG1hc2sgPCBsaW1pdDsgbWFzaysrKSB7CiAgICAgICAgICAgIHVuc2lnbmVkIGxvbmcgbG9uZyB2YW
wgPSB4OwogICAgICAgICAgICB1bnNpZ25lZCBsb25nIGxvbmcgY29zdCA9IDA7CiAgICAgICAgICAgIGZvciAoaW50IGJpdCA9IDA7IGJpdCA8IE1BWF9LOyBiaXQrKykgewogICAgICAgICAgICAgICAgaWYgKG
1hc2sgJiAoMSA8PCBiaXQpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsID4+PSAoYml0ICsgMSk7CiAgICAgICAgICAgICAgICAgICAgY29zdCArPSAxVUxMIDw8IChiaXQgKyAxKTsKICAgICAgICAgICAgIC
AgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB4X3N0YXRlcy5lbXBsYWNlX2JhY2sodmFsLCBjb3N0KTsKICAgICAgICB9CgogICAgICAgIC8vIEdlbmVyYXRlIHN1YnNldHMgZm9yIHkKICAgICAgICB5X3
N0YXRlcy5yZXNlcnZlKGxpbWl0KTsKICAgICAgICBmb3IgKGludCBtYXNrID0gMDsgbWFzayA8IGxpbWl0OyBtYXNrKyspIHsKICAgICAgICAgICAgdW5zaWduZWQgbG9uZyBsb25nIHZhbCA9IHk7CiAgICAgIC
AgICAgIHVuc2lnbmVkIGxvbmcgbG9uZyBjb3N0ID0gMDsKICAgICAgICAgICAgZm9yIChpbnQgYml0ID0gMDsgYml0IDwgTUFYX0s7IGJpdCsrKSB7CiAgICAgICAgICAgICAgICBpZiAobWFzayAmICgxIDw8IG
JpdCkpIHsKICAgICAgICAgICAgICAgICAgICB2YWwgPj49IChiaXQgKyAxKTsKICAgICAgICAgICAgICAgICAgICBjb3N0ICs9IDFVTEwgPDwgKGJpdCArIDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgIC
AgICB9CiAgICAgICAgICAgIHlfc3RhdGVzLmVtcGxhY2VfYmFjayh2YWwsIGNvc3QpOwogICAgICAgIH0KCiAgICAgICAgLy8gTWFwIGZyb20gdmFsdWUgdG8gbWluaW1hbCBjb3N0IGZvciB4CiAgICAgICAgdW
5vcmRlcmVkX21hcDx1bnNpZ25lZCBsb25nIGxvbmcsIHVuc2lnbmVkIGxvbmcgbG9uZz4geF9tYXA7CiAgICAgICAgZm9yIChhdXRvICZwIDogeF9zdGF0ZXMpIHsKICAgICAgICAgICAgYXV0byBpdCA9IHhfbW
FwLmZpbmQocC5maXJzdCk7CiAgICAgICAgICAgIGlmIChpdCA9PSB4X21hcC5lbmQoKSB8fCBwLnNlY29uZCA8IGl0LT5zZWNvbmQpIHsKICAgICAgICAgICAgICAgIHhfbWFwW3AuZmlyc3RdID0gcC5zZWNvbm
Q7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIEZpbmQgbWluaW1hbCBjb3N0IHN1bSBmb3IgeQogICAgICAgIHVuc2lnbmVkIGxvbmcgbG9uZyBhbnMgPSBVTExPTkdfTUFYOwogICAgICAgIG
ZvciAoYXV0byAmcCA6IHlfc3RhdGVzKSB7CiAgICAgICAgICAgIGF1dG8gaXQgPSB4X21hcC5maW5kKHAuZmlyc3QpOwogICAgICAgICAgICBpZiAoaXQgIT0geF9tYXAuZW5kKCkpIHsKICAgICAgICAgICAgIC
AgIHVuc2lnbmVkIGxvbmcgbG9uZyB0b3RhbF9jb3N0ID0gcC5zZWNvbmQgKyBpdC0+c2Vjb25kOwogICAgICAgICAgICAgICAgaWYgKHRvdGFsX2Nvc3QgPCBhbnMpIGFucyA9IHRvdGFsX2Nvc3Q7CiAgICAgIC
AgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIElmIGFucyA9PSBVTExPTkdfTUFYIG1lYW5zIG5vIHNvbHV0aW9uPyBBY3R1YWxseSBhbHdheXMgYXQgbGVhc3QgYnkgbm90IGRpdmlkaW5nLgogICAgICAgIG
NvdXQgPDwgYW5zIDw8ICdcbic7CiAgICB9CiAgICByZXR1cm4gMDsKfQo=' | base64 -d > /app/main.cpp; tmux wait -S done
root@f662994ea5ac:/app#
